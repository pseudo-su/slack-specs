// Package pkg provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package pkg

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AdminAppsApprove request with any body
	AdminAppsApproveWithBody(ctx context.Context, params *AdminAppsApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminAppsApprove(ctx context.Context, params *AdminAppsApproveParams, body AdminAppsApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminAppsApprovedList request
	AdminAppsApprovedList(ctx context.Context, params *AdminAppsApprovedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminAppsRequestsList request
	AdminAppsRequestsList(ctx context.Context, params *AdminAppsRequestsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminAppsRestrict request with any body
	AdminAppsRestrictWithBody(ctx context.Context, params *AdminAppsRestrictParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminAppsRestrict(ctx context.Context, params *AdminAppsRestrictParams, body AdminAppsRestrictJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminAppsRestrictedList request
	AdminAppsRestrictedList(ctx context.Context, params *AdminAppsRestrictedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsArchive request with any body
	AdminConversationsArchiveWithBody(ctx context.Context, params *AdminConversationsArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminConversationsArchive(ctx context.Context, params *AdminConversationsArchiveParams, body AdminConversationsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsConvertToPrivate request with any body
	AdminConversationsConvertToPrivateWithBody(ctx context.Context, params *AdminConversationsConvertToPrivateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminConversationsConvertToPrivate(ctx context.Context, params *AdminConversationsConvertToPrivateParams, body AdminConversationsConvertToPrivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsCreate request with any body
	AdminConversationsCreateWithBody(ctx context.Context, params *AdminConversationsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminConversationsCreate(ctx context.Context, params *AdminConversationsCreateParams, body AdminConversationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsDelete request with any body
	AdminConversationsDeleteWithBody(ctx context.Context, params *AdminConversationsDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminConversationsDelete(ctx context.Context, params *AdminConversationsDeleteParams, body AdminConversationsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsDisconnectShared request with any body
	AdminConversationsDisconnectSharedWithBody(ctx context.Context, params *AdminConversationsDisconnectSharedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminConversationsDisconnectShared(ctx context.Context, params *AdminConversationsDisconnectSharedParams, body AdminConversationsDisconnectSharedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsEkmListOriginalConnectedChannelInfo request
	AdminConversationsEkmListOriginalConnectedChannelInfo(ctx context.Context, params *AdminConversationsEkmListOriginalConnectedChannelInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsGetConversationPrefs request
	AdminConversationsGetConversationPrefs(ctx context.Context, params *AdminConversationsGetConversationPrefsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsGetTeams request
	AdminConversationsGetTeams(ctx context.Context, params *AdminConversationsGetTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsInvite request with any body
	AdminConversationsInviteWithBody(ctx context.Context, params *AdminConversationsInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminConversationsInvite(ctx context.Context, params *AdminConversationsInviteParams, body AdminConversationsInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsRename request with any body
	AdminConversationsRenameWithBody(ctx context.Context, params *AdminConversationsRenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminConversationsRename(ctx context.Context, params *AdminConversationsRenameParams, body AdminConversationsRenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsRestrictAccessAddGroup request with any body
	AdminConversationsRestrictAccessAddGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsRestrictAccessListGroups request
	AdminConversationsRestrictAccessListGroups(ctx context.Context, params *AdminConversationsRestrictAccessListGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsRestrictAccessRemoveGroup request with any body
	AdminConversationsRestrictAccessRemoveGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsSearch request
	AdminConversationsSearch(ctx context.Context, params *AdminConversationsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsSetConversationPrefs request with any body
	AdminConversationsSetConversationPrefsWithBody(ctx context.Context, params *AdminConversationsSetConversationPrefsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminConversationsSetConversationPrefs(ctx context.Context, params *AdminConversationsSetConversationPrefsParams, body AdminConversationsSetConversationPrefsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsSetTeams request with any body
	AdminConversationsSetTeamsWithBody(ctx context.Context, params *AdminConversationsSetTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminConversationsSetTeams(ctx context.Context, params *AdminConversationsSetTeamsParams, body AdminConversationsSetTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminConversationsUnarchive request with any body
	AdminConversationsUnarchiveWithBody(ctx context.Context, params *AdminConversationsUnarchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminConversationsUnarchive(ctx context.Context, params *AdminConversationsUnarchiveParams, body AdminConversationsUnarchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminInviteRequestsApprove request with any body
	AdminInviteRequestsApproveWithBody(ctx context.Context, params *AdminInviteRequestsApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminInviteRequestsApprove(ctx context.Context, params *AdminInviteRequestsApproveParams, body AdminInviteRequestsApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminInviteRequestsApprovedList request
	AdminInviteRequestsApprovedList(ctx context.Context, params *AdminInviteRequestsApprovedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminInviteRequestsDeniedList request
	AdminInviteRequestsDeniedList(ctx context.Context, params *AdminInviteRequestsDeniedListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminInviteRequestsDeny request with any body
	AdminInviteRequestsDenyWithBody(ctx context.Context, params *AdminInviteRequestsDenyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminInviteRequestsDeny(ctx context.Context, params *AdminInviteRequestsDenyParams, body AdminInviteRequestsDenyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminInviteRequestsList request
	AdminInviteRequestsList(ctx context.Context, params *AdminInviteRequestsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTeamsAdminsList request
	AdminTeamsAdminsList(ctx context.Context, params *AdminTeamsAdminsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTeamsCreate request with any body
	AdminTeamsCreateWithBody(ctx context.Context, params *AdminTeamsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminTeamsCreate(ctx context.Context, params *AdminTeamsCreateParams, body AdminTeamsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTeamsList request
	AdminTeamsList(ctx context.Context, params *AdminTeamsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTeamsOwnersList request
	AdminTeamsOwnersList(ctx context.Context, params *AdminTeamsOwnersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTeamsSettingsInfo request
	AdminTeamsSettingsInfo(ctx context.Context, params *AdminTeamsSettingsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTeamsSettingsSetDefaultChannels request with any body
	AdminTeamsSettingsSetDefaultChannelsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTeamsSettingsSetDescription request with any body
	AdminTeamsSettingsSetDescriptionWithBody(ctx context.Context, params *AdminTeamsSettingsSetDescriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminTeamsSettingsSetDescription(ctx context.Context, params *AdminTeamsSettingsSetDescriptionParams, body AdminTeamsSettingsSetDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTeamsSettingsSetDiscoverability request with any body
	AdminTeamsSettingsSetDiscoverabilityWithBody(ctx context.Context, params *AdminTeamsSettingsSetDiscoverabilityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminTeamsSettingsSetDiscoverability(ctx context.Context, params *AdminTeamsSettingsSetDiscoverabilityParams, body AdminTeamsSettingsSetDiscoverabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTeamsSettingsSetIcon request with any body
	AdminTeamsSettingsSetIconWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminTeamsSettingsSetName request with any body
	AdminTeamsSettingsSetNameWithBody(ctx context.Context, params *AdminTeamsSettingsSetNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminTeamsSettingsSetName(ctx context.Context, params *AdminTeamsSettingsSetNameParams, body AdminTeamsSettingsSetNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsergroupsAddChannels request with any body
	AdminUsergroupsAddChannelsWithBody(ctx context.Context, params *AdminUsergroupsAddChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsergroupsAddChannels(ctx context.Context, params *AdminUsergroupsAddChannelsParams, body AdminUsergroupsAddChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsergroupsAddTeams request with any body
	AdminUsergroupsAddTeamsWithBody(ctx context.Context, params *AdminUsergroupsAddTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsergroupsAddTeams(ctx context.Context, params *AdminUsergroupsAddTeamsParams, body AdminUsergroupsAddTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsergroupsListChannels request
	AdminUsergroupsListChannels(ctx context.Context, params *AdminUsergroupsListChannelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsergroupsRemoveChannels request with any body
	AdminUsergroupsRemoveChannelsWithBody(ctx context.Context, params *AdminUsergroupsRemoveChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsergroupsRemoveChannels(ctx context.Context, params *AdminUsergroupsRemoveChannelsParams, body AdminUsergroupsRemoveChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsersAssign request with any body
	AdminUsersAssignWithBody(ctx context.Context, params *AdminUsersAssignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsersAssign(ctx context.Context, params *AdminUsersAssignParams, body AdminUsersAssignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsersInvite request with any body
	AdminUsersInviteWithBody(ctx context.Context, params *AdminUsersInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsersInvite(ctx context.Context, params *AdminUsersInviteParams, body AdminUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsersList request
	AdminUsersList(ctx context.Context, params *AdminUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsersRemove request with any body
	AdminUsersRemoveWithBody(ctx context.Context, params *AdminUsersRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsersRemove(ctx context.Context, params *AdminUsersRemoveParams, body AdminUsersRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsersSessionInvalidate request with any body
	AdminUsersSessionInvalidateWithBody(ctx context.Context, params *AdminUsersSessionInvalidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsersSessionInvalidate(ctx context.Context, params *AdminUsersSessionInvalidateParams, body AdminUsersSessionInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsersSessionReset request with any body
	AdminUsersSessionResetWithBody(ctx context.Context, params *AdminUsersSessionResetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsersSessionReset(ctx context.Context, params *AdminUsersSessionResetParams, body AdminUsersSessionResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsersSetAdmin request with any body
	AdminUsersSetAdminWithBody(ctx context.Context, params *AdminUsersSetAdminParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsersSetAdmin(ctx context.Context, params *AdminUsersSetAdminParams, body AdminUsersSetAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsersSetExpiration request with any body
	AdminUsersSetExpirationWithBody(ctx context.Context, params *AdminUsersSetExpirationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsersSetExpiration(ctx context.Context, params *AdminUsersSetExpirationParams, body AdminUsersSetExpirationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsersSetOwner request with any body
	AdminUsersSetOwnerWithBody(ctx context.Context, params *AdminUsersSetOwnerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsersSetOwner(ctx context.Context, params *AdminUsersSetOwnerParams, body AdminUsersSetOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUsersSetRegular request with any body
	AdminUsersSetRegularWithBody(ctx context.Context, params *AdminUsersSetRegularParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUsersSetRegular(ctx context.Context, params *AdminUsersSetRegularParams, body AdminUsersSetRegularJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApiTest request
	ApiTest(ctx context.Context, params *ApiTestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsEventAuthorizationsList request
	AppsEventAuthorizationsList(ctx context.Context, params *AppsEventAuthorizationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPermissionsInfo request
	AppsPermissionsInfo(ctx context.Context, params *AppsPermissionsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPermissionsRequest request
	AppsPermissionsRequest(ctx context.Context, params *AppsPermissionsRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPermissionsResourcesList request
	AppsPermissionsResourcesList(ctx context.Context, params *AppsPermissionsResourcesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPermissionsScopesList request
	AppsPermissionsScopesList(ctx context.Context, params *AppsPermissionsScopesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPermissionsUsersList request
	AppsPermissionsUsersList(ctx context.Context, params *AppsPermissionsUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsPermissionsUsersRequest request
	AppsPermissionsUsersRequest(ctx context.Context, params *AppsPermissionsUsersRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppsUninstall request
	AppsUninstall(ctx context.Context, params *AppsUninstallParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthRevoke request
	AuthRevoke(ctx context.Context, params *AuthRevokeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AuthTest request
	AuthTest(ctx context.Context, params *AuthTestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BotsInfo request
	BotsInfo(ctx context.Context, params *BotsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallsAdd request with any body
	CallsAddWithBody(ctx context.Context, params *CallsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallsAdd(ctx context.Context, params *CallsAddParams, body CallsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallsEnd request with any body
	CallsEndWithBody(ctx context.Context, params *CallsEndParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallsEnd(ctx context.Context, params *CallsEndParams, body CallsEndJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallsInfo request
	CallsInfo(ctx context.Context, params *CallsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallsParticipantsAdd request with any body
	CallsParticipantsAddWithBody(ctx context.Context, params *CallsParticipantsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallsParticipantsAdd(ctx context.Context, params *CallsParticipantsAddParams, body CallsParticipantsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallsParticipantsRemove request with any body
	CallsParticipantsRemoveWithBody(ctx context.Context, params *CallsParticipantsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallsParticipantsRemove(ctx context.Context, params *CallsParticipantsRemoveParams, body CallsParticipantsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CallsUpdate request with any body
	CallsUpdateWithBody(ctx context.Context, params *CallsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CallsUpdate(ctx context.Context, params *CallsUpdateParams, body CallsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChatDelete request with any body
	ChatDeleteWithBody(ctx context.Context, params *ChatDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChatDelete(ctx context.Context, params *ChatDeleteParams, body ChatDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChatDeleteScheduledMessage request with any body
	ChatDeleteScheduledMessageWithBody(ctx context.Context, params *ChatDeleteScheduledMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChatDeleteScheduledMessage(ctx context.Context, params *ChatDeleteScheduledMessageParams, body ChatDeleteScheduledMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChatGetPermalink request
	ChatGetPermalink(ctx context.Context, params *ChatGetPermalinkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChatMeMessage request with any body
	ChatMeMessageWithBody(ctx context.Context, params *ChatMeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChatMeMessage(ctx context.Context, params *ChatMeMessageParams, body ChatMeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChatPostEphemeral request with any body
	ChatPostEphemeralWithBody(ctx context.Context, params *ChatPostEphemeralParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChatPostEphemeral(ctx context.Context, params *ChatPostEphemeralParams, body ChatPostEphemeralJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChatPostMessage request with any body
	ChatPostMessageWithBody(ctx context.Context, params *ChatPostMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChatPostMessage(ctx context.Context, params *ChatPostMessageParams, body ChatPostMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChatScheduleMessage request with any body
	ChatScheduleMessageWithBody(ctx context.Context, params *ChatScheduleMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChatScheduleMessage(ctx context.Context, params *ChatScheduleMessageParams, body ChatScheduleMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChatScheduledMessagesList request
	ChatScheduledMessagesList(ctx context.Context, params *ChatScheduledMessagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChatUnfurl request with any body
	ChatUnfurlWithBody(ctx context.Context, params *ChatUnfurlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChatUnfurl(ctx context.Context, params *ChatUnfurlParams, body ChatUnfurlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChatUpdate request with any body
	ChatUpdateWithBody(ctx context.Context, params *ChatUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChatUpdate(ctx context.Context, params *ChatUpdateParams, body ChatUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsArchive request with any body
	ConversationsArchiveWithBody(ctx context.Context, params *ConversationsArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsArchive(ctx context.Context, params *ConversationsArchiveParams, body ConversationsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsClose request with any body
	ConversationsCloseWithBody(ctx context.Context, params *ConversationsCloseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsClose(ctx context.Context, params *ConversationsCloseParams, body ConversationsCloseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsCreate request with any body
	ConversationsCreateWithBody(ctx context.Context, params *ConversationsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsCreate(ctx context.Context, params *ConversationsCreateParams, body ConversationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsHistory request
	ConversationsHistory(ctx context.Context, params *ConversationsHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsInfo request
	ConversationsInfo(ctx context.Context, params *ConversationsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsInvite request with any body
	ConversationsInviteWithBody(ctx context.Context, params *ConversationsInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsInvite(ctx context.Context, params *ConversationsInviteParams, body ConversationsInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsJoin request with any body
	ConversationsJoinWithBody(ctx context.Context, params *ConversationsJoinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsJoin(ctx context.Context, params *ConversationsJoinParams, body ConversationsJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsKick request with any body
	ConversationsKickWithBody(ctx context.Context, params *ConversationsKickParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsKick(ctx context.Context, params *ConversationsKickParams, body ConversationsKickJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsLeave request with any body
	ConversationsLeaveWithBody(ctx context.Context, params *ConversationsLeaveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsLeave(ctx context.Context, params *ConversationsLeaveParams, body ConversationsLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsList request
	ConversationsList(ctx context.Context, params *ConversationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsMark request with any body
	ConversationsMarkWithBody(ctx context.Context, params *ConversationsMarkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsMark(ctx context.Context, params *ConversationsMarkParams, body ConversationsMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsMembers request
	ConversationsMembers(ctx context.Context, params *ConversationsMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsOpen request with any body
	ConversationsOpenWithBody(ctx context.Context, params *ConversationsOpenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsOpen(ctx context.Context, params *ConversationsOpenParams, body ConversationsOpenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsRename request with any body
	ConversationsRenameWithBody(ctx context.Context, params *ConversationsRenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsRename(ctx context.Context, params *ConversationsRenameParams, body ConversationsRenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsReplies request
	ConversationsReplies(ctx context.Context, params *ConversationsRepliesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsSetPurpose request with any body
	ConversationsSetPurposeWithBody(ctx context.Context, params *ConversationsSetPurposeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsSetPurpose(ctx context.Context, params *ConversationsSetPurposeParams, body ConversationsSetPurposeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsSetTopic request with any body
	ConversationsSetTopicWithBody(ctx context.Context, params *ConversationsSetTopicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsSetTopic(ctx context.Context, params *ConversationsSetTopicParams, body ConversationsSetTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConversationsUnarchive request with any body
	ConversationsUnarchiveWithBody(ctx context.Context, params *ConversationsUnarchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConversationsUnarchive(ctx context.Context, params *ConversationsUnarchiveParams, body ConversationsUnarchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DialogOpen request
	DialogOpen(ctx context.Context, params *DialogOpenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DndEndDnd request
	DndEndDnd(ctx context.Context, params *DndEndDndParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DndEndSnooze request
	DndEndSnooze(ctx context.Context, params *DndEndSnoozeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DndInfo request
	DndInfo(ctx context.Context, params *DndInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DndSetSnooze request with any body
	DndSetSnoozeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DndTeamInfo request
	DndTeamInfo(ctx context.Context, params *DndTeamInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesCommentsDelete request with any body
	FilesCommentsDeleteWithBody(ctx context.Context, params *FilesCommentsDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FilesCommentsDelete(ctx context.Context, params *FilesCommentsDeleteParams, body FilesCommentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesDelete request with any body
	FilesDeleteWithBody(ctx context.Context, params *FilesDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FilesDelete(ctx context.Context, params *FilesDeleteParams, body FilesDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesInfo request
	FilesInfo(ctx context.Context, params *FilesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesList request
	FilesList(ctx context.Context, params *FilesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesRemoteAdd request with any body
	FilesRemoteAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesRemoteInfo request
	FilesRemoteInfo(ctx context.Context, params *FilesRemoteInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesRemoteList request
	FilesRemoteList(ctx context.Context, params *FilesRemoteListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesRemoteRemove request with any body
	FilesRemoteRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesRemoteShare request
	FilesRemoteShare(ctx context.Context, params *FilesRemoteShareParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesRemoteUpdate request with any body
	FilesRemoteUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesRevokePublicURL request with any body
	FilesRevokePublicURLWithBody(ctx context.Context, params *FilesRevokePublicURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FilesRevokePublicURL(ctx context.Context, params *FilesRevokePublicURLParams, body FilesRevokePublicURLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesSharedPublicURL request with any body
	FilesSharedPublicURLWithBody(ctx context.Context, params *FilesSharedPublicURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FilesSharedPublicURL(ctx context.Context, params *FilesSharedPublicURLParams, body FilesSharedPublicURLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FilesUpload request with any body
	FilesUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MigrationExchange request
	MigrationExchange(ctx context.Context, params *MigrationExchangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OauthAccess request
	OauthAccess(ctx context.Context, params *OauthAccessParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OauthToken request
	OauthToken(ctx context.Context, params *OauthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// OauthV2Access request
	OauthV2Access(ctx context.Context, params *OauthV2AccessParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PinsAdd request with any body
	PinsAddWithBody(ctx context.Context, params *PinsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PinsAdd(ctx context.Context, params *PinsAddParams, body PinsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PinsList request
	PinsList(ctx context.Context, params *PinsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PinsRemove request with any body
	PinsRemoveWithBody(ctx context.Context, params *PinsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PinsRemove(ctx context.Context, params *PinsRemoveParams, body PinsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReactionsAdd request with any body
	ReactionsAddWithBody(ctx context.Context, params *ReactionsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReactionsAdd(ctx context.Context, params *ReactionsAddParams, body ReactionsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReactionsGet request
	ReactionsGet(ctx context.Context, params *ReactionsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReactionsList request
	ReactionsList(ctx context.Context, params *ReactionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReactionsRemove request with any body
	ReactionsRemoveWithBody(ctx context.Context, params *ReactionsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReactionsRemove(ctx context.Context, params *ReactionsRemoveParams, body ReactionsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemindersAdd request with any body
	RemindersAddWithBody(ctx context.Context, params *RemindersAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemindersAdd(ctx context.Context, params *RemindersAddParams, body RemindersAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemindersComplete request with any body
	RemindersCompleteWithBody(ctx context.Context, params *RemindersCompleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemindersComplete(ctx context.Context, params *RemindersCompleteParams, body RemindersCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemindersDelete request with any body
	RemindersDeleteWithBody(ctx context.Context, params *RemindersDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemindersDelete(ctx context.Context, params *RemindersDeleteParams, body RemindersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemindersInfo request
	RemindersInfo(ctx context.Context, params *RemindersInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemindersList request
	RemindersList(ctx context.Context, params *RemindersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RtmConnect request
	RtmConnect(ctx context.Context, params *RtmConnectParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchMessages request
	SearchMessages(ctx context.Context, params *SearchMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StarsAdd request with any body
	StarsAddWithBody(ctx context.Context, params *StarsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StarsAdd(ctx context.Context, params *StarsAddParams, body StarsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StarsList request
	StarsList(ctx context.Context, params *StarsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StarsRemove request with any body
	StarsRemoveWithBody(ctx context.Context, params *StarsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	StarsRemove(ctx context.Context, params *StarsRemoveParams, body StarsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamAccessLogs request
	TeamAccessLogs(ctx context.Context, params *TeamAccessLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamBillableInfo request
	TeamBillableInfo(ctx context.Context, params *TeamBillableInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamInfo request
	TeamInfo(ctx context.Context, params *TeamInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamIntegrationLogs request
	TeamIntegrationLogs(ctx context.Context, params *TeamIntegrationLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TeamProfileGet request
	TeamProfileGet(ctx context.Context, params *TeamProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsergroupsCreate request with any body
	UsergroupsCreateWithBody(ctx context.Context, params *UsergroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsergroupsCreate(ctx context.Context, params *UsergroupsCreateParams, body UsergroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsergroupsDisable request with any body
	UsergroupsDisableWithBody(ctx context.Context, params *UsergroupsDisableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsergroupsDisable(ctx context.Context, params *UsergroupsDisableParams, body UsergroupsDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsergroupsEnable request with any body
	UsergroupsEnableWithBody(ctx context.Context, params *UsergroupsEnableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsergroupsEnable(ctx context.Context, params *UsergroupsEnableParams, body UsergroupsEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsergroupsList request
	UsergroupsList(ctx context.Context, params *UsergroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsergroupsUpdate request with any body
	UsergroupsUpdateWithBody(ctx context.Context, params *UsergroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsergroupsUpdate(ctx context.Context, params *UsergroupsUpdateParams, body UsergroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsergroupsUsersList request
	UsergroupsUsersList(ctx context.Context, params *UsergroupsUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsergroupsUsersUpdate request with any body
	UsergroupsUsersUpdateWithBody(ctx context.Context, params *UsergroupsUsersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsergroupsUsersUpdate(ctx context.Context, params *UsergroupsUsersUpdateParams, body UsergroupsUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersConversations request
	UsersConversations(ctx context.Context, params *UsersConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersDeletePhoto request with any body
	UsersDeletePhotoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersGetPresence request
	UsersGetPresence(ctx context.Context, params *UsersGetPresenceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersIdentity request
	UsersIdentity(ctx context.Context, params *UsersIdentityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersInfo request
	UsersInfo(ctx context.Context, params *UsersInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersList request
	UsersList(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersLookupByEmail request
	UsersLookupByEmail(ctx context.Context, params *UsersLookupByEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersProfileGet request
	UsersProfileGet(ctx context.Context, params *UsersProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersProfileSet request with any body
	UsersProfileSetWithBody(ctx context.Context, params *UsersProfileSetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersProfileSet(ctx context.Context, params *UsersProfileSetParams, body UsersProfileSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersSetActive request
	UsersSetActive(ctx context.Context, params *UsersSetActiveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersSetPhoto request with any body
	UsersSetPhotoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UsersSetPresence request with any body
	UsersSetPresenceWithBody(ctx context.Context, params *UsersSetPresenceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UsersSetPresence(ctx context.Context, params *UsersSetPresenceParams, body UsersSetPresenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsOpen request
	ViewsOpen(ctx context.Context, params *ViewsOpenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsPublish request
	ViewsPublish(ctx context.Context, params *ViewsPublishParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsPush request
	ViewsPush(ctx context.Context, params *ViewsPushParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ViewsUpdate request
	ViewsUpdate(ctx context.Context, params *ViewsUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsStepCompleted request
	WorkflowsStepCompleted(ctx context.Context, params *WorkflowsStepCompletedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsStepFailed request
	WorkflowsStepFailed(ctx context.Context, params *WorkflowsStepFailedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WorkflowsUpdateStep request
	WorkflowsUpdateStep(ctx context.Context, params *WorkflowsUpdateStepParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AdminAppsApproveWithBody(ctx context.Context, params *AdminAppsApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAppsApproveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAppsApprove(ctx context.Context, params *AdminAppsApproveParams, body AdminAppsApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAppsApproveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAppsApprovedList(ctx context.Context, params *AdminAppsApprovedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAppsApprovedListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAppsRequestsList(ctx context.Context, params *AdminAppsRequestsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAppsRequestsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAppsRestrictWithBody(ctx context.Context, params *AdminAppsRestrictParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAppsRestrictRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAppsRestrict(ctx context.Context, params *AdminAppsRestrictParams, body AdminAppsRestrictJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAppsRestrictRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminAppsRestrictedList(ctx context.Context, params *AdminAppsRestrictedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminAppsRestrictedListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsArchiveWithBody(ctx context.Context, params *AdminConversationsArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsArchiveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsArchive(ctx context.Context, params *AdminConversationsArchiveParams, body AdminConversationsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsArchiveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsConvertToPrivateWithBody(ctx context.Context, params *AdminConversationsConvertToPrivateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsConvertToPrivateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsConvertToPrivate(ctx context.Context, params *AdminConversationsConvertToPrivateParams, body AdminConversationsConvertToPrivateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsConvertToPrivateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsCreateWithBody(ctx context.Context, params *AdminConversationsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsCreate(ctx context.Context, params *AdminConversationsCreateParams, body AdminConversationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsDeleteWithBody(ctx context.Context, params *AdminConversationsDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsDeleteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsDelete(ctx context.Context, params *AdminConversationsDeleteParams, body AdminConversationsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsDeleteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsDisconnectSharedWithBody(ctx context.Context, params *AdminConversationsDisconnectSharedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsDisconnectSharedRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsDisconnectShared(ctx context.Context, params *AdminConversationsDisconnectSharedParams, body AdminConversationsDisconnectSharedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsDisconnectSharedRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsEkmListOriginalConnectedChannelInfo(ctx context.Context, params *AdminConversationsEkmListOriginalConnectedChannelInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsEkmListOriginalConnectedChannelInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsGetConversationPrefs(ctx context.Context, params *AdminConversationsGetConversationPrefsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsGetConversationPrefsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsGetTeams(ctx context.Context, params *AdminConversationsGetTeamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsGetTeamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsInviteWithBody(ctx context.Context, params *AdminConversationsInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsInviteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsInvite(ctx context.Context, params *AdminConversationsInviteParams, body AdminConversationsInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsInviteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsRenameWithBody(ctx context.Context, params *AdminConversationsRenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsRenameRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsRename(ctx context.Context, params *AdminConversationsRenameParams, body AdminConversationsRenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsRenameRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsRestrictAccessAddGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsRestrictAccessAddGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsRestrictAccessListGroups(ctx context.Context, params *AdminConversationsRestrictAccessListGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsRestrictAccessListGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsRestrictAccessRemoveGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsRestrictAccessRemoveGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsSearch(ctx context.Context, params *AdminConversationsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsSetConversationPrefsWithBody(ctx context.Context, params *AdminConversationsSetConversationPrefsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsSetConversationPrefsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsSetConversationPrefs(ctx context.Context, params *AdminConversationsSetConversationPrefsParams, body AdminConversationsSetConversationPrefsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsSetConversationPrefsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsSetTeamsWithBody(ctx context.Context, params *AdminConversationsSetTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsSetTeamsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsSetTeams(ctx context.Context, params *AdminConversationsSetTeamsParams, body AdminConversationsSetTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsSetTeamsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsUnarchiveWithBody(ctx context.Context, params *AdminConversationsUnarchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsUnarchiveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminConversationsUnarchive(ctx context.Context, params *AdminConversationsUnarchiveParams, body AdminConversationsUnarchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminConversationsUnarchiveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminInviteRequestsApproveWithBody(ctx context.Context, params *AdminInviteRequestsApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminInviteRequestsApproveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminInviteRequestsApprove(ctx context.Context, params *AdminInviteRequestsApproveParams, body AdminInviteRequestsApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminInviteRequestsApproveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminInviteRequestsApprovedList(ctx context.Context, params *AdminInviteRequestsApprovedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminInviteRequestsApprovedListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminInviteRequestsDeniedList(ctx context.Context, params *AdminInviteRequestsDeniedListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminInviteRequestsDeniedListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminInviteRequestsDenyWithBody(ctx context.Context, params *AdminInviteRequestsDenyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminInviteRequestsDenyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminInviteRequestsDeny(ctx context.Context, params *AdminInviteRequestsDenyParams, body AdminInviteRequestsDenyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminInviteRequestsDenyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminInviteRequestsList(ctx context.Context, params *AdminInviteRequestsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminInviteRequestsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsAdminsList(ctx context.Context, params *AdminTeamsAdminsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsAdminsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsCreateWithBody(ctx context.Context, params *AdminTeamsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsCreate(ctx context.Context, params *AdminTeamsCreateParams, body AdminTeamsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsList(ctx context.Context, params *AdminTeamsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsOwnersList(ctx context.Context, params *AdminTeamsOwnersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsOwnersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsSettingsInfo(ctx context.Context, params *AdminTeamsSettingsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsSettingsInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsSettingsSetDefaultChannelsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsSettingsSetDefaultChannelsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsSettingsSetDescriptionWithBody(ctx context.Context, params *AdminTeamsSettingsSetDescriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsSettingsSetDescriptionRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsSettingsSetDescription(ctx context.Context, params *AdminTeamsSettingsSetDescriptionParams, body AdminTeamsSettingsSetDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsSettingsSetDescriptionRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsSettingsSetDiscoverabilityWithBody(ctx context.Context, params *AdminTeamsSettingsSetDiscoverabilityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsSettingsSetDiscoverabilityRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsSettingsSetDiscoverability(ctx context.Context, params *AdminTeamsSettingsSetDiscoverabilityParams, body AdminTeamsSettingsSetDiscoverabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsSettingsSetDiscoverabilityRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsSettingsSetIconWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsSettingsSetIconRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsSettingsSetNameWithBody(ctx context.Context, params *AdminTeamsSettingsSetNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsSettingsSetNameRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminTeamsSettingsSetName(ctx context.Context, params *AdminTeamsSettingsSetNameParams, body AdminTeamsSettingsSetNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminTeamsSettingsSetNameRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsergroupsAddChannelsWithBody(ctx context.Context, params *AdminUsergroupsAddChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsergroupsAddChannelsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsergroupsAddChannels(ctx context.Context, params *AdminUsergroupsAddChannelsParams, body AdminUsergroupsAddChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsergroupsAddChannelsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsergroupsAddTeamsWithBody(ctx context.Context, params *AdminUsergroupsAddTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsergroupsAddTeamsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsergroupsAddTeams(ctx context.Context, params *AdminUsergroupsAddTeamsParams, body AdminUsergroupsAddTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsergroupsAddTeamsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsergroupsListChannels(ctx context.Context, params *AdminUsergroupsListChannelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsergroupsListChannelsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsergroupsRemoveChannelsWithBody(ctx context.Context, params *AdminUsergroupsRemoveChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsergroupsRemoveChannelsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsergroupsRemoveChannels(ctx context.Context, params *AdminUsergroupsRemoveChannelsParams, body AdminUsergroupsRemoveChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsergroupsRemoveChannelsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersAssignWithBody(ctx context.Context, params *AdminUsersAssignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersAssignRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersAssign(ctx context.Context, params *AdminUsersAssignParams, body AdminUsersAssignJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersAssignRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersInviteWithBody(ctx context.Context, params *AdminUsersInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersInviteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersInvite(ctx context.Context, params *AdminUsersInviteParams, body AdminUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersInviteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersList(ctx context.Context, params *AdminUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersRemoveWithBody(ctx context.Context, params *AdminUsersRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersRemoveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersRemove(ctx context.Context, params *AdminUsersRemoveParams, body AdminUsersRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersRemoveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSessionInvalidateWithBody(ctx context.Context, params *AdminUsersSessionInvalidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSessionInvalidateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSessionInvalidate(ctx context.Context, params *AdminUsersSessionInvalidateParams, body AdminUsersSessionInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSessionInvalidateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSessionResetWithBody(ctx context.Context, params *AdminUsersSessionResetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSessionResetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSessionReset(ctx context.Context, params *AdminUsersSessionResetParams, body AdminUsersSessionResetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSessionResetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSetAdminWithBody(ctx context.Context, params *AdminUsersSetAdminParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSetAdminRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSetAdmin(ctx context.Context, params *AdminUsersSetAdminParams, body AdminUsersSetAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSetAdminRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSetExpirationWithBody(ctx context.Context, params *AdminUsersSetExpirationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSetExpirationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSetExpiration(ctx context.Context, params *AdminUsersSetExpirationParams, body AdminUsersSetExpirationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSetExpirationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSetOwnerWithBody(ctx context.Context, params *AdminUsersSetOwnerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSetOwnerRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSetOwner(ctx context.Context, params *AdminUsersSetOwnerParams, body AdminUsersSetOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSetOwnerRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSetRegularWithBody(ctx context.Context, params *AdminUsersSetRegularParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSetRegularRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUsersSetRegular(ctx context.Context, params *AdminUsersSetRegularParams, body AdminUsersSetRegularJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUsersSetRegularRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApiTest(ctx context.Context, params *ApiTestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApiTestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsEventAuthorizationsList(ctx context.Context, params *AppsEventAuthorizationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsEventAuthorizationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPermissionsInfo(ctx context.Context, params *AppsPermissionsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPermissionsInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPermissionsRequest(ctx context.Context, params *AppsPermissionsRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPermissionsRequestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPermissionsResourcesList(ctx context.Context, params *AppsPermissionsResourcesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPermissionsResourcesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPermissionsScopesList(ctx context.Context, params *AppsPermissionsScopesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPermissionsScopesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPermissionsUsersList(ctx context.Context, params *AppsPermissionsUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPermissionsUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsPermissionsUsersRequest(ctx context.Context, params *AppsPermissionsUsersRequestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsPermissionsUsersRequestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppsUninstall(ctx context.Context, params *AppsUninstallParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppsUninstallRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthRevoke(ctx context.Context, params *AuthRevokeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthRevokeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AuthTest(ctx context.Context, params *AuthTestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthTestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BotsInfo(ctx context.Context, params *BotsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBotsInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsAddWithBody(ctx context.Context, params *CallsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsAddRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsAdd(ctx context.Context, params *CallsAddParams, body CallsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsAddRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsEndWithBody(ctx context.Context, params *CallsEndParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsEndRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsEnd(ctx context.Context, params *CallsEndParams, body CallsEndJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsEndRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsInfo(ctx context.Context, params *CallsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsParticipantsAddWithBody(ctx context.Context, params *CallsParticipantsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsParticipantsAddRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsParticipantsAdd(ctx context.Context, params *CallsParticipantsAddParams, body CallsParticipantsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsParticipantsAddRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsParticipantsRemoveWithBody(ctx context.Context, params *CallsParticipantsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsParticipantsRemoveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsParticipantsRemove(ctx context.Context, params *CallsParticipantsRemoveParams, body CallsParticipantsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsParticipantsRemoveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsUpdateWithBody(ctx context.Context, params *CallsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsUpdateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CallsUpdate(ctx context.Context, params *CallsUpdateParams, body CallsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCallsUpdateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatDeleteWithBody(ctx context.Context, params *ChatDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatDeleteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatDelete(ctx context.Context, params *ChatDeleteParams, body ChatDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatDeleteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatDeleteScheduledMessageWithBody(ctx context.Context, params *ChatDeleteScheduledMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatDeleteScheduledMessageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatDeleteScheduledMessage(ctx context.Context, params *ChatDeleteScheduledMessageParams, body ChatDeleteScheduledMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatDeleteScheduledMessageRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatGetPermalink(ctx context.Context, params *ChatGetPermalinkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatGetPermalinkRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatMeMessageWithBody(ctx context.Context, params *ChatMeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatMeMessageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatMeMessage(ctx context.Context, params *ChatMeMessageParams, body ChatMeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatMeMessageRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatPostEphemeralWithBody(ctx context.Context, params *ChatPostEphemeralParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatPostEphemeralRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatPostEphemeral(ctx context.Context, params *ChatPostEphemeralParams, body ChatPostEphemeralJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatPostEphemeralRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatPostMessageWithBody(ctx context.Context, params *ChatPostMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatPostMessageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatPostMessage(ctx context.Context, params *ChatPostMessageParams, body ChatPostMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatPostMessageRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatScheduleMessageWithBody(ctx context.Context, params *ChatScheduleMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatScheduleMessageRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatScheduleMessage(ctx context.Context, params *ChatScheduleMessageParams, body ChatScheduleMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatScheduleMessageRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatScheduledMessagesList(ctx context.Context, params *ChatScheduledMessagesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatScheduledMessagesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatUnfurlWithBody(ctx context.Context, params *ChatUnfurlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatUnfurlRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatUnfurl(ctx context.Context, params *ChatUnfurlParams, body ChatUnfurlJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatUnfurlRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatUpdateWithBody(ctx context.Context, params *ChatUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatUpdateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChatUpdate(ctx context.Context, params *ChatUpdateParams, body ChatUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChatUpdateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsArchiveWithBody(ctx context.Context, params *ConversationsArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsArchiveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsArchive(ctx context.Context, params *ConversationsArchiveParams, body ConversationsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsArchiveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsCloseWithBody(ctx context.Context, params *ConversationsCloseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsCloseRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsClose(ctx context.Context, params *ConversationsCloseParams, body ConversationsCloseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsCloseRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsCreateWithBody(ctx context.Context, params *ConversationsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsCreate(ctx context.Context, params *ConversationsCreateParams, body ConversationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsHistory(ctx context.Context, params *ConversationsHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsInfo(ctx context.Context, params *ConversationsInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsInviteWithBody(ctx context.Context, params *ConversationsInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsInviteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsInvite(ctx context.Context, params *ConversationsInviteParams, body ConversationsInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsInviteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsJoinWithBody(ctx context.Context, params *ConversationsJoinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsJoinRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsJoin(ctx context.Context, params *ConversationsJoinParams, body ConversationsJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsJoinRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsKickWithBody(ctx context.Context, params *ConversationsKickParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsKickRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsKick(ctx context.Context, params *ConversationsKickParams, body ConversationsKickJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsKickRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsLeaveWithBody(ctx context.Context, params *ConversationsLeaveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsLeaveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsLeave(ctx context.Context, params *ConversationsLeaveParams, body ConversationsLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsLeaveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsList(ctx context.Context, params *ConversationsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsMarkWithBody(ctx context.Context, params *ConversationsMarkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsMarkRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsMark(ctx context.Context, params *ConversationsMarkParams, body ConversationsMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsMarkRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsMembers(ctx context.Context, params *ConversationsMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsMembersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsOpenWithBody(ctx context.Context, params *ConversationsOpenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsOpenRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsOpen(ctx context.Context, params *ConversationsOpenParams, body ConversationsOpenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsOpenRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsRenameWithBody(ctx context.Context, params *ConversationsRenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsRenameRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsRename(ctx context.Context, params *ConversationsRenameParams, body ConversationsRenameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsRenameRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsReplies(ctx context.Context, params *ConversationsRepliesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsRepliesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsSetPurposeWithBody(ctx context.Context, params *ConversationsSetPurposeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsSetPurposeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsSetPurpose(ctx context.Context, params *ConversationsSetPurposeParams, body ConversationsSetPurposeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsSetPurposeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsSetTopicWithBody(ctx context.Context, params *ConversationsSetTopicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsSetTopicRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsSetTopic(ctx context.Context, params *ConversationsSetTopicParams, body ConversationsSetTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsSetTopicRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsUnarchiveWithBody(ctx context.Context, params *ConversationsUnarchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsUnarchiveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConversationsUnarchive(ctx context.Context, params *ConversationsUnarchiveParams, body ConversationsUnarchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConversationsUnarchiveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DialogOpen(ctx context.Context, params *DialogOpenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDialogOpenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DndEndDnd(ctx context.Context, params *DndEndDndParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDndEndDndRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DndEndSnooze(ctx context.Context, params *DndEndSnoozeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDndEndSnoozeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DndInfo(ctx context.Context, params *DndInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDndInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DndSetSnoozeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDndSetSnoozeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DndTeamInfo(ctx context.Context, params *DndTeamInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDndTeamInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesCommentsDeleteWithBody(ctx context.Context, params *FilesCommentsDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesCommentsDeleteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesCommentsDelete(ctx context.Context, params *FilesCommentsDeleteParams, body FilesCommentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesCommentsDeleteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesDeleteWithBody(ctx context.Context, params *FilesDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesDeleteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesDelete(ctx context.Context, params *FilesDeleteParams, body FilesDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesDeleteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesInfo(ctx context.Context, params *FilesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesList(ctx context.Context, params *FilesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesRemoteAddWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesRemoteAddRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesRemoteInfo(ctx context.Context, params *FilesRemoteInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesRemoteInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesRemoteList(ctx context.Context, params *FilesRemoteListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesRemoteListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesRemoteRemoveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesRemoteRemoveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesRemoteShare(ctx context.Context, params *FilesRemoteShareParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesRemoteShareRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesRemoteUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesRemoteUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesRevokePublicURLWithBody(ctx context.Context, params *FilesRevokePublicURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesRevokePublicURLRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesRevokePublicURL(ctx context.Context, params *FilesRevokePublicURLParams, body FilesRevokePublicURLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesRevokePublicURLRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesSharedPublicURLWithBody(ctx context.Context, params *FilesSharedPublicURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesSharedPublicURLRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesSharedPublicURL(ctx context.Context, params *FilesSharedPublicURLParams, body FilesSharedPublicURLJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesSharedPublicURLRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FilesUploadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFilesUploadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MigrationExchange(ctx context.Context, params *MigrationExchangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMigrationExchangeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OauthAccess(ctx context.Context, params *OauthAccessParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOauthAccessRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OauthToken(ctx context.Context, params *OauthTokenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOauthTokenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) OauthV2Access(ctx context.Context, params *OauthV2AccessParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewOauthV2AccessRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PinsAddWithBody(ctx context.Context, params *PinsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinsAddRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PinsAdd(ctx context.Context, params *PinsAddParams, body PinsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinsAddRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PinsList(ctx context.Context, params *PinsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PinsRemoveWithBody(ctx context.Context, params *PinsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinsRemoveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PinsRemove(ctx context.Context, params *PinsRemoveParams, body PinsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPinsRemoveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReactionsAddWithBody(ctx context.Context, params *ReactionsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReactionsAddRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReactionsAdd(ctx context.Context, params *ReactionsAddParams, body ReactionsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReactionsAddRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReactionsGet(ctx context.Context, params *ReactionsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReactionsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReactionsList(ctx context.Context, params *ReactionsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReactionsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReactionsRemoveWithBody(ctx context.Context, params *ReactionsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReactionsRemoveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReactionsRemove(ctx context.Context, params *ReactionsRemoveParams, body ReactionsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReactionsRemoveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemindersAddWithBody(ctx context.Context, params *RemindersAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemindersAddRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemindersAdd(ctx context.Context, params *RemindersAddParams, body RemindersAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemindersAddRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemindersCompleteWithBody(ctx context.Context, params *RemindersCompleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemindersCompleteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemindersComplete(ctx context.Context, params *RemindersCompleteParams, body RemindersCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemindersCompleteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemindersDeleteWithBody(ctx context.Context, params *RemindersDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemindersDeleteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemindersDelete(ctx context.Context, params *RemindersDeleteParams, body RemindersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemindersDeleteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemindersInfo(ctx context.Context, params *RemindersInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemindersInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemindersList(ctx context.Context, params *RemindersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemindersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RtmConnect(ctx context.Context, params *RtmConnectParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRtmConnectRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchMessages(ctx context.Context, params *SearchMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StarsAddWithBody(ctx context.Context, params *StarsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStarsAddRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StarsAdd(ctx context.Context, params *StarsAddParams, body StarsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStarsAddRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StarsList(ctx context.Context, params *StarsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStarsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StarsRemoveWithBody(ctx context.Context, params *StarsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStarsRemoveRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StarsRemove(ctx context.Context, params *StarsRemoveParams, body StarsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStarsRemoveRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamAccessLogs(ctx context.Context, params *TeamAccessLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamAccessLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamBillableInfo(ctx context.Context, params *TeamBillableInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamBillableInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamInfo(ctx context.Context, params *TeamInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamIntegrationLogs(ctx context.Context, params *TeamIntegrationLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamIntegrationLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TeamProfileGet(ctx context.Context, params *TeamProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTeamProfileGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsCreateWithBody(ctx context.Context, params *UsergroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsCreateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsCreate(ctx context.Context, params *UsergroupsCreateParams, body UsergroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsCreateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsDisableWithBody(ctx context.Context, params *UsergroupsDisableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsDisableRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsDisable(ctx context.Context, params *UsergroupsDisableParams, body UsergroupsDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsDisableRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsEnableWithBody(ctx context.Context, params *UsergroupsEnableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsEnableRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsEnable(ctx context.Context, params *UsergroupsEnableParams, body UsergroupsEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsEnableRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsList(ctx context.Context, params *UsergroupsListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsUpdateWithBody(ctx context.Context, params *UsergroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsUpdateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsUpdate(ctx context.Context, params *UsergroupsUpdateParams, body UsergroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsUpdateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsUsersList(ctx context.Context, params *UsergroupsUsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsUsersUpdateWithBody(ctx context.Context, params *UsergroupsUsersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsUsersUpdateRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsergroupsUsersUpdate(ctx context.Context, params *UsergroupsUsersUpdateParams, body UsergroupsUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsergroupsUsersUpdateRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersConversations(ctx context.Context, params *UsersConversationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersConversationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersDeletePhotoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersDeletePhotoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersGetPresence(ctx context.Context, params *UsersGetPresenceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersGetPresenceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersIdentity(ctx context.Context, params *UsersIdentityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersIdentityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersInfo(ctx context.Context, params *UsersInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersList(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersLookupByEmail(ctx context.Context, params *UsersLookupByEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersLookupByEmailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersProfileGet(ctx context.Context, params *UsersProfileGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersProfileGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersProfileSetWithBody(ctx context.Context, params *UsersProfileSetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersProfileSetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersProfileSet(ctx context.Context, params *UsersProfileSetParams, body UsersProfileSetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersProfileSetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersSetActive(ctx context.Context, params *UsersSetActiveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersSetActiveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersSetPhotoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersSetPhotoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersSetPresenceWithBody(ctx context.Context, params *UsersSetPresenceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersSetPresenceRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UsersSetPresence(ctx context.Context, params *UsersSetPresenceParams, body UsersSetPresenceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUsersSetPresenceRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsOpen(ctx context.Context, params *ViewsOpenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsOpenRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsPublish(ctx context.Context, params *ViewsPublishParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsPublishRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsPush(ctx context.Context, params *ViewsPushParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsPushRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ViewsUpdate(ctx context.Context, params *ViewsUpdateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewViewsUpdateRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsStepCompleted(ctx context.Context, params *WorkflowsStepCompletedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsStepCompletedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsStepFailed(ctx context.Context, params *WorkflowsStepFailedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsStepFailedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WorkflowsUpdateStep(ctx context.Context, params *WorkflowsUpdateStepParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWorkflowsUpdateStepRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAdminAppsApproveRequest calls the generic AdminAppsApprove builder with application/json body
func NewAdminAppsApproveRequest(server string, params *AdminAppsApproveParams, body AdminAppsApproveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminAppsApproveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminAppsApproveRequestWithBody generates requests for AdminAppsApprove with any type of body
func NewAdminAppsApproveRequestWithBody(server string, params *AdminAppsApproveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.apps.approve")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminAppsApprovedListRequest generates requests for AdminAppsApprovedList
func NewAdminAppsApprovedListRequest(server string, params *AdminAppsApprovedListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.apps.approved.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TeamId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EnterpriseId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enterprise_id", runtime.ParamLocationQuery, *params.EnterpriseId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminAppsRequestsListRequest generates requests for AdminAppsRequestsList
func NewAdminAppsRequestsListRequest(server string, params *AdminAppsRequestsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.apps.requests.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TeamId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminAppsRestrictRequest calls the generic AdminAppsRestrict builder with application/json body
func NewAdminAppsRestrictRequest(server string, params *AdminAppsRestrictParams, body AdminAppsRestrictJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminAppsRestrictRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminAppsRestrictRequestWithBody generates requests for AdminAppsRestrict with any type of body
func NewAdminAppsRestrictRequestWithBody(server string, params *AdminAppsRestrictParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.apps.restrict")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminAppsRestrictedListRequest generates requests for AdminAppsRestrictedList
func NewAdminAppsRestrictedListRequest(server string, params *AdminAppsRestrictedListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.apps.restricted.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TeamId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EnterpriseId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "enterprise_id", runtime.ParamLocationQuery, *params.EnterpriseId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminConversationsArchiveRequest calls the generic AdminConversationsArchive builder with application/json body
func NewAdminConversationsArchiveRequest(server string, params *AdminConversationsArchiveParams, body AdminConversationsArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminConversationsArchiveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminConversationsArchiveRequestWithBody generates requests for AdminConversationsArchive with any type of body
func NewAdminConversationsArchiveRequestWithBody(server string, params *AdminConversationsArchiveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsConvertToPrivateRequest calls the generic AdminConversationsConvertToPrivate builder with application/json body
func NewAdminConversationsConvertToPrivateRequest(server string, params *AdminConversationsConvertToPrivateParams, body AdminConversationsConvertToPrivateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminConversationsConvertToPrivateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminConversationsConvertToPrivateRequestWithBody generates requests for AdminConversationsConvertToPrivate with any type of body
func NewAdminConversationsConvertToPrivateRequestWithBody(server string, params *AdminConversationsConvertToPrivateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.convertToPrivate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsCreateRequest calls the generic AdminConversationsCreate builder with application/json body
func NewAdminConversationsCreateRequest(server string, params *AdminConversationsCreateParams, body AdminConversationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminConversationsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminConversationsCreateRequestWithBody generates requests for AdminConversationsCreate with any type of body
func NewAdminConversationsCreateRequestWithBody(server string, params *AdminConversationsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsDeleteRequest calls the generic AdminConversationsDelete builder with application/json body
func NewAdminConversationsDeleteRequest(server string, params *AdminConversationsDeleteParams, body AdminConversationsDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminConversationsDeleteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminConversationsDeleteRequestWithBody generates requests for AdminConversationsDelete with any type of body
func NewAdminConversationsDeleteRequestWithBody(server string, params *AdminConversationsDeleteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsDisconnectSharedRequest calls the generic AdminConversationsDisconnectShared builder with application/json body
func NewAdminConversationsDisconnectSharedRequest(server string, params *AdminConversationsDisconnectSharedParams, body AdminConversationsDisconnectSharedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminConversationsDisconnectSharedRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminConversationsDisconnectSharedRequestWithBody generates requests for AdminConversationsDisconnectShared with any type of body
func NewAdminConversationsDisconnectSharedRequestWithBody(server string, params *AdminConversationsDisconnectSharedParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.disconnectShared")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsEkmListOriginalConnectedChannelInfoRequest generates requests for AdminConversationsEkmListOriginalConnectedChannelInfo
func NewAdminConversationsEkmListOriginalConnectedChannelInfoRequest(server string, params *AdminConversationsEkmListOriginalConnectedChannelInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.ekm.listOriginalConnectedChannelInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.ChannelIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_ids", runtime.ParamLocationQuery, *params.ChannelIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TeamIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_ids", runtime.ParamLocationQuery, *params.TeamIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminConversationsGetConversationPrefsRequest generates requests for AdminConversationsGetConversationPrefs
func NewAdminConversationsGetConversationPrefsRequest(server string, params *AdminConversationsGetConversationPrefsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.getConversationPrefs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, params.ChannelId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsGetTeamsRequest generates requests for AdminConversationsGetTeams
func NewAdminConversationsGetTeamsRequest(server string, params *AdminConversationsGetTeamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.getTeams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, params.ChannelId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsInviteRequest calls the generic AdminConversationsInvite builder with application/json body
func NewAdminConversationsInviteRequest(server string, params *AdminConversationsInviteParams, body AdminConversationsInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminConversationsInviteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminConversationsInviteRequestWithBody generates requests for AdminConversationsInvite with any type of body
func NewAdminConversationsInviteRequestWithBody(server string, params *AdminConversationsInviteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsRenameRequest calls the generic AdminConversationsRename builder with application/json body
func NewAdminConversationsRenameRequest(server string, params *AdminConversationsRenameParams, body AdminConversationsRenameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminConversationsRenameRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminConversationsRenameRequestWithBody generates requests for AdminConversationsRename with any type of body
func NewAdminConversationsRenameRequestWithBody(server string, params *AdminConversationsRenameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.rename")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsRestrictAccessAddGroupRequestWithBody generates requests for AdminConversationsRestrictAccessAddGroup with any type of body
func NewAdminConversationsRestrictAccessAddGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.restrictAccess.addGroup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminConversationsRestrictAccessListGroupsRequest generates requests for AdminConversationsRestrictAccessListGroups
func NewAdminConversationsRestrictAccessListGroupsRequest(server string, params *AdminConversationsRestrictAccessListGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.restrictAccess.listGroups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, params.ChannelId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.TeamId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminConversationsRestrictAccessRemoveGroupRequestWithBody generates requests for AdminConversationsRestrictAccessRemoveGroup with any type of body
func NewAdminConversationsRestrictAccessRemoveGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.restrictAccess.removeGroup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminConversationsSearchRequest generates requests for AdminConversationsSearch
func NewAdminConversationsSearchRequest(server string, params *AdminConversationsSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TeamIds != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_ids", runtime.ParamLocationQuery, *params.TeamIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Query != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SearchChannelTypes != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search_channel_types", runtime.ParamLocationQuery, *params.SearchChannelTypes); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDir != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_dir", runtime.ParamLocationQuery, *params.SortDir); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsSetConversationPrefsRequest calls the generic AdminConversationsSetConversationPrefs builder with application/json body
func NewAdminConversationsSetConversationPrefsRequest(server string, params *AdminConversationsSetConversationPrefsParams, body AdminConversationsSetConversationPrefsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminConversationsSetConversationPrefsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminConversationsSetConversationPrefsRequestWithBody generates requests for AdminConversationsSetConversationPrefs with any type of body
func NewAdminConversationsSetConversationPrefsRequestWithBody(server string, params *AdminConversationsSetConversationPrefsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.setConversationPrefs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsSetTeamsRequest calls the generic AdminConversationsSetTeams builder with application/json body
func NewAdminConversationsSetTeamsRequest(server string, params *AdminConversationsSetTeamsParams, body AdminConversationsSetTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminConversationsSetTeamsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminConversationsSetTeamsRequestWithBody generates requests for AdminConversationsSetTeams with any type of body
func NewAdminConversationsSetTeamsRequestWithBody(server string, params *AdminConversationsSetTeamsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.setTeams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminConversationsUnarchiveRequest calls the generic AdminConversationsUnarchive builder with application/json body
func NewAdminConversationsUnarchiveRequest(server string, params *AdminConversationsUnarchiveParams, body AdminConversationsUnarchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminConversationsUnarchiveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminConversationsUnarchiveRequestWithBody generates requests for AdminConversationsUnarchive with any type of body
func NewAdminConversationsUnarchiveRequestWithBody(server string, params *AdminConversationsUnarchiveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.conversations.unarchive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminInviteRequestsApproveRequest calls the generic AdminInviteRequestsApprove builder with application/json body
func NewAdminInviteRequestsApproveRequest(server string, params *AdminInviteRequestsApproveParams, body AdminInviteRequestsApproveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminInviteRequestsApproveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminInviteRequestsApproveRequestWithBody generates requests for AdminInviteRequestsApprove with any type of body
func NewAdminInviteRequestsApproveRequestWithBody(server string, params *AdminInviteRequestsApproveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.inviteRequests.approve")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminInviteRequestsApprovedListRequest generates requests for AdminInviteRequestsApprovedList
func NewAdminInviteRequestsApprovedListRequest(server string, params *AdminInviteRequestsApprovedListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.inviteRequests.approved.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TeamId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminInviteRequestsDeniedListRequest generates requests for AdminInviteRequestsDeniedList
func NewAdminInviteRequestsDeniedListRequest(server string, params *AdminInviteRequestsDeniedListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.inviteRequests.denied.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TeamId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminInviteRequestsDenyRequest calls the generic AdminInviteRequestsDeny builder with application/json body
func NewAdminInviteRequestsDenyRequest(server string, params *AdminInviteRequestsDenyParams, body AdminInviteRequestsDenyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminInviteRequestsDenyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminInviteRequestsDenyRequestWithBody generates requests for AdminInviteRequestsDeny with any type of body
func NewAdminInviteRequestsDenyRequestWithBody(server string, params *AdminInviteRequestsDenyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.inviteRequests.deny")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminInviteRequestsListRequest generates requests for AdminInviteRequestsList
func NewAdminInviteRequestsListRequest(server string, params *AdminInviteRequestsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.inviteRequests.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.TeamId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminTeamsAdminsListRequest generates requests for AdminTeamsAdminsList
func NewAdminTeamsAdminsListRequest(server string, params *AdminTeamsAdminsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.teams.admins.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, params.TeamId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminTeamsCreateRequest calls the generic AdminTeamsCreate builder with application/json body
func NewAdminTeamsCreateRequest(server string, params *AdminTeamsCreateParams, body AdminTeamsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminTeamsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminTeamsCreateRequestWithBody generates requests for AdminTeamsCreate with any type of body
func NewAdminTeamsCreateRequestWithBody(server string, params *AdminTeamsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.teams.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminTeamsListRequest generates requests for AdminTeamsList
func NewAdminTeamsListRequest(server string, params *AdminTeamsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.teams.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminTeamsOwnersListRequest generates requests for AdminTeamsOwnersList
func NewAdminTeamsOwnersListRequest(server string, params *AdminTeamsOwnersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.teams.owners.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, params.TeamId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminTeamsSettingsInfoRequest generates requests for AdminTeamsSettingsInfo
func NewAdminTeamsSettingsInfoRequest(server string, params *AdminTeamsSettingsInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.teams.settings.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, params.TeamId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminTeamsSettingsSetDefaultChannelsRequestWithBody generates requests for AdminTeamsSettingsSetDefaultChannels with any type of body
func NewAdminTeamsSettingsSetDefaultChannelsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.teams.settings.setDefaultChannels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminTeamsSettingsSetDescriptionRequest calls the generic AdminTeamsSettingsSetDescription builder with application/json body
func NewAdminTeamsSettingsSetDescriptionRequest(server string, params *AdminTeamsSettingsSetDescriptionParams, body AdminTeamsSettingsSetDescriptionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminTeamsSettingsSetDescriptionRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminTeamsSettingsSetDescriptionRequestWithBody generates requests for AdminTeamsSettingsSetDescription with any type of body
func NewAdminTeamsSettingsSetDescriptionRequestWithBody(server string, params *AdminTeamsSettingsSetDescriptionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.teams.settings.setDescription")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminTeamsSettingsSetDiscoverabilityRequest calls the generic AdminTeamsSettingsSetDiscoverability builder with application/json body
func NewAdminTeamsSettingsSetDiscoverabilityRequest(server string, params *AdminTeamsSettingsSetDiscoverabilityParams, body AdminTeamsSettingsSetDiscoverabilityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminTeamsSettingsSetDiscoverabilityRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminTeamsSettingsSetDiscoverabilityRequestWithBody generates requests for AdminTeamsSettingsSetDiscoverability with any type of body
func NewAdminTeamsSettingsSetDiscoverabilityRequestWithBody(server string, params *AdminTeamsSettingsSetDiscoverabilityParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.teams.settings.setDiscoverability")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminTeamsSettingsSetIconRequestWithBody generates requests for AdminTeamsSettingsSetIcon with any type of body
func NewAdminTeamsSettingsSetIconRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.teams.settings.setIcon")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminTeamsSettingsSetNameRequest calls the generic AdminTeamsSettingsSetName builder with application/json body
func NewAdminTeamsSettingsSetNameRequest(server string, params *AdminTeamsSettingsSetNameParams, body AdminTeamsSettingsSetNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminTeamsSettingsSetNameRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminTeamsSettingsSetNameRequestWithBody generates requests for AdminTeamsSettingsSetName with any type of body
func NewAdminTeamsSettingsSetNameRequestWithBody(server string, params *AdminTeamsSettingsSetNameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.teams.settings.setName")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsergroupsAddChannelsRequest calls the generic AdminUsergroupsAddChannels builder with application/json body
func NewAdminUsergroupsAddChannelsRequest(server string, params *AdminUsergroupsAddChannelsParams, body AdminUsergroupsAddChannelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsergroupsAddChannelsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsergroupsAddChannelsRequestWithBody generates requests for AdminUsergroupsAddChannels with any type of body
func NewAdminUsergroupsAddChannelsRequestWithBody(server string, params *AdminUsergroupsAddChannelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.usergroups.addChannels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsergroupsAddTeamsRequest calls the generic AdminUsergroupsAddTeams builder with application/json body
func NewAdminUsergroupsAddTeamsRequest(server string, params *AdminUsergroupsAddTeamsParams, body AdminUsergroupsAddTeamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsergroupsAddTeamsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsergroupsAddTeamsRequestWithBody generates requests for AdminUsergroupsAddTeams with any type of body
func NewAdminUsergroupsAddTeamsRequestWithBody(server string, params *AdminUsergroupsAddTeamsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.usergroups.addTeams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsergroupsListChannelsRequest generates requests for AdminUsergroupsListChannels
func NewAdminUsergroupsListChannelsRequest(server string, params *AdminUsergroupsListChannelsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.usergroups.listChannels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "usergroup_id", runtime.ParamLocationQuery, params.UsergroupId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.TeamId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeNumMembers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_num_members", runtime.ParamLocationQuery, *params.IncludeNumMembers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsergroupsRemoveChannelsRequest calls the generic AdminUsergroupsRemoveChannels builder with application/json body
func NewAdminUsergroupsRemoveChannelsRequest(server string, params *AdminUsergroupsRemoveChannelsParams, body AdminUsergroupsRemoveChannelsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsergroupsRemoveChannelsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsergroupsRemoveChannelsRequestWithBody generates requests for AdminUsergroupsRemoveChannels with any type of body
func NewAdminUsergroupsRemoveChannelsRequestWithBody(server string, params *AdminUsergroupsRemoveChannelsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.usergroups.removeChannels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsersAssignRequest calls the generic AdminUsersAssign builder with application/json body
func NewAdminUsersAssignRequest(server string, params *AdminUsersAssignParams, body AdminUsersAssignJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsersAssignRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsersAssignRequestWithBody generates requests for AdminUsersAssign with any type of body
func NewAdminUsersAssignRequestWithBody(server string, params *AdminUsersAssignParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.users.assign")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsersInviteRequest calls the generic AdminUsersInvite builder with application/json body
func NewAdminUsersInviteRequest(server string, params *AdminUsersInviteParams, body AdminUsersInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsersInviteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsersInviteRequestWithBody generates requests for AdminUsersInvite with any type of body
func NewAdminUsersInviteRequestWithBody(server string, params *AdminUsersInviteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.users.invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsersListRequest generates requests for AdminUsersList
func NewAdminUsersListRequest(server string, params *AdminUsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.users.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, params.TeamId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsersRemoveRequest calls the generic AdminUsersRemove builder with application/json body
func NewAdminUsersRemoveRequest(server string, params *AdminUsersRemoveParams, body AdminUsersRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsersRemoveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsersRemoveRequestWithBody generates requests for AdminUsersRemove with any type of body
func NewAdminUsersRemoveRequestWithBody(server string, params *AdminUsersRemoveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.users.remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsersSessionInvalidateRequest calls the generic AdminUsersSessionInvalidate builder with application/json body
func NewAdminUsersSessionInvalidateRequest(server string, params *AdminUsersSessionInvalidateParams, body AdminUsersSessionInvalidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsersSessionInvalidateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsersSessionInvalidateRequestWithBody generates requests for AdminUsersSessionInvalidate with any type of body
func NewAdminUsersSessionInvalidateRequestWithBody(server string, params *AdminUsersSessionInvalidateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.users.session.invalidate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsersSessionResetRequest calls the generic AdminUsersSessionReset builder with application/json body
func NewAdminUsersSessionResetRequest(server string, params *AdminUsersSessionResetParams, body AdminUsersSessionResetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsersSessionResetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsersSessionResetRequestWithBody generates requests for AdminUsersSessionReset with any type of body
func NewAdminUsersSessionResetRequestWithBody(server string, params *AdminUsersSessionResetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.users.session.reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsersSetAdminRequest calls the generic AdminUsersSetAdmin builder with application/json body
func NewAdminUsersSetAdminRequest(server string, params *AdminUsersSetAdminParams, body AdminUsersSetAdminJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsersSetAdminRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsersSetAdminRequestWithBody generates requests for AdminUsersSetAdmin with any type of body
func NewAdminUsersSetAdminRequestWithBody(server string, params *AdminUsersSetAdminParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.users.setAdmin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsersSetExpirationRequest calls the generic AdminUsersSetExpiration builder with application/json body
func NewAdminUsersSetExpirationRequest(server string, params *AdminUsersSetExpirationParams, body AdminUsersSetExpirationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsersSetExpirationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsersSetExpirationRequestWithBody generates requests for AdminUsersSetExpiration with any type of body
func NewAdminUsersSetExpirationRequestWithBody(server string, params *AdminUsersSetExpirationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.users.setExpiration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsersSetOwnerRequest calls the generic AdminUsersSetOwner builder with application/json body
func NewAdminUsersSetOwnerRequest(server string, params *AdminUsersSetOwnerParams, body AdminUsersSetOwnerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsersSetOwnerRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsersSetOwnerRequestWithBody generates requests for AdminUsersSetOwner with any type of body
func NewAdminUsersSetOwnerRequestWithBody(server string, params *AdminUsersSetOwnerParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.users.setOwner")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAdminUsersSetRegularRequest calls the generic AdminUsersSetRegular builder with application/json body
func NewAdminUsersSetRegularRequest(server string, params *AdminUsersSetRegularParams, body AdminUsersSetRegularJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUsersSetRegularRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAdminUsersSetRegularRequestWithBody generates requests for AdminUsersSetRegular with any type of body
func NewAdminUsersSetRegularRequestWithBody(server string, params *AdminUsersSetRegularParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin.users.setRegular")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewApiTestRequest generates requests for ApiTest
func NewApiTestRequest(server string, params *ApiTestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api.test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Error != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error", runtime.ParamLocationQuery, *params.Error); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Foo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "foo", runtime.ParamLocationQuery, *params.Foo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsEventAuthorizationsListRequest generates requests for AppsEventAuthorizationsList
func NewAppsEventAuthorizationsListRequest(server string, params *AppsEventAuthorizationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.event.authorizations.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "event_context", runtime.ParamLocationQuery, params.EventContext); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewAppsPermissionsInfoRequest generates requests for AppsPermissionsInfo
func NewAppsPermissionsInfoRequest(server string, params *AppsPermissionsInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.permissions.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPermissionsRequestRequest generates requests for AppsPermissionsRequest
func NewAppsPermissionsRequestRequest(server string, params *AppsPermissionsRequestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.permissions.request")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopes", runtime.ParamLocationQuery, params.Scopes); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger_id", runtime.ParamLocationQuery, params.TriggerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPermissionsResourcesListRequest generates requests for AppsPermissionsResourcesList
func NewAppsPermissionsResourcesListRequest(server string, params *AppsPermissionsResourcesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.permissions.resources.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPermissionsScopesListRequest generates requests for AppsPermissionsScopesList
func NewAppsPermissionsScopesListRequest(server string, params *AppsPermissionsScopesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.permissions.scopes.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPermissionsUsersListRequest generates requests for AppsPermissionsUsersList
func NewAppsPermissionsUsersListRequest(server string, params *AppsPermissionsUsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.permissions.users.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsPermissionsUsersRequestRequest generates requests for AppsPermissionsUsersRequest
func NewAppsPermissionsUsersRequestRequest(server string, params *AppsPermissionsUsersRequestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.permissions.users.request")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scopes", runtime.ParamLocationQuery, params.Scopes); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger_id", runtime.ParamLocationQuery, params.TriggerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, params.User); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAppsUninstallRequest generates requests for AppsUninstall
func NewAppsUninstallRequest(server string, params *AppsUninstallParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/apps.uninstall")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClientId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClientSecret != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_secret", runtime.ParamLocationQuery, *params.ClientSecret); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthRevokeRequest generates requests for AuthRevoke
func NewAuthRevokeRequest(server string, params *AuthRevokeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth.revoke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Test != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test", runtime.ParamLocationQuery, *params.Test); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAuthTestRequest generates requests for AuthTest
func NewAuthTestRequest(server string, params *AuthTestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth.test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewBotsInfoRequest generates requests for BotsInfo
func NewBotsInfoRequest(server string, params *BotsInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/bots.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Bot != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bot", runtime.ParamLocationQuery, *params.Bot); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCallsAddRequest calls the generic CallsAdd builder with application/json body
func NewCallsAddRequest(server string, params *CallsAddParams, body CallsAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallsAddRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCallsAddRequestWithBody generates requests for CallsAdd with any type of body
func NewCallsAddRequestWithBody(server string, params *CallsAddParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewCallsEndRequest calls the generic CallsEnd builder with application/json body
func NewCallsEndRequest(server string, params *CallsEndParams, body CallsEndJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallsEndRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCallsEndRequestWithBody generates requests for CallsEnd with any type of body
func NewCallsEndRequestWithBody(server string, params *CallsEndParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls.end")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewCallsInfoRequest generates requests for CallsInfo
func NewCallsInfoRequest(server string, params *CallsInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, params.Id); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewCallsParticipantsAddRequest calls the generic CallsParticipantsAdd builder with application/json body
func NewCallsParticipantsAddRequest(server string, params *CallsParticipantsAddParams, body CallsParticipantsAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallsParticipantsAddRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCallsParticipantsAddRequestWithBody generates requests for CallsParticipantsAdd with any type of body
func NewCallsParticipantsAddRequestWithBody(server string, params *CallsParticipantsAddParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls.participants.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewCallsParticipantsRemoveRequest calls the generic CallsParticipantsRemove builder with application/json body
func NewCallsParticipantsRemoveRequest(server string, params *CallsParticipantsRemoveParams, body CallsParticipantsRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallsParticipantsRemoveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCallsParticipantsRemoveRequestWithBody generates requests for CallsParticipantsRemove with any type of body
func NewCallsParticipantsRemoveRequestWithBody(server string, params *CallsParticipantsRemoveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls.participants.remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewCallsUpdateRequest calls the generic CallsUpdate builder with application/json body
func NewCallsUpdateRequest(server string, params *CallsUpdateParams, body CallsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCallsUpdateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCallsUpdateRequestWithBody generates requests for CallsUpdate with any type of body
func NewCallsUpdateRequestWithBody(server string, params *CallsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/calls.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewChatDeleteRequest calls the generic ChatDelete builder with application/json body
func NewChatDeleteRequest(server string, params *ChatDeleteParams, body ChatDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChatDeleteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChatDeleteRequestWithBody generates requests for ChatDelete with any type of body
func NewChatDeleteRequestWithBody(server string, params *ChatDeleteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewChatDeleteScheduledMessageRequest calls the generic ChatDeleteScheduledMessage builder with application/json body
func NewChatDeleteScheduledMessageRequest(server string, params *ChatDeleteScheduledMessageParams, body ChatDeleteScheduledMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChatDeleteScheduledMessageRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChatDeleteScheduledMessageRequestWithBody generates requests for ChatDeleteScheduledMessage with any type of body
func NewChatDeleteScheduledMessageRequestWithBody(server string, params *ChatDeleteScheduledMessageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat.deleteScheduledMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewChatGetPermalinkRequest generates requests for ChatGetPermalink
func NewChatGetPermalinkRequest(server string, params *ChatGetPermalinkParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat.getPermalink")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, params.Channel); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "message_ts", runtime.ParamLocationQuery, params.MessageTs); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChatMeMessageRequest calls the generic ChatMeMessage builder with application/json body
func NewChatMeMessageRequest(server string, params *ChatMeMessageParams, body ChatMeMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChatMeMessageRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChatMeMessageRequestWithBody generates requests for ChatMeMessage with any type of body
func NewChatMeMessageRequestWithBody(server string, params *ChatMeMessageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat.meMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewChatPostEphemeralRequest calls the generic ChatPostEphemeral builder with application/json body
func NewChatPostEphemeralRequest(server string, params *ChatPostEphemeralParams, body ChatPostEphemeralJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChatPostEphemeralRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChatPostEphemeralRequestWithBody generates requests for ChatPostEphemeral with any type of body
func NewChatPostEphemeralRequestWithBody(server string, params *ChatPostEphemeralParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat.postEphemeral")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewChatPostMessageRequest calls the generic ChatPostMessage builder with application/json body
func NewChatPostMessageRequest(server string, params *ChatPostMessageParams, body ChatPostMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChatPostMessageRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChatPostMessageRequestWithBody generates requests for ChatPostMessage with any type of body
func NewChatPostMessageRequestWithBody(server string, params *ChatPostMessageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat.postMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewChatScheduleMessageRequest calls the generic ChatScheduleMessage builder with application/json body
func NewChatScheduleMessageRequest(server string, params *ChatScheduleMessageParams, body ChatScheduleMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChatScheduleMessageRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChatScheduleMessageRequestWithBody generates requests for ChatScheduleMessage with any type of body
func NewChatScheduleMessageRequestWithBody(server string, params *ChatScheduleMessageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat.scheduleMessage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewChatScheduledMessagesListRequest generates requests for ChatScheduledMessagesList
func NewChatScheduledMessagesListRequest(server string, params *ChatScheduledMessagesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat.scheduledMessages.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Latest != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latest", runtime.ParamLocationQuery, *params.Latest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Oldest != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "oldest", runtime.ParamLocationQuery, *params.Oldest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewChatUnfurlRequest calls the generic ChatUnfurl builder with application/json body
func NewChatUnfurlRequest(server string, params *ChatUnfurlParams, body ChatUnfurlJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChatUnfurlRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChatUnfurlRequestWithBody generates requests for ChatUnfurl with any type of body
func NewChatUnfurlRequestWithBody(server string, params *ChatUnfurlParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat.unfurl")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewChatUpdateRequest calls the generic ChatUpdate builder with application/json body
func NewChatUpdateRequest(server string, params *ChatUpdateParams, body ChatUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChatUpdateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewChatUpdateRequestWithBody generates requests for ChatUpdate with any type of body
func NewChatUpdateRequestWithBody(server string, params *ChatUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/chat.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewConversationsArchiveRequest calls the generic ConversationsArchive builder with application/json body
func NewConversationsArchiveRequest(server string, params *ConversationsArchiveParams, body ConversationsArchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsArchiveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsArchiveRequestWithBody generates requests for ConversationsArchive with any type of body
func NewConversationsArchiveRequestWithBody(server string, params *ConversationsArchiveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.archive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsCloseRequest calls the generic ConversationsClose builder with application/json body
func NewConversationsCloseRequest(server string, params *ConversationsCloseParams, body ConversationsCloseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsCloseRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsCloseRequestWithBody generates requests for ConversationsClose with any type of body
func NewConversationsCloseRequestWithBody(server string, params *ConversationsCloseParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.close")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsCreateRequest calls the generic ConversationsCreate builder with application/json body
func NewConversationsCreateRequest(server string, params *ConversationsCreateParams, body ConversationsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsCreateRequestWithBody generates requests for ConversationsCreate with any type of body
func NewConversationsCreateRequestWithBody(server string, params *ConversationsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsHistoryRequest generates requests for ConversationsHistory
func NewConversationsHistoryRequest(server string, params *ConversationsHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.history")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Latest != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latest", runtime.ParamLocationQuery, *params.Latest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Oldest != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "oldest", runtime.ParamLocationQuery, *params.Oldest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Inclusive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inclusive", runtime.ParamLocationQuery, *params.Inclusive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConversationsInfoRequest generates requests for ConversationsInfo
func NewConversationsInfoRequest(server string, params *ConversationsInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeLocale != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_locale", runtime.ParamLocationQuery, *params.IncludeLocale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeNumMembers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_num_members", runtime.ParamLocationQuery, *params.IncludeNumMembers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConversationsInviteRequest calls the generic ConversationsInvite builder with application/json body
func NewConversationsInviteRequest(server string, params *ConversationsInviteParams, body ConversationsInviteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsInviteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsInviteRequestWithBody generates requests for ConversationsInvite with any type of body
func NewConversationsInviteRequestWithBody(server string, params *ConversationsInviteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsJoinRequest calls the generic ConversationsJoin builder with application/json body
func NewConversationsJoinRequest(server string, params *ConversationsJoinParams, body ConversationsJoinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsJoinRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsJoinRequestWithBody generates requests for ConversationsJoin with any type of body
func NewConversationsJoinRequestWithBody(server string, params *ConversationsJoinParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.join")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsKickRequest calls the generic ConversationsKick builder with application/json body
func NewConversationsKickRequest(server string, params *ConversationsKickParams, body ConversationsKickJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsKickRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsKickRequestWithBody generates requests for ConversationsKick with any type of body
func NewConversationsKickRequestWithBody(server string, params *ConversationsKickParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.kick")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsLeaveRequest calls the generic ConversationsLeave builder with application/json body
func NewConversationsLeaveRequest(server string, params *ConversationsLeaveParams, body ConversationsLeaveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsLeaveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsLeaveRequestWithBody generates requests for ConversationsLeave with any type of body
func NewConversationsLeaveRequestWithBody(server string, params *ConversationsLeaveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.leave")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsListRequest generates requests for ConversationsList
func NewConversationsListRequest(server string, params *ConversationsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeArchived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_archived", runtime.ParamLocationQuery, *params.ExcludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Types != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConversationsMarkRequest calls the generic ConversationsMark builder with application/json body
func NewConversationsMarkRequest(server string, params *ConversationsMarkParams, body ConversationsMarkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsMarkRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsMarkRequestWithBody generates requests for ConversationsMark with any type of body
func NewConversationsMarkRequestWithBody(server string, params *ConversationsMarkParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.mark")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsMembersRequest generates requests for ConversationsMembers
func NewConversationsMembersRequest(server string, params *ConversationsMembersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.members")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConversationsOpenRequest calls the generic ConversationsOpen builder with application/json body
func NewConversationsOpenRequest(server string, params *ConversationsOpenParams, body ConversationsOpenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsOpenRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsOpenRequestWithBody generates requests for ConversationsOpen with any type of body
func NewConversationsOpenRequestWithBody(server string, params *ConversationsOpenParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.open")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsRenameRequest calls the generic ConversationsRename builder with application/json body
func NewConversationsRenameRequest(server string, params *ConversationsRenameParams, body ConversationsRenameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsRenameRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsRenameRequestWithBody generates requests for ConversationsRename with any type of body
func NewConversationsRenameRequestWithBody(server string, params *ConversationsRenameParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.rename")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsRepliesRequest generates requests for ConversationsReplies
func NewConversationsRepliesRequest(server string, params *ConversationsRepliesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.replies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Ts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ts", runtime.ParamLocationQuery, *params.Ts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Latest != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "latest", runtime.ParamLocationQuery, *params.Latest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Oldest != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "oldest", runtime.ParamLocationQuery, *params.Oldest); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Inclusive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inclusive", runtime.ParamLocationQuery, *params.Inclusive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewConversationsSetPurposeRequest calls the generic ConversationsSetPurpose builder with application/json body
func NewConversationsSetPurposeRequest(server string, params *ConversationsSetPurposeParams, body ConversationsSetPurposeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsSetPurposeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsSetPurposeRequestWithBody generates requests for ConversationsSetPurpose with any type of body
func NewConversationsSetPurposeRequestWithBody(server string, params *ConversationsSetPurposeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.setPurpose")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsSetTopicRequest calls the generic ConversationsSetTopic builder with application/json body
func NewConversationsSetTopicRequest(server string, params *ConversationsSetTopicParams, body ConversationsSetTopicJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsSetTopicRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsSetTopicRequestWithBody generates requests for ConversationsSetTopic with any type of body
func NewConversationsSetTopicRequestWithBody(server string, params *ConversationsSetTopicParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.setTopic")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewConversationsUnarchiveRequest calls the generic ConversationsUnarchive builder with application/json body
func NewConversationsUnarchiveRequest(server string, params *ConversationsUnarchiveParams, body ConversationsUnarchiveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConversationsUnarchiveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewConversationsUnarchiveRequestWithBody generates requests for ConversationsUnarchive with any type of body
func NewConversationsUnarchiveRequestWithBody(server string, params *ConversationsUnarchiveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/conversations.unarchive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewDialogOpenRequest generates requests for DialogOpen
func NewDialogOpenRequest(server string, params *DialogOpenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dialog.open")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dialog", runtime.ParamLocationQuery, params.Dialog); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger_id", runtime.ParamLocationQuery, params.TriggerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewDndEndDndRequest generates requests for DndEndDnd
func NewDndEndDndRequest(server string, params *DndEndDndParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dnd.endDnd")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewDndEndSnoozeRequest generates requests for DndEndSnooze
func NewDndEndSnoozeRequest(server string, params *DndEndSnoozeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dnd.endSnooze")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewDndInfoRequest generates requests for DndInfo
func NewDndInfoRequest(server string, params *DndInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dnd.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDndSetSnoozeRequestWithBody generates requests for DndSetSnooze with any type of body
func NewDndSetSnoozeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dnd.setSnooze")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDndTeamInfoRequest generates requests for DndTeamInfo
func NewDndTeamInfoRequest(server string, params *DndTeamInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/dnd.teamInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Users != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "users", runtime.ParamLocationQuery, *params.Users); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFilesCommentsDeleteRequest calls the generic FilesCommentsDelete builder with application/json body
func NewFilesCommentsDeleteRequest(server string, params *FilesCommentsDeleteParams, body FilesCommentsDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFilesCommentsDeleteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewFilesCommentsDeleteRequestWithBody generates requests for FilesCommentsDelete with any type of body
func NewFilesCommentsDeleteRequestWithBody(server string, params *FilesCommentsDeleteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.comments.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewFilesDeleteRequest calls the generic FilesDelete builder with application/json body
func NewFilesDeleteRequest(server string, params *FilesDeleteParams, body FilesDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFilesDeleteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewFilesDeleteRequestWithBody generates requests for FilesDelete with any type of body
func NewFilesDeleteRequestWithBody(server string, params *FilesDeleteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewFilesInfoRequest generates requests for FilesInfo
func NewFilesInfoRequest(server string, params *FilesInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.File != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, *params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFilesListRequest generates requests for FilesList
func NewFilesListRequest(server string, params *FilesListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TsFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ts_from", runtime.ParamLocationQuery, *params.TsFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TsTo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ts_to", runtime.ParamLocationQuery, *params.TsTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Types != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShowFilesHiddenByLimit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "show_files_hidden_by_limit", runtime.ParamLocationQuery, *params.ShowFilesHiddenByLimit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFilesRemoteAddRequestWithBody generates requests for FilesRemoteAdd with any type of body
func NewFilesRemoteAddRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.remote.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFilesRemoteInfoRequest generates requests for FilesRemoteInfo
func NewFilesRemoteInfoRequest(server string, params *FilesRemoteInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.remote.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.File != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, *params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExternalId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id", runtime.ParamLocationQuery, *params.ExternalId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFilesRemoteListRequest generates requests for FilesRemoteList
func NewFilesRemoteListRequest(server string, params *FilesRemoteListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.remote.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TsFrom != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ts_from", runtime.ParamLocationQuery, *params.TsFrom); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TsTo != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ts_to", runtime.ParamLocationQuery, *params.TsTo); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFilesRemoteRemoveRequestWithBody generates requests for FilesRemoteRemove with any type of body
func NewFilesRemoteRemoveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.remote.remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFilesRemoteShareRequest generates requests for FilesRemoteShare
func NewFilesRemoteShareRequest(server string, params *FilesRemoteShareParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.remote.share")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.File != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, *params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExternalId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id", runtime.ParamLocationQuery, *params.ExternalId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Channels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channels", runtime.ParamLocationQuery, *params.Channels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFilesRemoteUpdateRequestWithBody generates requests for FilesRemoteUpdate with any type of body
func NewFilesRemoteUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.remote.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFilesRevokePublicURLRequest calls the generic FilesRevokePublicURL builder with application/json body
func NewFilesRevokePublicURLRequest(server string, params *FilesRevokePublicURLParams, body FilesRevokePublicURLJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFilesRevokePublicURLRequestWithBody(server, params, "application/json", bodyReader)
}

// NewFilesRevokePublicURLRequestWithBody generates requests for FilesRevokePublicURL with any type of body
func NewFilesRevokePublicURLRequestWithBody(server string, params *FilesRevokePublicURLParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.revokePublicURL")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewFilesSharedPublicURLRequest calls the generic FilesSharedPublicURL builder with application/json body
func NewFilesSharedPublicURLRequest(server string, params *FilesSharedPublicURLParams, body FilesSharedPublicURLJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFilesSharedPublicURLRequestWithBody(server, params, "application/json", bodyReader)
}

// NewFilesSharedPublicURLRequestWithBody generates requests for FilesSharedPublicURL with any type of body
func NewFilesSharedPublicURLRequestWithBody(server string, params *FilesSharedPublicURLParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.sharedPublicURL")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewFilesUploadRequestWithBody generates requests for FilesUpload with any type of body
func NewFilesUploadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/files.upload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewMigrationExchangeRequest generates requests for MigrationExchange
func NewMigrationExchangeRequest(server string, params *MigrationExchangeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/migration.exchange")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "users", runtime.ParamLocationQuery, params.Users); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.TeamId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team_id", runtime.ParamLocationQuery, *params.TeamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ToOld != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to_old", runtime.ParamLocationQuery, *params.ToOld); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOauthAccessRequest generates requests for OauthAccess
func NewOauthAccessRequest(server string, params *OauthAccessParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth.access")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClientId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClientSecret != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_secret", runtime.ParamLocationQuery, *params.ClientSecret); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Code != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RedirectUri != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SingleChannel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "single_channel", runtime.ParamLocationQuery, *params.SingleChannel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOauthTokenRequest generates requests for OauthToken
func NewOauthTokenRequest(server string, params *OauthTokenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth.token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClientId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClientSecret != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_secret", runtime.ParamLocationQuery, *params.ClientSecret); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Code != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, *params.Code); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.RedirectUri != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SingleChannel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "single_channel", runtime.ParamLocationQuery, *params.SingleChannel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewOauthV2AccessRequest generates requests for OauthV2Access
func NewOauthV2AccessRequest(server string, params *OauthV2AccessParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth.v2.access")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ClientId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, *params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClientSecret != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_secret", runtime.ParamLocationQuery, *params.ClientSecret); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code", runtime.ParamLocationQuery, params.Code); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.RedirectUri != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, *params.RedirectUri); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPinsAddRequest calls the generic PinsAdd builder with application/json body
func NewPinsAddRequest(server string, params *PinsAddParams, body PinsAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPinsAddRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPinsAddRequestWithBody generates requests for PinsAdd with any type of body
func NewPinsAddRequestWithBody(server string, params *PinsAddParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pins.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewPinsListRequest generates requests for PinsList
func NewPinsListRequest(server string, params *PinsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pins.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, params.Channel); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPinsRemoveRequest calls the generic PinsRemove builder with application/json body
func NewPinsRemoveRequest(server string, params *PinsRemoveParams, body PinsRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPinsRemoveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPinsRemoveRequestWithBody generates requests for PinsRemove with any type of body
func NewPinsRemoveRequestWithBody(server string, params *PinsRemoveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pins.remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewReactionsAddRequest calls the generic ReactionsAdd builder with application/json body
func NewReactionsAddRequest(server string, params *ReactionsAddParams, body ReactionsAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReactionsAddRequestWithBody(server, params, "application/json", bodyReader)
}

// NewReactionsAddRequestWithBody generates requests for ReactionsAdd with any type of body
func NewReactionsAddRequestWithBody(server string, params *ReactionsAddParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reactions.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewReactionsGetRequest generates requests for ReactionsGet
func NewReactionsGetRequest(server string, params *ReactionsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reactions.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Channel != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel", runtime.ParamLocationQuery, *params.Channel); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.File != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, *params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FileComment != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file_comment", runtime.ParamLocationQuery, *params.FileComment); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Full != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full", runtime.ParamLocationQuery, *params.Full); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Timestamp != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timestamp", runtime.ParamLocationQuery, *params.Timestamp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReactionsListRequest generates requests for ReactionsList
func NewReactionsListRequest(server string, params *ReactionsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reactions.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Full != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full", runtime.ParamLocationQuery, *params.Full); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReactionsRemoveRequest calls the generic ReactionsRemove builder with application/json body
func NewReactionsRemoveRequest(server string, params *ReactionsRemoveParams, body ReactionsRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReactionsRemoveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewReactionsRemoveRequestWithBody generates requests for ReactionsRemove with any type of body
func NewReactionsRemoveRequestWithBody(server string, params *ReactionsRemoveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reactions.remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewRemindersAddRequest calls the generic RemindersAdd builder with application/json body
func NewRemindersAddRequest(server string, params *RemindersAddParams, body RemindersAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemindersAddRequestWithBody(server, params, "application/json", bodyReader)
}

// NewRemindersAddRequestWithBody generates requests for RemindersAdd with any type of body
func NewRemindersAddRequestWithBody(server string, params *RemindersAddParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reminders.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewRemindersCompleteRequest calls the generic RemindersComplete builder with application/json body
func NewRemindersCompleteRequest(server string, params *RemindersCompleteParams, body RemindersCompleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemindersCompleteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewRemindersCompleteRequestWithBody generates requests for RemindersComplete with any type of body
func NewRemindersCompleteRequestWithBody(server string, params *RemindersCompleteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reminders.complete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewRemindersDeleteRequest calls the generic RemindersDelete builder with application/json body
func NewRemindersDeleteRequest(server string, params *RemindersDeleteParams, body RemindersDeleteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemindersDeleteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewRemindersDeleteRequestWithBody generates requests for RemindersDelete with any type of body
func NewRemindersDeleteRequestWithBody(server string, params *RemindersDeleteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reminders.delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Token != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, *params.Token)
		if err != nil {
			return nil, err
		}

		req.Header.Set("token", headerParam0)
	}

	return req, nil
}

// NewRemindersInfoRequest generates requests for RemindersInfo
func NewRemindersInfoRequest(server string, params *RemindersInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reminders.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Reminder != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reminder", runtime.ParamLocationQuery, *params.Reminder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemindersListRequest generates requests for RemindersList
func NewRemindersListRequest(server string, params *RemindersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reminders.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRtmConnectRequest generates requests for RtmConnect
func NewRtmConnectRequest(server string, params *RtmConnectParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/rtm.connect")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.BatchPresenceAware != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "batch_presence_aware", runtime.ParamLocationQuery, *params.BatchPresenceAware); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PresenceSub != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "presence_sub", runtime.ParamLocationQuery, *params.PresenceSub); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchMessagesRequest generates requests for SearchMessages
func NewSearchMessagesRequest(server string, params *SearchMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/search.messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Highlight != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "highlight", runtime.ParamLocationQuery, *params.Highlight); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Sort != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortDir != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort_dir", runtime.ParamLocationQuery, *params.SortDir); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStarsAddRequest calls the generic StarsAdd builder with application/json body
func NewStarsAddRequest(server string, params *StarsAddParams, body StarsAddJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStarsAddRequestWithBody(server, params, "application/json", bodyReader)
}

// NewStarsAddRequestWithBody generates requests for StarsAdd with any type of body
func NewStarsAddRequestWithBody(server string, params *StarsAddParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stars.add")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewStarsListRequest generates requests for StarsList
func NewStarsListRequest(server string, params *StarsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stars.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewStarsRemoveRequest calls the generic StarsRemove builder with application/json body
func NewStarsRemoveRequest(server string, params *StarsRemoveParams, body StarsRemoveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewStarsRemoveRequestWithBody(server, params, "application/json", bodyReader)
}

// NewStarsRemoveRequestWithBody generates requests for StarsRemove with any type of body
func NewStarsRemoveRequestWithBody(server string, params *StarsRemoveParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stars.remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewTeamAccessLogsRequest generates requests for TeamAccessLogs
func NewTeamAccessLogsRequest(server string, params *TeamAccessLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team.accessLogs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamBillableInfoRequest generates requests for TeamBillableInfo
func NewTeamBillableInfoRequest(server string, params *TeamBillableInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team.billableInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamInfoRequest generates requests for TeamInfo
func NewTeamInfoRequest(server string, params *TeamInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Team != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "team", runtime.ParamLocationQuery, *params.Team); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamIntegrationLogsRequest generates requests for TeamIntegrationLogs
func NewTeamIntegrationLogsRequest(server string, params *TeamIntegrationLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team.integrationLogs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.AppId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "app_id", runtime.ParamLocationQuery, *params.AppId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ChangeType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "change_type", runtime.ParamLocationQuery, *params.ChangeType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Count != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ServiceId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "service_id", runtime.ParamLocationQuery, *params.ServiceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTeamProfileGetRequest generates requests for TeamProfileGet
func NewTeamProfileGetRequest(server string, params *TeamProfileGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/team.profile.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Visibility != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "visibility", runtime.ParamLocationQuery, *params.Visibility); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsergroupsCreateRequest calls the generic UsergroupsCreate builder with application/json body
func NewUsergroupsCreateRequest(server string, params *UsergroupsCreateParams, body UsergroupsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsergroupsCreateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUsergroupsCreateRequestWithBody generates requests for UsergroupsCreate with any type of body
func NewUsergroupsCreateRequestWithBody(server string, params *UsergroupsCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usergroups.create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewUsergroupsDisableRequest calls the generic UsergroupsDisable builder with application/json body
func NewUsergroupsDisableRequest(server string, params *UsergroupsDisableParams, body UsergroupsDisableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsergroupsDisableRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUsergroupsDisableRequestWithBody generates requests for UsergroupsDisable with any type of body
func NewUsergroupsDisableRequestWithBody(server string, params *UsergroupsDisableParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usergroups.disable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewUsergroupsEnableRequest calls the generic UsergroupsEnable builder with application/json body
func NewUsergroupsEnableRequest(server string, params *UsergroupsEnableParams, body UsergroupsEnableJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsergroupsEnableRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUsergroupsEnableRequestWithBody generates requests for UsergroupsEnable with any type of body
func NewUsergroupsEnableRequestWithBody(server string, params *UsergroupsEnableParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usergroups.enable")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewUsergroupsListRequest generates requests for UsergroupsList
func NewUsergroupsListRequest(server string, params *UsergroupsListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usergroups.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeUsers != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_users", runtime.ParamLocationQuery, *params.IncludeUsers); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.IncludeCount != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_count", runtime.ParamLocationQuery, *params.IncludeCount); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeDisabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_disabled", runtime.ParamLocationQuery, *params.IncludeDisabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsergroupsUpdateRequest calls the generic UsergroupsUpdate builder with application/json body
func NewUsergroupsUpdateRequest(server string, params *UsergroupsUpdateParams, body UsergroupsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsergroupsUpdateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUsergroupsUpdateRequestWithBody generates requests for UsergroupsUpdate with any type of body
func NewUsergroupsUpdateRequestWithBody(server string, params *UsergroupsUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usergroups.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewUsergroupsUsersListRequest generates requests for UsergroupsUsersList
func NewUsergroupsUsersListRequest(server string, params *UsergroupsUsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usergroups.users.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.IncludeDisabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_disabled", runtime.ParamLocationQuery, *params.IncludeDisabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "usergroup", runtime.ParamLocationQuery, params.Usergroup); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsergroupsUsersUpdateRequest calls the generic UsergroupsUsersUpdate builder with application/json body
func NewUsergroupsUsersUpdateRequest(server string, params *UsergroupsUsersUpdateParams, body UsergroupsUsersUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsergroupsUsersUpdateRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUsergroupsUsersUpdateRequestWithBody generates requests for UsergroupsUsersUpdate with any type of body
func NewUsergroupsUsersUpdateRequestWithBody(server string, params *UsergroupsUsersUpdateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/usergroups.users.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewUsersConversationsRequest generates requests for UsersConversations
func NewUsersConversationsRequest(server string, params *UsersConversationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.conversations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Types != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "types", runtime.ParamLocationQuery, *params.Types); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeArchived != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exclude_archived", runtime.ParamLocationQuery, *params.ExcludeArchived); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersDeletePhotoRequestWithBody generates requests for UsersDeletePhoto with any type of body
func NewUsersDeletePhotoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.deletePhoto")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersGetPresenceRequest generates requests for UsersGetPresence
func NewUsersGetPresenceRequest(server string, params *UsersGetPresenceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.getPresence")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersIdentityRequest generates requests for UsersIdentity
func NewUsersIdentityRequest(server string, params *UsersIdentityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.identity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersInfoRequest generates requests for UsersInfo
func NewUsersInfoRequest(server string, params *UsersInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.IncludeLocale != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_locale", runtime.ParamLocationQuery, *params.IncludeLocale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersListRequest generates requests for UsersList
func NewUsersListRequest(server string, params *UsersListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Token != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, *params.Token); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeLocale != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_locale", runtime.ParamLocationQuery, *params.IncludeLocale); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersLookupByEmailRequest generates requests for UsersLookupByEmail
func NewUsersLookupByEmailRequest(server string, params *UsersLookupByEmailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.lookupByEmail")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersProfileGetRequest generates requests for UsersProfileGet
func NewUsersProfileGetRequest(server string, params *UsersProfileGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.profile.get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "token", runtime.ParamLocationQuery, params.Token); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.IncludeLabels != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "include_labels", runtime.ParamLocationQuery, *params.IncludeLabels); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.User != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUsersProfileSetRequest calls the generic UsersProfileSet builder with application/json body
func NewUsersProfileSetRequest(server string, params *UsersProfileSetParams, body UsersProfileSetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersProfileSetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUsersProfileSetRequestWithBody generates requests for UsersProfileSet with any type of body
func NewUsersProfileSetRequestWithBody(server string, params *UsersProfileSetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.profile.set")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewUsersSetActiveRequest generates requests for UsersSetActive
func NewUsersSetActiveRequest(server string, params *UsersSetActiveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.setActive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewUsersSetPhotoRequestWithBody generates requests for UsersSetPhoto with any type of body
func NewUsersSetPhotoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.setPhoto")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUsersSetPresenceRequest calls the generic UsersSetPresence builder with application/json body
func NewUsersSetPresenceRequest(server string, params *UsersSetPresenceParams, body UsersSetPresenceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUsersSetPresenceRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUsersSetPresenceRequestWithBody generates requests for UsersSetPresence with any type of body
func NewUsersSetPresenceRequestWithBody(server string, params *UsersSetPresenceParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users.setPresence")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewViewsOpenRequest generates requests for ViewsOpen
func NewViewsOpenRequest(server string, params *ViewsOpenParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/views.open")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger_id", runtime.ParamLocationQuery, params.TriggerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view", runtime.ParamLocationQuery, params.View); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewViewsPublishRequest generates requests for ViewsPublish
func NewViewsPublishRequest(server string, params *ViewsPublishParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/views.publish")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, params.UserId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view", runtime.ParamLocationQuery, params.View); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Hash != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash", runtime.ParamLocationQuery, *params.Hash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewViewsPushRequest generates requests for ViewsPush
func NewViewsPushRequest(server string, params *ViewsPushParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/views.push")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trigger_id", runtime.ParamLocationQuery, params.TriggerId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view", runtime.ParamLocationQuery, params.View); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewViewsUpdateRequest generates requests for ViewsUpdate
func NewViewsUpdateRequest(server string, params *ViewsUpdateParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/views.update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ViewId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view_id", runtime.ParamLocationQuery, *params.ViewId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExternalId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "external_id", runtime.ParamLocationQuery, *params.ExternalId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.View != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "view", runtime.ParamLocationQuery, *params.View); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hash != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hash", runtime.ParamLocationQuery, *params.Hash); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewWorkflowsStepCompletedRequest generates requests for WorkflowsStepCompleted
func NewWorkflowsStepCompletedRequest(server string, params *WorkflowsStepCompletedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows.stepCompleted")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workflow_step_execute_id", runtime.ParamLocationQuery, params.WorkflowStepExecuteId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Outputs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outputs", runtime.ParamLocationQuery, *params.Outputs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewWorkflowsStepFailedRequest generates requests for WorkflowsStepFailed
func NewWorkflowsStepFailedRequest(server string, params *WorkflowsStepFailedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows.stepFailed")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workflow_step_execute_id", runtime.ParamLocationQuery, params.WorkflowStepExecuteId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "error", runtime.ParamLocationQuery, params.Error); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

// NewWorkflowsUpdateStepRequest generates requests for WorkflowsUpdateStep
func NewWorkflowsUpdateStepRequest(server string, params *WorkflowsUpdateStepParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workflows.updateStep")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workflow_step_edit_id", runtime.ParamLocationQuery, params.WorkflowStepEditId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Inputs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "inputs", runtime.ParamLocationQuery, *params.Inputs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Outputs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "outputs", runtime.ParamLocationQuery, *params.Outputs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StepName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "step_name", runtime.ParamLocationQuery, *params.StepName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StepImageUrl != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "step_image_url", runtime.ParamLocationQuery, *params.StepImageUrl); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	var headerParam0 string

	headerParam0, err = runtime.StyleParamWithLocation("simple", false, "token", runtime.ParamLocationHeader, params.Token)
	if err != nil {
		return nil, err
	}

	req.Header.Set("token", headerParam0)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AdminAppsApprove request with any body
	AdminAppsApproveWithBodyWithResponse(ctx context.Context, params *AdminAppsApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminAppsApproveResponse, error)

	AdminAppsApproveWithResponse(ctx context.Context, params *AdminAppsApproveParams, body AdminAppsApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminAppsApproveResponse, error)

	// AdminAppsApprovedList request
	AdminAppsApprovedListWithResponse(ctx context.Context, params *AdminAppsApprovedListParams, reqEditors ...RequestEditorFn) (*AdminAppsApprovedListResponse, error)

	// AdminAppsRequestsList request
	AdminAppsRequestsListWithResponse(ctx context.Context, params *AdminAppsRequestsListParams, reqEditors ...RequestEditorFn) (*AdminAppsRequestsListResponse, error)

	// AdminAppsRestrict request with any body
	AdminAppsRestrictWithBodyWithResponse(ctx context.Context, params *AdminAppsRestrictParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminAppsRestrictResponse, error)

	AdminAppsRestrictWithResponse(ctx context.Context, params *AdminAppsRestrictParams, body AdminAppsRestrictJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminAppsRestrictResponse, error)

	// AdminAppsRestrictedList request
	AdminAppsRestrictedListWithResponse(ctx context.Context, params *AdminAppsRestrictedListParams, reqEditors ...RequestEditorFn) (*AdminAppsRestrictedListResponse, error)

	// AdminConversationsArchive request with any body
	AdminConversationsArchiveWithBodyWithResponse(ctx context.Context, params *AdminConversationsArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsArchiveResponse, error)

	AdminConversationsArchiveWithResponse(ctx context.Context, params *AdminConversationsArchiveParams, body AdminConversationsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsArchiveResponse, error)

	// AdminConversationsConvertToPrivate request with any body
	AdminConversationsConvertToPrivateWithBodyWithResponse(ctx context.Context, params *AdminConversationsConvertToPrivateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsConvertToPrivateResponse, error)

	AdminConversationsConvertToPrivateWithResponse(ctx context.Context, params *AdminConversationsConvertToPrivateParams, body AdminConversationsConvertToPrivateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsConvertToPrivateResponse, error)

	// AdminConversationsCreate request with any body
	AdminConversationsCreateWithBodyWithResponse(ctx context.Context, params *AdminConversationsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsCreateResponse, error)

	AdminConversationsCreateWithResponse(ctx context.Context, params *AdminConversationsCreateParams, body AdminConversationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsCreateResponse, error)

	// AdminConversationsDelete request with any body
	AdminConversationsDeleteWithBodyWithResponse(ctx context.Context, params *AdminConversationsDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsDeleteResponse, error)

	AdminConversationsDeleteWithResponse(ctx context.Context, params *AdminConversationsDeleteParams, body AdminConversationsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsDeleteResponse, error)

	// AdminConversationsDisconnectShared request with any body
	AdminConversationsDisconnectSharedWithBodyWithResponse(ctx context.Context, params *AdminConversationsDisconnectSharedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsDisconnectSharedResponse, error)

	AdminConversationsDisconnectSharedWithResponse(ctx context.Context, params *AdminConversationsDisconnectSharedParams, body AdminConversationsDisconnectSharedJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsDisconnectSharedResponse, error)

	// AdminConversationsEkmListOriginalConnectedChannelInfo request
	AdminConversationsEkmListOriginalConnectedChannelInfoWithResponse(ctx context.Context, params *AdminConversationsEkmListOriginalConnectedChannelInfoParams, reqEditors ...RequestEditorFn) (*AdminConversationsEkmListOriginalConnectedChannelInfoResponse, error)

	// AdminConversationsGetConversationPrefs request
	AdminConversationsGetConversationPrefsWithResponse(ctx context.Context, params *AdminConversationsGetConversationPrefsParams, reqEditors ...RequestEditorFn) (*AdminConversationsGetConversationPrefsResponse, error)

	// AdminConversationsGetTeams request
	AdminConversationsGetTeamsWithResponse(ctx context.Context, params *AdminConversationsGetTeamsParams, reqEditors ...RequestEditorFn) (*AdminConversationsGetTeamsResponse, error)

	// AdminConversationsInvite request with any body
	AdminConversationsInviteWithBodyWithResponse(ctx context.Context, params *AdminConversationsInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsInviteResponse, error)

	AdminConversationsInviteWithResponse(ctx context.Context, params *AdminConversationsInviteParams, body AdminConversationsInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsInviteResponse, error)

	// AdminConversationsRename request with any body
	AdminConversationsRenameWithBodyWithResponse(ctx context.Context, params *AdminConversationsRenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsRenameResponse, error)

	AdminConversationsRenameWithResponse(ctx context.Context, params *AdminConversationsRenameParams, body AdminConversationsRenameJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsRenameResponse, error)

	// AdminConversationsRestrictAccessAddGroup request with any body
	AdminConversationsRestrictAccessAddGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsRestrictAccessAddGroupResponse, error)

	// AdminConversationsRestrictAccessListGroups request
	AdminConversationsRestrictAccessListGroupsWithResponse(ctx context.Context, params *AdminConversationsRestrictAccessListGroupsParams, reqEditors ...RequestEditorFn) (*AdminConversationsRestrictAccessListGroupsResponse, error)

	// AdminConversationsRestrictAccessRemoveGroup request with any body
	AdminConversationsRestrictAccessRemoveGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsRestrictAccessRemoveGroupResponse, error)

	// AdminConversationsSearch request
	AdminConversationsSearchWithResponse(ctx context.Context, params *AdminConversationsSearchParams, reqEditors ...RequestEditorFn) (*AdminConversationsSearchResponse, error)

	// AdminConversationsSetConversationPrefs request with any body
	AdminConversationsSetConversationPrefsWithBodyWithResponse(ctx context.Context, params *AdminConversationsSetConversationPrefsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsSetConversationPrefsResponse, error)

	AdminConversationsSetConversationPrefsWithResponse(ctx context.Context, params *AdminConversationsSetConversationPrefsParams, body AdminConversationsSetConversationPrefsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsSetConversationPrefsResponse, error)

	// AdminConversationsSetTeams request with any body
	AdminConversationsSetTeamsWithBodyWithResponse(ctx context.Context, params *AdminConversationsSetTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsSetTeamsResponse, error)

	AdminConversationsSetTeamsWithResponse(ctx context.Context, params *AdminConversationsSetTeamsParams, body AdminConversationsSetTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsSetTeamsResponse, error)

	// AdminConversationsUnarchive request with any body
	AdminConversationsUnarchiveWithBodyWithResponse(ctx context.Context, params *AdminConversationsUnarchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsUnarchiveResponse, error)

	AdminConversationsUnarchiveWithResponse(ctx context.Context, params *AdminConversationsUnarchiveParams, body AdminConversationsUnarchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsUnarchiveResponse, error)

	// AdminInviteRequestsApprove request with any body
	AdminInviteRequestsApproveWithBodyWithResponse(ctx context.Context, params *AdminInviteRequestsApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminInviteRequestsApproveResponse, error)

	AdminInviteRequestsApproveWithResponse(ctx context.Context, params *AdminInviteRequestsApproveParams, body AdminInviteRequestsApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminInviteRequestsApproveResponse, error)

	// AdminInviteRequestsApprovedList request
	AdminInviteRequestsApprovedListWithResponse(ctx context.Context, params *AdminInviteRequestsApprovedListParams, reqEditors ...RequestEditorFn) (*AdminInviteRequestsApprovedListResponse, error)

	// AdminInviteRequestsDeniedList request
	AdminInviteRequestsDeniedListWithResponse(ctx context.Context, params *AdminInviteRequestsDeniedListParams, reqEditors ...RequestEditorFn) (*AdminInviteRequestsDeniedListResponse, error)

	// AdminInviteRequestsDeny request with any body
	AdminInviteRequestsDenyWithBodyWithResponse(ctx context.Context, params *AdminInviteRequestsDenyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminInviteRequestsDenyResponse, error)

	AdminInviteRequestsDenyWithResponse(ctx context.Context, params *AdminInviteRequestsDenyParams, body AdminInviteRequestsDenyJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminInviteRequestsDenyResponse, error)

	// AdminInviteRequestsList request
	AdminInviteRequestsListWithResponse(ctx context.Context, params *AdminInviteRequestsListParams, reqEditors ...RequestEditorFn) (*AdminInviteRequestsListResponse, error)

	// AdminTeamsAdminsList request
	AdminTeamsAdminsListWithResponse(ctx context.Context, params *AdminTeamsAdminsListParams, reqEditors ...RequestEditorFn) (*AdminTeamsAdminsListResponse, error)

	// AdminTeamsCreate request with any body
	AdminTeamsCreateWithBodyWithResponse(ctx context.Context, params *AdminTeamsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsCreateResponse, error)

	AdminTeamsCreateWithResponse(ctx context.Context, params *AdminTeamsCreateParams, body AdminTeamsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminTeamsCreateResponse, error)

	// AdminTeamsList request
	AdminTeamsListWithResponse(ctx context.Context, params *AdminTeamsListParams, reqEditors ...RequestEditorFn) (*AdminTeamsListResponse, error)

	// AdminTeamsOwnersList request
	AdminTeamsOwnersListWithResponse(ctx context.Context, params *AdminTeamsOwnersListParams, reqEditors ...RequestEditorFn) (*AdminTeamsOwnersListResponse, error)

	// AdminTeamsSettingsInfo request
	AdminTeamsSettingsInfoWithResponse(ctx context.Context, params *AdminTeamsSettingsInfoParams, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsInfoResponse, error)

	// AdminTeamsSettingsSetDefaultChannels request with any body
	AdminTeamsSettingsSetDefaultChannelsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetDefaultChannelsResponse, error)

	// AdminTeamsSettingsSetDescription request with any body
	AdminTeamsSettingsSetDescriptionWithBodyWithResponse(ctx context.Context, params *AdminTeamsSettingsSetDescriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetDescriptionResponse, error)

	AdminTeamsSettingsSetDescriptionWithResponse(ctx context.Context, params *AdminTeamsSettingsSetDescriptionParams, body AdminTeamsSettingsSetDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetDescriptionResponse, error)

	// AdminTeamsSettingsSetDiscoverability request with any body
	AdminTeamsSettingsSetDiscoverabilityWithBodyWithResponse(ctx context.Context, params *AdminTeamsSettingsSetDiscoverabilityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetDiscoverabilityResponse, error)

	AdminTeamsSettingsSetDiscoverabilityWithResponse(ctx context.Context, params *AdminTeamsSettingsSetDiscoverabilityParams, body AdminTeamsSettingsSetDiscoverabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetDiscoverabilityResponse, error)

	// AdminTeamsSettingsSetIcon request with any body
	AdminTeamsSettingsSetIconWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetIconResponse, error)

	// AdminTeamsSettingsSetName request with any body
	AdminTeamsSettingsSetNameWithBodyWithResponse(ctx context.Context, params *AdminTeamsSettingsSetNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetNameResponse, error)

	AdminTeamsSettingsSetNameWithResponse(ctx context.Context, params *AdminTeamsSettingsSetNameParams, body AdminTeamsSettingsSetNameJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetNameResponse, error)

	// AdminUsergroupsAddChannels request with any body
	AdminUsergroupsAddChannelsWithBodyWithResponse(ctx context.Context, params *AdminUsergroupsAddChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsergroupsAddChannelsResponse, error)

	AdminUsergroupsAddChannelsWithResponse(ctx context.Context, params *AdminUsergroupsAddChannelsParams, body AdminUsergroupsAddChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsergroupsAddChannelsResponse, error)

	// AdminUsergroupsAddTeams request with any body
	AdminUsergroupsAddTeamsWithBodyWithResponse(ctx context.Context, params *AdminUsergroupsAddTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsergroupsAddTeamsResponse, error)

	AdminUsergroupsAddTeamsWithResponse(ctx context.Context, params *AdminUsergroupsAddTeamsParams, body AdminUsergroupsAddTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsergroupsAddTeamsResponse, error)

	// AdminUsergroupsListChannels request
	AdminUsergroupsListChannelsWithResponse(ctx context.Context, params *AdminUsergroupsListChannelsParams, reqEditors ...RequestEditorFn) (*AdminUsergroupsListChannelsResponse, error)

	// AdminUsergroupsRemoveChannels request with any body
	AdminUsergroupsRemoveChannelsWithBodyWithResponse(ctx context.Context, params *AdminUsergroupsRemoveChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsergroupsRemoveChannelsResponse, error)

	AdminUsergroupsRemoveChannelsWithResponse(ctx context.Context, params *AdminUsergroupsRemoveChannelsParams, body AdminUsergroupsRemoveChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsergroupsRemoveChannelsResponse, error)

	// AdminUsersAssign request with any body
	AdminUsersAssignWithBodyWithResponse(ctx context.Context, params *AdminUsersAssignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersAssignResponse, error)

	AdminUsersAssignWithResponse(ctx context.Context, params *AdminUsersAssignParams, body AdminUsersAssignJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersAssignResponse, error)

	// AdminUsersInvite request with any body
	AdminUsersInviteWithBodyWithResponse(ctx context.Context, params *AdminUsersInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersInviteResponse, error)

	AdminUsersInviteWithResponse(ctx context.Context, params *AdminUsersInviteParams, body AdminUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersInviteResponse, error)

	// AdminUsersList request
	AdminUsersListWithResponse(ctx context.Context, params *AdminUsersListParams, reqEditors ...RequestEditorFn) (*AdminUsersListResponse, error)

	// AdminUsersRemove request with any body
	AdminUsersRemoveWithBodyWithResponse(ctx context.Context, params *AdminUsersRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersRemoveResponse, error)

	AdminUsersRemoveWithResponse(ctx context.Context, params *AdminUsersRemoveParams, body AdminUsersRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersRemoveResponse, error)

	// AdminUsersSessionInvalidate request with any body
	AdminUsersSessionInvalidateWithBodyWithResponse(ctx context.Context, params *AdminUsersSessionInvalidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSessionInvalidateResponse, error)

	AdminUsersSessionInvalidateWithResponse(ctx context.Context, params *AdminUsersSessionInvalidateParams, body AdminUsersSessionInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSessionInvalidateResponse, error)

	// AdminUsersSessionReset request with any body
	AdminUsersSessionResetWithBodyWithResponse(ctx context.Context, params *AdminUsersSessionResetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSessionResetResponse, error)

	AdminUsersSessionResetWithResponse(ctx context.Context, params *AdminUsersSessionResetParams, body AdminUsersSessionResetJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSessionResetResponse, error)

	// AdminUsersSetAdmin request with any body
	AdminUsersSetAdminWithBodyWithResponse(ctx context.Context, params *AdminUsersSetAdminParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSetAdminResponse, error)

	AdminUsersSetAdminWithResponse(ctx context.Context, params *AdminUsersSetAdminParams, body AdminUsersSetAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSetAdminResponse, error)

	// AdminUsersSetExpiration request with any body
	AdminUsersSetExpirationWithBodyWithResponse(ctx context.Context, params *AdminUsersSetExpirationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSetExpirationResponse, error)

	AdminUsersSetExpirationWithResponse(ctx context.Context, params *AdminUsersSetExpirationParams, body AdminUsersSetExpirationJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSetExpirationResponse, error)

	// AdminUsersSetOwner request with any body
	AdminUsersSetOwnerWithBodyWithResponse(ctx context.Context, params *AdminUsersSetOwnerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSetOwnerResponse, error)

	AdminUsersSetOwnerWithResponse(ctx context.Context, params *AdminUsersSetOwnerParams, body AdminUsersSetOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSetOwnerResponse, error)

	// AdminUsersSetRegular request with any body
	AdminUsersSetRegularWithBodyWithResponse(ctx context.Context, params *AdminUsersSetRegularParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSetRegularResponse, error)

	AdminUsersSetRegularWithResponse(ctx context.Context, params *AdminUsersSetRegularParams, body AdminUsersSetRegularJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSetRegularResponse, error)

	// ApiTest request
	ApiTestWithResponse(ctx context.Context, params *ApiTestParams, reqEditors ...RequestEditorFn) (*ApiTestResponse, error)

	// AppsEventAuthorizationsList request
	AppsEventAuthorizationsListWithResponse(ctx context.Context, params *AppsEventAuthorizationsListParams, reqEditors ...RequestEditorFn) (*AppsEventAuthorizationsListResponse, error)

	// AppsPermissionsInfo request
	AppsPermissionsInfoWithResponse(ctx context.Context, params *AppsPermissionsInfoParams, reqEditors ...RequestEditorFn) (*AppsPermissionsInfoResponse, error)

	// AppsPermissionsRequest request
	AppsPermissionsRequestWithResponse(ctx context.Context, params *AppsPermissionsRequestParams, reqEditors ...RequestEditorFn) (*AppsPermissionsRequestResponse, error)

	// AppsPermissionsResourcesList request
	AppsPermissionsResourcesListWithResponse(ctx context.Context, params *AppsPermissionsResourcesListParams, reqEditors ...RequestEditorFn) (*AppsPermissionsResourcesListResponse, error)

	// AppsPermissionsScopesList request
	AppsPermissionsScopesListWithResponse(ctx context.Context, params *AppsPermissionsScopesListParams, reqEditors ...RequestEditorFn) (*AppsPermissionsScopesListResponse, error)

	// AppsPermissionsUsersList request
	AppsPermissionsUsersListWithResponse(ctx context.Context, params *AppsPermissionsUsersListParams, reqEditors ...RequestEditorFn) (*AppsPermissionsUsersListResponse, error)

	// AppsPermissionsUsersRequest request
	AppsPermissionsUsersRequestWithResponse(ctx context.Context, params *AppsPermissionsUsersRequestParams, reqEditors ...RequestEditorFn) (*AppsPermissionsUsersRequestResponse, error)

	// AppsUninstall request
	AppsUninstallWithResponse(ctx context.Context, params *AppsUninstallParams, reqEditors ...RequestEditorFn) (*AppsUninstallResponse, error)

	// AuthRevoke request
	AuthRevokeWithResponse(ctx context.Context, params *AuthRevokeParams, reqEditors ...RequestEditorFn) (*AuthRevokeResponse, error)

	// AuthTest request
	AuthTestWithResponse(ctx context.Context, params *AuthTestParams, reqEditors ...RequestEditorFn) (*AuthTestResponse, error)

	// BotsInfo request
	BotsInfoWithResponse(ctx context.Context, params *BotsInfoParams, reqEditors ...RequestEditorFn) (*BotsInfoResponse, error)

	// CallsAdd request with any body
	CallsAddWithBodyWithResponse(ctx context.Context, params *CallsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallsAddResponse, error)

	CallsAddWithResponse(ctx context.Context, params *CallsAddParams, body CallsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*CallsAddResponse, error)

	// CallsEnd request with any body
	CallsEndWithBodyWithResponse(ctx context.Context, params *CallsEndParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallsEndResponse, error)

	CallsEndWithResponse(ctx context.Context, params *CallsEndParams, body CallsEndJSONRequestBody, reqEditors ...RequestEditorFn) (*CallsEndResponse, error)

	// CallsInfo request
	CallsInfoWithResponse(ctx context.Context, params *CallsInfoParams, reqEditors ...RequestEditorFn) (*CallsInfoResponse, error)

	// CallsParticipantsAdd request with any body
	CallsParticipantsAddWithBodyWithResponse(ctx context.Context, params *CallsParticipantsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallsParticipantsAddResponse, error)

	CallsParticipantsAddWithResponse(ctx context.Context, params *CallsParticipantsAddParams, body CallsParticipantsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*CallsParticipantsAddResponse, error)

	// CallsParticipantsRemove request with any body
	CallsParticipantsRemoveWithBodyWithResponse(ctx context.Context, params *CallsParticipantsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallsParticipantsRemoveResponse, error)

	CallsParticipantsRemoveWithResponse(ctx context.Context, params *CallsParticipantsRemoveParams, body CallsParticipantsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*CallsParticipantsRemoveResponse, error)

	// CallsUpdate request with any body
	CallsUpdateWithBodyWithResponse(ctx context.Context, params *CallsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallsUpdateResponse, error)

	CallsUpdateWithResponse(ctx context.Context, params *CallsUpdateParams, body CallsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CallsUpdateResponse, error)

	// ChatDelete request with any body
	ChatDeleteWithBodyWithResponse(ctx context.Context, params *ChatDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatDeleteResponse, error)

	ChatDeleteWithResponse(ctx context.Context, params *ChatDeleteParams, body ChatDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatDeleteResponse, error)

	// ChatDeleteScheduledMessage request with any body
	ChatDeleteScheduledMessageWithBodyWithResponse(ctx context.Context, params *ChatDeleteScheduledMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatDeleteScheduledMessageResponse, error)

	ChatDeleteScheduledMessageWithResponse(ctx context.Context, params *ChatDeleteScheduledMessageParams, body ChatDeleteScheduledMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatDeleteScheduledMessageResponse, error)

	// ChatGetPermalink request
	ChatGetPermalinkWithResponse(ctx context.Context, params *ChatGetPermalinkParams, reqEditors ...RequestEditorFn) (*ChatGetPermalinkResponse, error)

	// ChatMeMessage request with any body
	ChatMeMessageWithBodyWithResponse(ctx context.Context, params *ChatMeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatMeMessageResponse, error)

	ChatMeMessageWithResponse(ctx context.Context, params *ChatMeMessageParams, body ChatMeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatMeMessageResponse, error)

	// ChatPostEphemeral request with any body
	ChatPostEphemeralWithBodyWithResponse(ctx context.Context, params *ChatPostEphemeralParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatPostEphemeralResponse, error)

	ChatPostEphemeralWithResponse(ctx context.Context, params *ChatPostEphemeralParams, body ChatPostEphemeralJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatPostEphemeralResponse, error)

	// ChatPostMessage request with any body
	ChatPostMessageWithBodyWithResponse(ctx context.Context, params *ChatPostMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatPostMessageResponse, error)

	ChatPostMessageWithResponse(ctx context.Context, params *ChatPostMessageParams, body ChatPostMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatPostMessageResponse, error)

	// ChatScheduleMessage request with any body
	ChatScheduleMessageWithBodyWithResponse(ctx context.Context, params *ChatScheduleMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatScheduleMessageResponse, error)

	ChatScheduleMessageWithResponse(ctx context.Context, params *ChatScheduleMessageParams, body ChatScheduleMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatScheduleMessageResponse, error)

	// ChatScheduledMessagesList request
	ChatScheduledMessagesListWithResponse(ctx context.Context, params *ChatScheduledMessagesListParams, reqEditors ...RequestEditorFn) (*ChatScheduledMessagesListResponse, error)

	// ChatUnfurl request with any body
	ChatUnfurlWithBodyWithResponse(ctx context.Context, params *ChatUnfurlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatUnfurlResponse, error)

	ChatUnfurlWithResponse(ctx context.Context, params *ChatUnfurlParams, body ChatUnfurlJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatUnfurlResponse, error)

	// ChatUpdate request with any body
	ChatUpdateWithBodyWithResponse(ctx context.Context, params *ChatUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatUpdateResponse, error)

	ChatUpdateWithResponse(ctx context.Context, params *ChatUpdateParams, body ChatUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatUpdateResponse, error)

	// ConversationsArchive request with any body
	ConversationsArchiveWithBodyWithResponse(ctx context.Context, params *ConversationsArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsArchiveResponse, error)

	ConversationsArchiveWithResponse(ctx context.Context, params *ConversationsArchiveParams, body ConversationsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsArchiveResponse, error)

	// ConversationsClose request with any body
	ConversationsCloseWithBodyWithResponse(ctx context.Context, params *ConversationsCloseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsCloseResponse, error)

	ConversationsCloseWithResponse(ctx context.Context, params *ConversationsCloseParams, body ConversationsCloseJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsCloseResponse, error)

	// ConversationsCreate request with any body
	ConversationsCreateWithBodyWithResponse(ctx context.Context, params *ConversationsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsCreateResponse, error)

	ConversationsCreateWithResponse(ctx context.Context, params *ConversationsCreateParams, body ConversationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsCreateResponse, error)

	// ConversationsHistory request
	ConversationsHistoryWithResponse(ctx context.Context, params *ConversationsHistoryParams, reqEditors ...RequestEditorFn) (*ConversationsHistoryResponse, error)

	// ConversationsInfo request
	ConversationsInfoWithResponse(ctx context.Context, params *ConversationsInfoParams, reqEditors ...RequestEditorFn) (*ConversationsInfoResponse, error)

	// ConversationsInvite request with any body
	ConversationsInviteWithBodyWithResponse(ctx context.Context, params *ConversationsInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsInviteResponse, error)

	ConversationsInviteWithResponse(ctx context.Context, params *ConversationsInviteParams, body ConversationsInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsInviteResponse, error)

	// ConversationsJoin request with any body
	ConversationsJoinWithBodyWithResponse(ctx context.Context, params *ConversationsJoinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsJoinResponse, error)

	ConversationsJoinWithResponse(ctx context.Context, params *ConversationsJoinParams, body ConversationsJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsJoinResponse, error)

	// ConversationsKick request with any body
	ConversationsKickWithBodyWithResponse(ctx context.Context, params *ConversationsKickParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsKickResponse, error)

	ConversationsKickWithResponse(ctx context.Context, params *ConversationsKickParams, body ConversationsKickJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsKickResponse, error)

	// ConversationsLeave request with any body
	ConversationsLeaveWithBodyWithResponse(ctx context.Context, params *ConversationsLeaveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsLeaveResponse, error)

	ConversationsLeaveWithResponse(ctx context.Context, params *ConversationsLeaveParams, body ConversationsLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsLeaveResponse, error)

	// ConversationsList request
	ConversationsListWithResponse(ctx context.Context, params *ConversationsListParams, reqEditors ...RequestEditorFn) (*ConversationsListResponse, error)

	// ConversationsMark request with any body
	ConversationsMarkWithBodyWithResponse(ctx context.Context, params *ConversationsMarkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsMarkResponse, error)

	ConversationsMarkWithResponse(ctx context.Context, params *ConversationsMarkParams, body ConversationsMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsMarkResponse, error)

	// ConversationsMembers request
	ConversationsMembersWithResponse(ctx context.Context, params *ConversationsMembersParams, reqEditors ...RequestEditorFn) (*ConversationsMembersResponse, error)

	// ConversationsOpen request with any body
	ConversationsOpenWithBodyWithResponse(ctx context.Context, params *ConversationsOpenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsOpenResponse, error)

	ConversationsOpenWithResponse(ctx context.Context, params *ConversationsOpenParams, body ConversationsOpenJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsOpenResponse, error)

	// ConversationsRename request with any body
	ConversationsRenameWithBodyWithResponse(ctx context.Context, params *ConversationsRenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsRenameResponse, error)

	ConversationsRenameWithResponse(ctx context.Context, params *ConversationsRenameParams, body ConversationsRenameJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsRenameResponse, error)

	// ConversationsReplies request
	ConversationsRepliesWithResponse(ctx context.Context, params *ConversationsRepliesParams, reqEditors ...RequestEditorFn) (*ConversationsRepliesResponse, error)

	// ConversationsSetPurpose request with any body
	ConversationsSetPurposeWithBodyWithResponse(ctx context.Context, params *ConversationsSetPurposeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsSetPurposeResponse, error)

	ConversationsSetPurposeWithResponse(ctx context.Context, params *ConversationsSetPurposeParams, body ConversationsSetPurposeJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsSetPurposeResponse, error)

	// ConversationsSetTopic request with any body
	ConversationsSetTopicWithBodyWithResponse(ctx context.Context, params *ConversationsSetTopicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsSetTopicResponse, error)

	ConversationsSetTopicWithResponse(ctx context.Context, params *ConversationsSetTopicParams, body ConversationsSetTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsSetTopicResponse, error)

	// ConversationsUnarchive request with any body
	ConversationsUnarchiveWithBodyWithResponse(ctx context.Context, params *ConversationsUnarchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsUnarchiveResponse, error)

	ConversationsUnarchiveWithResponse(ctx context.Context, params *ConversationsUnarchiveParams, body ConversationsUnarchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsUnarchiveResponse, error)

	// DialogOpen request
	DialogOpenWithResponse(ctx context.Context, params *DialogOpenParams, reqEditors ...RequestEditorFn) (*DialogOpenResponse, error)

	// DndEndDnd request
	DndEndDndWithResponse(ctx context.Context, params *DndEndDndParams, reqEditors ...RequestEditorFn) (*DndEndDndResponse, error)

	// DndEndSnooze request
	DndEndSnoozeWithResponse(ctx context.Context, params *DndEndSnoozeParams, reqEditors ...RequestEditorFn) (*DndEndSnoozeResponse, error)

	// DndInfo request
	DndInfoWithResponse(ctx context.Context, params *DndInfoParams, reqEditors ...RequestEditorFn) (*DndInfoResponse, error)

	// DndSetSnooze request with any body
	DndSetSnoozeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DndSetSnoozeResponse, error)

	// DndTeamInfo request
	DndTeamInfoWithResponse(ctx context.Context, params *DndTeamInfoParams, reqEditors ...RequestEditorFn) (*DndTeamInfoResponse, error)

	// FilesCommentsDelete request with any body
	FilesCommentsDeleteWithBodyWithResponse(ctx context.Context, params *FilesCommentsDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesCommentsDeleteResponse, error)

	FilesCommentsDeleteWithResponse(ctx context.Context, params *FilesCommentsDeleteParams, body FilesCommentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*FilesCommentsDeleteResponse, error)

	// FilesDelete request with any body
	FilesDeleteWithBodyWithResponse(ctx context.Context, params *FilesDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesDeleteResponse, error)

	FilesDeleteWithResponse(ctx context.Context, params *FilesDeleteParams, body FilesDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*FilesDeleteResponse, error)

	// FilesInfo request
	FilesInfoWithResponse(ctx context.Context, params *FilesInfoParams, reqEditors ...RequestEditorFn) (*FilesInfoResponse, error)

	// FilesList request
	FilesListWithResponse(ctx context.Context, params *FilesListParams, reqEditors ...RequestEditorFn) (*FilesListResponse, error)

	// FilesRemoteAdd request with any body
	FilesRemoteAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesRemoteAddResponse, error)

	// FilesRemoteInfo request
	FilesRemoteInfoWithResponse(ctx context.Context, params *FilesRemoteInfoParams, reqEditors ...RequestEditorFn) (*FilesRemoteInfoResponse, error)

	// FilesRemoteList request
	FilesRemoteListWithResponse(ctx context.Context, params *FilesRemoteListParams, reqEditors ...RequestEditorFn) (*FilesRemoteListResponse, error)

	// FilesRemoteRemove request with any body
	FilesRemoteRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesRemoteRemoveResponse, error)

	// FilesRemoteShare request
	FilesRemoteShareWithResponse(ctx context.Context, params *FilesRemoteShareParams, reqEditors ...RequestEditorFn) (*FilesRemoteShareResponse, error)

	// FilesRemoteUpdate request with any body
	FilesRemoteUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesRemoteUpdateResponse, error)

	// FilesRevokePublicURL request with any body
	FilesRevokePublicURLWithBodyWithResponse(ctx context.Context, params *FilesRevokePublicURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesRevokePublicURLResponse, error)

	FilesRevokePublicURLWithResponse(ctx context.Context, params *FilesRevokePublicURLParams, body FilesRevokePublicURLJSONRequestBody, reqEditors ...RequestEditorFn) (*FilesRevokePublicURLResponse, error)

	// FilesSharedPublicURL request with any body
	FilesSharedPublicURLWithBodyWithResponse(ctx context.Context, params *FilesSharedPublicURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesSharedPublicURLResponse, error)

	FilesSharedPublicURLWithResponse(ctx context.Context, params *FilesSharedPublicURLParams, body FilesSharedPublicURLJSONRequestBody, reqEditors ...RequestEditorFn) (*FilesSharedPublicURLResponse, error)

	// FilesUpload request with any body
	FilesUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesUploadResponse, error)

	// MigrationExchange request
	MigrationExchangeWithResponse(ctx context.Context, params *MigrationExchangeParams, reqEditors ...RequestEditorFn) (*MigrationExchangeResponse, error)

	// OauthAccess request
	OauthAccessWithResponse(ctx context.Context, params *OauthAccessParams, reqEditors ...RequestEditorFn) (*OauthAccessResponse, error)

	// OauthToken request
	OauthTokenWithResponse(ctx context.Context, params *OauthTokenParams, reqEditors ...RequestEditorFn) (*OauthTokenResponse, error)

	// OauthV2Access request
	OauthV2AccessWithResponse(ctx context.Context, params *OauthV2AccessParams, reqEditors ...RequestEditorFn) (*OauthV2AccessResponse, error)

	// PinsAdd request with any body
	PinsAddWithBodyWithResponse(ctx context.Context, params *PinsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PinsAddResponse, error)

	PinsAddWithResponse(ctx context.Context, params *PinsAddParams, body PinsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*PinsAddResponse, error)

	// PinsList request
	PinsListWithResponse(ctx context.Context, params *PinsListParams, reqEditors ...RequestEditorFn) (*PinsListResponse, error)

	// PinsRemove request with any body
	PinsRemoveWithBodyWithResponse(ctx context.Context, params *PinsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PinsRemoveResponse, error)

	PinsRemoveWithResponse(ctx context.Context, params *PinsRemoveParams, body PinsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PinsRemoveResponse, error)

	// ReactionsAdd request with any body
	ReactionsAddWithBodyWithResponse(ctx context.Context, params *ReactionsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReactionsAddResponse, error)

	ReactionsAddWithResponse(ctx context.Context, params *ReactionsAddParams, body ReactionsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*ReactionsAddResponse, error)

	// ReactionsGet request
	ReactionsGetWithResponse(ctx context.Context, params *ReactionsGetParams, reqEditors ...RequestEditorFn) (*ReactionsGetResponse, error)

	// ReactionsList request
	ReactionsListWithResponse(ctx context.Context, params *ReactionsListParams, reqEditors ...RequestEditorFn) (*ReactionsListResponse, error)

	// ReactionsRemove request with any body
	ReactionsRemoveWithBodyWithResponse(ctx context.Context, params *ReactionsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReactionsRemoveResponse, error)

	ReactionsRemoveWithResponse(ctx context.Context, params *ReactionsRemoveParams, body ReactionsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*ReactionsRemoveResponse, error)

	// RemindersAdd request with any body
	RemindersAddWithBodyWithResponse(ctx context.Context, params *RemindersAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemindersAddResponse, error)

	RemindersAddWithResponse(ctx context.Context, params *RemindersAddParams, body RemindersAddJSONRequestBody, reqEditors ...RequestEditorFn) (*RemindersAddResponse, error)

	// RemindersComplete request with any body
	RemindersCompleteWithBodyWithResponse(ctx context.Context, params *RemindersCompleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemindersCompleteResponse, error)

	RemindersCompleteWithResponse(ctx context.Context, params *RemindersCompleteParams, body RemindersCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*RemindersCompleteResponse, error)

	// RemindersDelete request with any body
	RemindersDeleteWithBodyWithResponse(ctx context.Context, params *RemindersDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemindersDeleteResponse, error)

	RemindersDeleteWithResponse(ctx context.Context, params *RemindersDeleteParams, body RemindersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*RemindersDeleteResponse, error)

	// RemindersInfo request
	RemindersInfoWithResponse(ctx context.Context, params *RemindersInfoParams, reqEditors ...RequestEditorFn) (*RemindersInfoResponse, error)

	// RemindersList request
	RemindersListWithResponse(ctx context.Context, params *RemindersListParams, reqEditors ...RequestEditorFn) (*RemindersListResponse, error)

	// RtmConnect request
	RtmConnectWithResponse(ctx context.Context, params *RtmConnectParams, reqEditors ...RequestEditorFn) (*RtmConnectResponse, error)

	// SearchMessages request
	SearchMessagesWithResponse(ctx context.Context, params *SearchMessagesParams, reqEditors ...RequestEditorFn) (*SearchMessagesResponse, error)

	// StarsAdd request with any body
	StarsAddWithBodyWithResponse(ctx context.Context, params *StarsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StarsAddResponse, error)

	StarsAddWithResponse(ctx context.Context, params *StarsAddParams, body StarsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*StarsAddResponse, error)

	// StarsList request
	StarsListWithResponse(ctx context.Context, params *StarsListParams, reqEditors ...RequestEditorFn) (*StarsListResponse, error)

	// StarsRemove request with any body
	StarsRemoveWithBodyWithResponse(ctx context.Context, params *StarsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StarsRemoveResponse, error)

	StarsRemoveWithResponse(ctx context.Context, params *StarsRemoveParams, body StarsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*StarsRemoveResponse, error)

	// TeamAccessLogs request
	TeamAccessLogsWithResponse(ctx context.Context, params *TeamAccessLogsParams, reqEditors ...RequestEditorFn) (*TeamAccessLogsResponse, error)

	// TeamBillableInfo request
	TeamBillableInfoWithResponse(ctx context.Context, params *TeamBillableInfoParams, reqEditors ...RequestEditorFn) (*TeamBillableInfoResponse, error)

	// TeamInfo request
	TeamInfoWithResponse(ctx context.Context, params *TeamInfoParams, reqEditors ...RequestEditorFn) (*TeamInfoResponse, error)

	// TeamIntegrationLogs request
	TeamIntegrationLogsWithResponse(ctx context.Context, params *TeamIntegrationLogsParams, reqEditors ...RequestEditorFn) (*TeamIntegrationLogsResponse, error)

	// TeamProfileGet request
	TeamProfileGetWithResponse(ctx context.Context, params *TeamProfileGetParams, reqEditors ...RequestEditorFn) (*TeamProfileGetResponse, error)

	// UsergroupsCreate request with any body
	UsergroupsCreateWithBodyWithResponse(ctx context.Context, params *UsergroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsergroupsCreateResponse, error)

	UsergroupsCreateWithResponse(ctx context.Context, params *UsergroupsCreateParams, body UsergroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsergroupsCreateResponse, error)

	// UsergroupsDisable request with any body
	UsergroupsDisableWithBodyWithResponse(ctx context.Context, params *UsergroupsDisableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsergroupsDisableResponse, error)

	UsergroupsDisableWithResponse(ctx context.Context, params *UsergroupsDisableParams, body UsergroupsDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*UsergroupsDisableResponse, error)

	// UsergroupsEnable request with any body
	UsergroupsEnableWithBodyWithResponse(ctx context.Context, params *UsergroupsEnableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsergroupsEnableResponse, error)

	UsergroupsEnableWithResponse(ctx context.Context, params *UsergroupsEnableParams, body UsergroupsEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*UsergroupsEnableResponse, error)

	// UsergroupsList request
	UsergroupsListWithResponse(ctx context.Context, params *UsergroupsListParams, reqEditors ...RequestEditorFn) (*UsergroupsListResponse, error)

	// UsergroupsUpdate request with any body
	UsergroupsUpdateWithBodyWithResponse(ctx context.Context, params *UsergroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsergroupsUpdateResponse, error)

	UsergroupsUpdateWithResponse(ctx context.Context, params *UsergroupsUpdateParams, body UsergroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsergroupsUpdateResponse, error)

	// UsergroupsUsersList request
	UsergroupsUsersListWithResponse(ctx context.Context, params *UsergroupsUsersListParams, reqEditors ...RequestEditorFn) (*UsergroupsUsersListResponse, error)

	// UsergroupsUsersUpdate request with any body
	UsergroupsUsersUpdateWithBodyWithResponse(ctx context.Context, params *UsergroupsUsersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsergroupsUsersUpdateResponse, error)

	UsergroupsUsersUpdateWithResponse(ctx context.Context, params *UsergroupsUsersUpdateParams, body UsergroupsUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsergroupsUsersUpdateResponse, error)

	// UsersConversations request
	UsersConversationsWithResponse(ctx context.Context, params *UsersConversationsParams, reqEditors ...RequestEditorFn) (*UsersConversationsResponse, error)

	// UsersDeletePhoto request with any body
	UsersDeletePhotoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersDeletePhotoResponse, error)

	// UsersGetPresence request
	UsersGetPresenceWithResponse(ctx context.Context, params *UsersGetPresenceParams, reqEditors ...RequestEditorFn) (*UsersGetPresenceResponse, error)

	// UsersIdentity request
	UsersIdentityWithResponse(ctx context.Context, params *UsersIdentityParams, reqEditors ...RequestEditorFn) (*UsersIdentityResponse, error)

	// UsersInfo request
	UsersInfoWithResponse(ctx context.Context, params *UsersInfoParams, reqEditors ...RequestEditorFn) (*UsersInfoResponse, error)

	// UsersList request
	UsersListWithResponse(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*UsersListResponse, error)

	// UsersLookupByEmail request
	UsersLookupByEmailWithResponse(ctx context.Context, params *UsersLookupByEmailParams, reqEditors ...RequestEditorFn) (*UsersLookupByEmailResponse, error)

	// UsersProfileGet request
	UsersProfileGetWithResponse(ctx context.Context, params *UsersProfileGetParams, reqEditors ...RequestEditorFn) (*UsersProfileGetResponse, error)

	// UsersProfileSet request with any body
	UsersProfileSetWithBodyWithResponse(ctx context.Context, params *UsersProfileSetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersProfileSetResponse, error)

	UsersProfileSetWithResponse(ctx context.Context, params *UsersProfileSetParams, body UsersProfileSetJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersProfileSetResponse, error)

	// UsersSetActive request
	UsersSetActiveWithResponse(ctx context.Context, params *UsersSetActiveParams, reqEditors ...RequestEditorFn) (*UsersSetActiveResponse, error)

	// UsersSetPhoto request with any body
	UsersSetPhotoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersSetPhotoResponse, error)

	// UsersSetPresence request with any body
	UsersSetPresenceWithBodyWithResponse(ctx context.Context, params *UsersSetPresenceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersSetPresenceResponse, error)

	UsersSetPresenceWithResponse(ctx context.Context, params *UsersSetPresenceParams, body UsersSetPresenceJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersSetPresenceResponse, error)

	// ViewsOpen request
	ViewsOpenWithResponse(ctx context.Context, params *ViewsOpenParams, reqEditors ...RequestEditorFn) (*ViewsOpenResponse, error)

	// ViewsPublish request
	ViewsPublishWithResponse(ctx context.Context, params *ViewsPublishParams, reqEditors ...RequestEditorFn) (*ViewsPublishResponse, error)

	// ViewsPush request
	ViewsPushWithResponse(ctx context.Context, params *ViewsPushParams, reqEditors ...RequestEditorFn) (*ViewsPushResponse, error)

	// ViewsUpdate request
	ViewsUpdateWithResponse(ctx context.Context, params *ViewsUpdateParams, reqEditors ...RequestEditorFn) (*ViewsUpdateResponse, error)

	// WorkflowsStepCompleted request
	WorkflowsStepCompletedWithResponse(ctx context.Context, params *WorkflowsStepCompletedParams, reqEditors ...RequestEditorFn) (*WorkflowsStepCompletedResponse, error)

	// WorkflowsStepFailed request
	WorkflowsStepFailedWithResponse(ctx context.Context, params *WorkflowsStepFailedParams, reqEditors ...RequestEditorFn) (*WorkflowsStepFailedResponse, error)

	// WorkflowsUpdateStep request
	WorkflowsUpdateStepWithResponse(ctx context.Context, params *WorkflowsUpdateStepParams, reqEditors ...RequestEditorFn) (*WorkflowsUpdateStepResponse, error)
}

type AdminAppsApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminAppsApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAppsApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminAppsApprovedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminAppsApprovedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAppsApprovedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminAppsRequestsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminAppsRequestsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAppsRequestsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminAppsRestrictResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminAppsRestrictResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAppsRestrictResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminAppsRestrictedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminAppsRestrictedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminAppsRestrictedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsConvertToPrivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsConvertToPrivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsConvertToPrivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsDisconnectSharedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsDisconnectSharedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsDisconnectSharedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsEkmListOriginalConnectedChannelInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsEkmListOriginalConnectedChannelInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsEkmListOriginalConnectedChannelInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsGetConversationPrefsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsGetConversationPrefsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsGetConversationPrefsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsGetTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsGetTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsGetTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsRenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsRenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsRenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsRestrictAccessAddGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsRestrictAccessAddGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsRestrictAccessAddGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsRestrictAccessListGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsRestrictAccessListGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsRestrictAccessListGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsRestrictAccessRemoveGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsRestrictAccessRemoveGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsRestrictAccessRemoveGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsSetConversationPrefsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsSetConversationPrefsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsSetConversationPrefsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsSetTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsSetTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsSetTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminConversationsUnarchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminConversationsUnarchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminConversationsUnarchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminInviteRequestsApproveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminInviteRequestsApproveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminInviteRequestsApproveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminInviteRequestsApprovedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminInviteRequestsApprovedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminInviteRequestsApprovedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminInviteRequestsDeniedListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminInviteRequestsDeniedListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminInviteRequestsDeniedListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminInviteRequestsDenyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminInviteRequestsDenyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminInviteRequestsDenyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminInviteRequestsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminInviteRequestsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminInviteRequestsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTeamsAdminsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminTeamsAdminsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTeamsAdminsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTeamsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminTeamsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTeamsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTeamsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminTeamsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTeamsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTeamsOwnersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminTeamsOwnersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTeamsOwnersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTeamsSettingsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminTeamsSettingsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTeamsSettingsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTeamsSettingsSetDefaultChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminTeamsSettingsSetDefaultChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTeamsSettingsSetDefaultChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTeamsSettingsSetDescriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminTeamsSettingsSetDescriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTeamsSettingsSetDescriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTeamsSettingsSetDiscoverabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminTeamsSettingsSetDiscoverabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTeamsSettingsSetDiscoverabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTeamsSettingsSetIconResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminTeamsSettingsSetIconResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTeamsSettingsSetIconResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminTeamsSettingsSetNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminTeamsSettingsSetNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminTeamsSettingsSetNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsergroupsAddChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsergroupsAddChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsergroupsAddChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsergroupsAddTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsergroupsAddTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsergroupsAddTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsergroupsListChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsergroupsListChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsergroupsListChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsergroupsRemoveChannelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsergroupsRemoveChannelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsergroupsRemoveChannelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsersAssignResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsersAssignResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsersAssignResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsersInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsersInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsersInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsersRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsersRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsersRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsersSessionInvalidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsersSessionInvalidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsersSessionInvalidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsersSessionResetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsersSessionResetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsersSessionResetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsersSetAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsersSetAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsersSetAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsersSetExpirationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsersSetExpirationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsersSetExpirationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsersSetOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsersSetOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsersSetOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUsersSetRegularResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUsersSetRegularResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUsersSetRegularResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApiTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ApiTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApiTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsEventAuthorizationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AppsEventAuthorizationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsEventAuthorizationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPermissionsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AppsPermissionsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPermissionsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPermissionsRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AppsPermissionsRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPermissionsRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPermissionsResourcesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AppsPermissionsResourcesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPermissionsResourcesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPermissionsScopesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AppsPermissionsScopesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPermissionsScopesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPermissionsUsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AppsPermissionsUsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPermissionsUsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsPermissionsUsersRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AppsPermissionsUsersRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsPermissionsUsersRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppsUninstallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AppsUninstallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppsUninstallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthRevokeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AuthRevokeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthRevokeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r AuthTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BotsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r BotsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BotsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r CallsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallsEndResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r CallsEndResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallsEndResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r CallsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallsParticipantsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r CallsParticipantsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallsParticipantsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallsParticipantsRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r CallsParticipantsRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallsParticipantsRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CallsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r CallsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CallsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChatDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ChatDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChatDeleteScheduledMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ChatDeleteScheduledMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatDeleteScheduledMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChatGetPermalinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ChatGetPermalinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatGetPermalinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChatMeMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ChatMeMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatMeMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChatPostEphemeralResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ChatPostEphemeralResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatPostEphemeralResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChatPostMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ChatPostMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatPostMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChatScheduleMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ChatScheduleMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatScheduleMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChatScheduledMessagesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ChatScheduledMessagesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatScheduledMessagesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChatUnfurlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ChatUnfurlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatUnfurlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChatUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ChatUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChatUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsCloseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsCloseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsCloseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsInviteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsInviteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsInviteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsJoinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsJoinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsJoinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsKickResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsKickResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsKickResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsLeaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsLeaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsLeaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConversationsListResponseBody
	JSONDefault  *ConversationsListErrorResponseBody
}

// Status returns HTTPResponse.Status
func (r ConversationsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsMarkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsMarkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsMarkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsOpenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsOpenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsOpenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsRenameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsRenameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsRenameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsRepliesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsRepliesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsRepliesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsSetPurposeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsSetPurposeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsSetPurposeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsSetTopicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsSetTopicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsSetTopicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConversationsUnarchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ConversationsUnarchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConversationsUnarchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DialogOpenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r DialogOpenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DialogOpenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DndEndDndResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r DndEndDndResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DndEndDndResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DndEndSnoozeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r DndEndSnoozeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DndEndSnoozeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DndInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r DndInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DndInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DndSetSnoozeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r DndSetSnoozeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DndSetSnoozeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DndTeamInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r DndTeamInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DndTeamInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesCommentsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesCommentsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesCommentsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesRemoteAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesRemoteAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesRemoteAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesRemoteInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesRemoteInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesRemoteInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesRemoteListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesRemoteListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesRemoteListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesRemoteRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesRemoteRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesRemoteRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesRemoteShareResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesRemoteShareResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesRemoteShareResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesRemoteUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesRemoteUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesRemoteUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesRevokePublicURLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesRevokePublicURLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesRevokePublicURLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesSharedPublicURLResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesSharedPublicURLResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesSharedPublicURLResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FilesUploadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r FilesUploadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FilesUploadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MigrationExchangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r MigrationExchangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MigrationExchangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OauthAccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r OauthAccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OauthAccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OauthTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r OauthTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OauthTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type OauthV2AccessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r OauthV2AccessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r OauthV2AccessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PinsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r PinsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PinsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PinsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r PinsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PinsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PinsRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r PinsRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PinsRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReactionsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ReactionsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReactionsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReactionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSONDefault  *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ReactionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReactionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReactionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ReactionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReactionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReactionsRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ReactionsRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReactionsRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemindersAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r RemindersAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemindersAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemindersCompleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r RemindersCompleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemindersCompleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemindersDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r RemindersDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemindersDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemindersInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r RemindersInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemindersInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemindersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r RemindersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemindersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RtmConnectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r RtmConnectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RtmConnectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r SearchMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StarsAddResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r StarsAddResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StarsAddResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StarsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r StarsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StarsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StarsRemoveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r StarsRemoveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StarsRemoveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamAccessLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r TeamAccessLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamAccessLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamBillableInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r TeamBillableInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamBillableInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r TeamInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamIntegrationLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r TeamIntegrationLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamIntegrationLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TeamProfileGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r TeamProfileGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TeamProfileGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsergroupsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsergroupsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsergroupsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsergroupsDisableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsergroupsDisableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsergroupsDisableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsergroupsEnableResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsergroupsEnableResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsergroupsEnableResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsergroupsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsergroupsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsergroupsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsergroupsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsergroupsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsergroupsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsergroupsUsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsergroupsUsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsergroupsUsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsergroupsUsersUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsergroupsUsersUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsergroupsUsersUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersConversationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersConversationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersConversationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersDeletePhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersDeletePhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersDeletePhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersGetPresenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersGetPresenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersGetPresenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Schema for 'identity.basic' scope
		TempOneof00 *struct {
			Ok   DefsOkTrue `json:"ok"`
			Team struct {
				Id DefsTeam `json:"id"`
			} `json:"team"`
			User struct {
				Id   DefsUserId `json:"id"`
				Name string     `json:"name"`
			} `json:"user"`
		} `json:"temp_oneof_00,omitempty"`

		// Schema for 'identity.basic,identity.email' scopes
		TempOneof01 *struct {
			Ok   DefsOkTrue `json:"ok"`
			Team struct {
				Id DefsTeam `json:"id"`
			} `json:"team"`
			User struct {
				Email openapi_types.Email `json:"email"`
				Id    DefsUserId          `json:"id"`
				Name  string              `json:"name"`
			} `json:"user"`
		} `json:"temp_oneof_01,omitempty"`

		// Schema for 'identity.basic,identity.avatar' scopes
		TempOneof02 *struct {
			Ok   DefsOkTrue `json:"ok"`
			Team struct {
				Id DefsTeam `json:"id"`
			} `json:"team"`
			User struct {
				Id       DefsUserId `json:"id"`
				Image192 string     `json:"image_192"`
				Image24  string     `json:"image_24"`
				Image32  string     `json:"image_32"`
				Image48  string     `json:"image_48"`
				Image512 string     `json:"image_512"`
				Image72  string     `json:"image_72"`
				Name     string     `json:"name"`
			} `json:"user"`
		} `json:"temp_oneof_02,omitempty"`

		// Schema for 'identity.basic,identity.team' scopes
		TempOneof03 *struct {
			Ok   DefsOkTrue `json:"ok"`
			Team struct {
				Domain       string   `json:"domain"`
				Id           DefsTeam `json:"id"`
				Image102     string   `json:"image_102"`
				Image132     string   `json:"image_132"`
				Image230     string   `json:"image_230"`
				Image34      string   `json:"image_34"`
				Image44      string   `json:"image_44"`
				Image68      string   `json:"image_68"`
				Image88      string   `json:"image_88"`
				ImageDefault bool     `json:"image_default"`
				Name         string   `json:"name"`
			} `json:"team"`
			User struct {
				Id   DefsUserId `json:"id"`
				Name string     `json:"name"`
			} `json:"user"`
		} `json:"temp_oneof_03,omitempty"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersLookupByEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersLookupByEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersLookupByEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersProfileGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersProfileGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersProfileGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersProfileSetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersProfileSetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersProfileSetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersSetActiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersSetActiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersSetActiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersSetPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersSetPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersSetPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UsersSetPresenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r UsersSetPresenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UsersSetPresenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsOpenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ViewsOpenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsOpenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsPublishResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ViewsPublishResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsPublishResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsPushResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ViewsPushResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsPushResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ViewsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r ViewsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ViewsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsStepCompletedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r WorkflowsStepCompletedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsStepCompletedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsStepFailedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r WorkflowsStepFailedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsStepFailedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WorkflowsUpdateStepResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
	JSONDefault *struct {
		AdditionalProperties map[string]map[string]interface{} `json:"-"`
	}
}

// Status returns HTTPResponse.Status
func (r WorkflowsUpdateStepResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WorkflowsUpdateStepResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AdminAppsApproveWithBodyWithResponse request with arbitrary body returning *AdminAppsApproveResponse
func (c *ClientWithResponses) AdminAppsApproveWithBodyWithResponse(ctx context.Context, params *AdminAppsApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminAppsApproveResponse, error) {
	rsp, err := c.AdminAppsApproveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAppsApproveResponse(rsp)
}

func (c *ClientWithResponses) AdminAppsApproveWithResponse(ctx context.Context, params *AdminAppsApproveParams, body AdminAppsApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminAppsApproveResponse, error) {
	rsp, err := c.AdminAppsApprove(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAppsApproveResponse(rsp)
}

// AdminAppsApprovedListWithResponse request returning *AdminAppsApprovedListResponse
func (c *ClientWithResponses) AdminAppsApprovedListWithResponse(ctx context.Context, params *AdminAppsApprovedListParams, reqEditors ...RequestEditorFn) (*AdminAppsApprovedListResponse, error) {
	rsp, err := c.AdminAppsApprovedList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAppsApprovedListResponse(rsp)
}

// AdminAppsRequestsListWithResponse request returning *AdminAppsRequestsListResponse
func (c *ClientWithResponses) AdminAppsRequestsListWithResponse(ctx context.Context, params *AdminAppsRequestsListParams, reqEditors ...RequestEditorFn) (*AdminAppsRequestsListResponse, error) {
	rsp, err := c.AdminAppsRequestsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAppsRequestsListResponse(rsp)
}

// AdminAppsRestrictWithBodyWithResponse request with arbitrary body returning *AdminAppsRestrictResponse
func (c *ClientWithResponses) AdminAppsRestrictWithBodyWithResponse(ctx context.Context, params *AdminAppsRestrictParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminAppsRestrictResponse, error) {
	rsp, err := c.AdminAppsRestrictWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAppsRestrictResponse(rsp)
}

func (c *ClientWithResponses) AdminAppsRestrictWithResponse(ctx context.Context, params *AdminAppsRestrictParams, body AdminAppsRestrictJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminAppsRestrictResponse, error) {
	rsp, err := c.AdminAppsRestrict(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAppsRestrictResponse(rsp)
}

// AdminAppsRestrictedListWithResponse request returning *AdminAppsRestrictedListResponse
func (c *ClientWithResponses) AdminAppsRestrictedListWithResponse(ctx context.Context, params *AdminAppsRestrictedListParams, reqEditors ...RequestEditorFn) (*AdminAppsRestrictedListResponse, error) {
	rsp, err := c.AdminAppsRestrictedList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminAppsRestrictedListResponse(rsp)
}

// AdminConversationsArchiveWithBodyWithResponse request with arbitrary body returning *AdminConversationsArchiveResponse
func (c *ClientWithResponses) AdminConversationsArchiveWithBodyWithResponse(ctx context.Context, params *AdminConversationsArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsArchiveResponse, error) {
	rsp, err := c.AdminConversationsArchiveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsArchiveResponse(rsp)
}

func (c *ClientWithResponses) AdminConversationsArchiveWithResponse(ctx context.Context, params *AdminConversationsArchiveParams, body AdminConversationsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsArchiveResponse, error) {
	rsp, err := c.AdminConversationsArchive(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsArchiveResponse(rsp)
}

// AdminConversationsConvertToPrivateWithBodyWithResponse request with arbitrary body returning *AdminConversationsConvertToPrivateResponse
func (c *ClientWithResponses) AdminConversationsConvertToPrivateWithBodyWithResponse(ctx context.Context, params *AdminConversationsConvertToPrivateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsConvertToPrivateResponse, error) {
	rsp, err := c.AdminConversationsConvertToPrivateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsConvertToPrivateResponse(rsp)
}

func (c *ClientWithResponses) AdminConversationsConvertToPrivateWithResponse(ctx context.Context, params *AdminConversationsConvertToPrivateParams, body AdminConversationsConvertToPrivateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsConvertToPrivateResponse, error) {
	rsp, err := c.AdminConversationsConvertToPrivate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsConvertToPrivateResponse(rsp)
}

// AdminConversationsCreateWithBodyWithResponse request with arbitrary body returning *AdminConversationsCreateResponse
func (c *ClientWithResponses) AdminConversationsCreateWithBodyWithResponse(ctx context.Context, params *AdminConversationsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsCreateResponse, error) {
	rsp, err := c.AdminConversationsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsCreateResponse(rsp)
}

func (c *ClientWithResponses) AdminConversationsCreateWithResponse(ctx context.Context, params *AdminConversationsCreateParams, body AdminConversationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsCreateResponse, error) {
	rsp, err := c.AdminConversationsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsCreateResponse(rsp)
}

// AdminConversationsDeleteWithBodyWithResponse request with arbitrary body returning *AdminConversationsDeleteResponse
func (c *ClientWithResponses) AdminConversationsDeleteWithBodyWithResponse(ctx context.Context, params *AdminConversationsDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsDeleteResponse, error) {
	rsp, err := c.AdminConversationsDeleteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsDeleteResponse(rsp)
}

func (c *ClientWithResponses) AdminConversationsDeleteWithResponse(ctx context.Context, params *AdminConversationsDeleteParams, body AdminConversationsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsDeleteResponse, error) {
	rsp, err := c.AdminConversationsDelete(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsDeleteResponse(rsp)
}

// AdminConversationsDisconnectSharedWithBodyWithResponse request with arbitrary body returning *AdminConversationsDisconnectSharedResponse
func (c *ClientWithResponses) AdminConversationsDisconnectSharedWithBodyWithResponse(ctx context.Context, params *AdminConversationsDisconnectSharedParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsDisconnectSharedResponse, error) {
	rsp, err := c.AdminConversationsDisconnectSharedWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsDisconnectSharedResponse(rsp)
}

func (c *ClientWithResponses) AdminConversationsDisconnectSharedWithResponse(ctx context.Context, params *AdminConversationsDisconnectSharedParams, body AdminConversationsDisconnectSharedJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsDisconnectSharedResponse, error) {
	rsp, err := c.AdminConversationsDisconnectShared(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsDisconnectSharedResponse(rsp)
}

// AdminConversationsEkmListOriginalConnectedChannelInfoWithResponse request returning *AdminConversationsEkmListOriginalConnectedChannelInfoResponse
func (c *ClientWithResponses) AdminConversationsEkmListOriginalConnectedChannelInfoWithResponse(ctx context.Context, params *AdminConversationsEkmListOriginalConnectedChannelInfoParams, reqEditors ...RequestEditorFn) (*AdminConversationsEkmListOriginalConnectedChannelInfoResponse, error) {
	rsp, err := c.AdminConversationsEkmListOriginalConnectedChannelInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsEkmListOriginalConnectedChannelInfoResponse(rsp)
}

// AdminConversationsGetConversationPrefsWithResponse request returning *AdminConversationsGetConversationPrefsResponse
func (c *ClientWithResponses) AdminConversationsGetConversationPrefsWithResponse(ctx context.Context, params *AdminConversationsGetConversationPrefsParams, reqEditors ...RequestEditorFn) (*AdminConversationsGetConversationPrefsResponse, error) {
	rsp, err := c.AdminConversationsGetConversationPrefs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsGetConversationPrefsResponse(rsp)
}

// AdminConversationsGetTeamsWithResponse request returning *AdminConversationsGetTeamsResponse
func (c *ClientWithResponses) AdminConversationsGetTeamsWithResponse(ctx context.Context, params *AdminConversationsGetTeamsParams, reqEditors ...RequestEditorFn) (*AdminConversationsGetTeamsResponse, error) {
	rsp, err := c.AdminConversationsGetTeams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsGetTeamsResponse(rsp)
}

// AdminConversationsInviteWithBodyWithResponse request with arbitrary body returning *AdminConversationsInviteResponse
func (c *ClientWithResponses) AdminConversationsInviteWithBodyWithResponse(ctx context.Context, params *AdminConversationsInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsInviteResponse, error) {
	rsp, err := c.AdminConversationsInviteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsInviteResponse(rsp)
}

func (c *ClientWithResponses) AdminConversationsInviteWithResponse(ctx context.Context, params *AdminConversationsInviteParams, body AdminConversationsInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsInviteResponse, error) {
	rsp, err := c.AdminConversationsInvite(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsInviteResponse(rsp)
}

// AdminConversationsRenameWithBodyWithResponse request with arbitrary body returning *AdminConversationsRenameResponse
func (c *ClientWithResponses) AdminConversationsRenameWithBodyWithResponse(ctx context.Context, params *AdminConversationsRenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsRenameResponse, error) {
	rsp, err := c.AdminConversationsRenameWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsRenameResponse(rsp)
}

func (c *ClientWithResponses) AdminConversationsRenameWithResponse(ctx context.Context, params *AdminConversationsRenameParams, body AdminConversationsRenameJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsRenameResponse, error) {
	rsp, err := c.AdminConversationsRename(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsRenameResponse(rsp)
}

// AdminConversationsRestrictAccessAddGroupWithBodyWithResponse request with arbitrary body returning *AdminConversationsRestrictAccessAddGroupResponse
func (c *ClientWithResponses) AdminConversationsRestrictAccessAddGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsRestrictAccessAddGroupResponse, error) {
	rsp, err := c.AdminConversationsRestrictAccessAddGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsRestrictAccessAddGroupResponse(rsp)
}

// AdminConversationsRestrictAccessListGroupsWithResponse request returning *AdminConversationsRestrictAccessListGroupsResponse
func (c *ClientWithResponses) AdminConversationsRestrictAccessListGroupsWithResponse(ctx context.Context, params *AdminConversationsRestrictAccessListGroupsParams, reqEditors ...RequestEditorFn) (*AdminConversationsRestrictAccessListGroupsResponse, error) {
	rsp, err := c.AdminConversationsRestrictAccessListGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsRestrictAccessListGroupsResponse(rsp)
}

// AdminConversationsRestrictAccessRemoveGroupWithBodyWithResponse request with arbitrary body returning *AdminConversationsRestrictAccessRemoveGroupResponse
func (c *ClientWithResponses) AdminConversationsRestrictAccessRemoveGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsRestrictAccessRemoveGroupResponse, error) {
	rsp, err := c.AdminConversationsRestrictAccessRemoveGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsRestrictAccessRemoveGroupResponse(rsp)
}

// AdminConversationsSearchWithResponse request returning *AdminConversationsSearchResponse
func (c *ClientWithResponses) AdminConversationsSearchWithResponse(ctx context.Context, params *AdminConversationsSearchParams, reqEditors ...RequestEditorFn) (*AdminConversationsSearchResponse, error) {
	rsp, err := c.AdminConversationsSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsSearchResponse(rsp)
}

// AdminConversationsSetConversationPrefsWithBodyWithResponse request with arbitrary body returning *AdminConversationsSetConversationPrefsResponse
func (c *ClientWithResponses) AdminConversationsSetConversationPrefsWithBodyWithResponse(ctx context.Context, params *AdminConversationsSetConversationPrefsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsSetConversationPrefsResponse, error) {
	rsp, err := c.AdminConversationsSetConversationPrefsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsSetConversationPrefsResponse(rsp)
}

func (c *ClientWithResponses) AdminConversationsSetConversationPrefsWithResponse(ctx context.Context, params *AdminConversationsSetConversationPrefsParams, body AdminConversationsSetConversationPrefsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsSetConversationPrefsResponse, error) {
	rsp, err := c.AdminConversationsSetConversationPrefs(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsSetConversationPrefsResponse(rsp)
}

// AdminConversationsSetTeamsWithBodyWithResponse request with arbitrary body returning *AdminConversationsSetTeamsResponse
func (c *ClientWithResponses) AdminConversationsSetTeamsWithBodyWithResponse(ctx context.Context, params *AdminConversationsSetTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsSetTeamsResponse, error) {
	rsp, err := c.AdminConversationsSetTeamsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsSetTeamsResponse(rsp)
}

func (c *ClientWithResponses) AdminConversationsSetTeamsWithResponse(ctx context.Context, params *AdminConversationsSetTeamsParams, body AdminConversationsSetTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsSetTeamsResponse, error) {
	rsp, err := c.AdminConversationsSetTeams(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsSetTeamsResponse(rsp)
}

// AdminConversationsUnarchiveWithBodyWithResponse request with arbitrary body returning *AdminConversationsUnarchiveResponse
func (c *ClientWithResponses) AdminConversationsUnarchiveWithBodyWithResponse(ctx context.Context, params *AdminConversationsUnarchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminConversationsUnarchiveResponse, error) {
	rsp, err := c.AdminConversationsUnarchiveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsUnarchiveResponse(rsp)
}

func (c *ClientWithResponses) AdminConversationsUnarchiveWithResponse(ctx context.Context, params *AdminConversationsUnarchiveParams, body AdminConversationsUnarchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminConversationsUnarchiveResponse, error) {
	rsp, err := c.AdminConversationsUnarchive(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminConversationsUnarchiveResponse(rsp)
}

// AdminInviteRequestsApproveWithBodyWithResponse request with arbitrary body returning *AdminInviteRequestsApproveResponse
func (c *ClientWithResponses) AdminInviteRequestsApproveWithBodyWithResponse(ctx context.Context, params *AdminInviteRequestsApproveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminInviteRequestsApproveResponse, error) {
	rsp, err := c.AdminInviteRequestsApproveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminInviteRequestsApproveResponse(rsp)
}

func (c *ClientWithResponses) AdminInviteRequestsApproveWithResponse(ctx context.Context, params *AdminInviteRequestsApproveParams, body AdminInviteRequestsApproveJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminInviteRequestsApproveResponse, error) {
	rsp, err := c.AdminInviteRequestsApprove(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminInviteRequestsApproveResponse(rsp)
}

// AdminInviteRequestsApprovedListWithResponse request returning *AdminInviteRequestsApprovedListResponse
func (c *ClientWithResponses) AdminInviteRequestsApprovedListWithResponse(ctx context.Context, params *AdminInviteRequestsApprovedListParams, reqEditors ...RequestEditorFn) (*AdminInviteRequestsApprovedListResponse, error) {
	rsp, err := c.AdminInviteRequestsApprovedList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminInviteRequestsApprovedListResponse(rsp)
}

// AdminInviteRequestsDeniedListWithResponse request returning *AdminInviteRequestsDeniedListResponse
func (c *ClientWithResponses) AdminInviteRequestsDeniedListWithResponse(ctx context.Context, params *AdminInviteRequestsDeniedListParams, reqEditors ...RequestEditorFn) (*AdminInviteRequestsDeniedListResponse, error) {
	rsp, err := c.AdminInviteRequestsDeniedList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminInviteRequestsDeniedListResponse(rsp)
}

// AdminInviteRequestsDenyWithBodyWithResponse request with arbitrary body returning *AdminInviteRequestsDenyResponse
func (c *ClientWithResponses) AdminInviteRequestsDenyWithBodyWithResponse(ctx context.Context, params *AdminInviteRequestsDenyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminInviteRequestsDenyResponse, error) {
	rsp, err := c.AdminInviteRequestsDenyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminInviteRequestsDenyResponse(rsp)
}

func (c *ClientWithResponses) AdminInviteRequestsDenyWithResponse(ctx context.Context, params *AdminInviteRequestsDenyParams, body AdminInviteRequestsDenyJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminInviteRequestsDenyResponse, error) {
	rsp, err := c.AdminInviteRequestsDeny(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminInviteRequestsDenyResponse(rsp)
}

// AdminInviteRequestsListWithResponse request returning *AdminInviteRequestsListResponse
func (c *ClientWithResponses) AdminInviteRequestsListWithResponse(ctx context.Context, params *AdminInviteRequestsListParams, reqEditors ...RequestEditorFn) (*AdminInviteRequestsListResponse, error) {
	rsp, err := c.AdminInviteRequestsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminInviteRequestsListResponse(rsp)
}

// AdminTeamsAdminsListWithResponse request returning *AdminTeamsAdminsListResponse
func (c *ClientWithResponses) AdminTeamsAdminsListWithResponse(ctx context.Context, params *AdminTeamsAdminsListParams, reqEditors ...RequestEditorFn) (*AdminTeamsAdminsListResponse, error) {
	rsp, err := c.AdminTeamsAdminsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsAdminsListResponse(rsp)
}

// AdminTeamsCreateWithBodyWithResponse request with arbitrary body returning *AdminTeamsCreateResponse
func (c *ClientWithResponses) AdminTeamsCreateWithBodyWithResponse(ctx context.Context, params *AdminTeamsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsCreateResponse, error) {
	rsp, err := c.AdminTeamsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsCreateResponse(rsp)
}

func (c *ClientWithResponses) AdminTeamsCreateWithResponse(ctx context.Context, params *AdminTeamsCreateParams, body AdminTeamsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminTeamsCreateResponse, error) {
	rsp, err := c.AdminTeamsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsCreateResponse(rsp)
}

// AdminTeamsListWithResponse request returning *AdminTeamsListResponse
func (c *ClientWithResponses) AdminTeamsListWithResponse(ctx context.Context, params *AdminTeamsListParams, reqEditors ...RequestEditorFn) (*AdminTeamsListResponse, error) {
	rsp, err := c.AdminTeamsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsListResponse(rsp)
}

// AdminTeamsOwnersListWithResponse request returning *AdminTeamsOwnersListResponse
func (c *ClientWithResponses) AdminTeamsOwnersListWithResponse(ctx context.Context, params *AdminTeamsOwnersListParams, reqEditors ...RequestEditorFn) (*AdminTeamsOwnersListResponse, error) {
	rsp, err := c.AdminTeamsOwnersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsOwnersListResponse(rsp)
}

// AdminTeamsSettingsInfoWithResponse request returning *AdminTeamsSettingsInfoResponse
func (c *ClientWithResponses) AdminTeamsSettingsInfoWithResponse(ctx context.Context, params *AdminTeamsSettingsInfoParams, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsInfoResponse, error) {
	rsp, err := c.AdminTeamsSettingsInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsSettingsInfoResponse(rsp)
}

// AdminTeamsSettingsSetDefaultChannelsWithBodyWithResponse request with arbitrary body returning *AdminTeamsSettingsSetDefaultChannelsResponse
func (c *ClientWithResponses) AdminTeamsSettingsSetDefaultChannelsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetDefaultChannelsResponse, error) {
	rsp, err := c.AdminTeamsSettingsSetDefaultChannelsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsSettingsSetDefaultChannelsResponse(rsp)
}

// AdminTeamsSettingsSetDescriptionWithBodyWithResponse request with arbitrary body returning *AdminTeamsSettingsSetDescriptionResponse
func (c *ClientWithResponses) AdminTeamsSettingsSetDescriptionWithBodyWithResponse(ctx context.Context, params *AdminTeamsSettingsSetDescriptionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetDescriptionResponse, error) {
	rsp, err := c.AdminTeamsSettingsSetDescriptionWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsSettingsSetDescriptionResponse(rsp)
}

func (c *ClientWithResponses) AdminTeamsSettingsSetDescriptionWithResponse(ctx context.Context, params *AdminTeamsSettingsSetDescriptionParams, body AdminTeamsSettingsSetDescriptionJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetDescriptionResponse, error) {
	rsp, err := c.AdminTeamsSettingsSetDescription(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsSettingsSetDescriptionResponse(rsp)
}

// AdminTeamsSettingsSetDiscoverabilityWithBodyWithResponse request with arbitrary body returning *AdminTeamsSettingsSetDiscoverabilityResponse
func (c *ClientWithResponses) AdminTeamsSettingsSetDiscoverabilityWithBodyWithResponse(ctx context.Context, params *AdminTeamsSettingsSetDiscoverabilityParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetDiscoverabilityResponse, error) {
	rsp, err := c.AdminTeamsSettingsSetDiscoverabilityWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsSettingsSetDiscoverabilityResponse(rsp)
}

func (c *ClientWithResponses) AdminTeamsSettingsSetDiscoverabilityWithResponse(ctx context.Context, params *AdminTeamsSettingsSetDiscoverabilityParams, body AdminTeamsSettingsSetDiscoverabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetDiscoverabilityResponse, error) {
	rsp, err := c.AdminTeamsSettingsSetDiscoverability(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsSettingsSetDiscoverabilityResponse(rsp)
}

// AdminTeamsSettingsSetIconWithBodyWithResponse request with arbitrary body returning *AdminTeamsSettingsSetIconResponse
func (c *ClientWithResponses) AdminTeamsSettingsSetIconWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetIconResponse, error) {
	rsp, err := c.AdminTeamsSettingsSetIconWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsSettingsSetIconResponse(rsp)
}

// AdminTeamsSettingsSetNameWithBodyWithResponse request with arbitrary body returning *AdminTeamsSettingsSetNameResponse
func (c *ClientWithResponses) AdminTeamsSettingsSetNameWithBodyWithResponse(ctx context.Context, params *AdminTeamsSettingsSetNameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetNameResponse, error) {
	rsp, err := c.AdminTeamsSettingsSetNameWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsSettingsSetNameResponse(rsp)
}

func (c *ClientWithResponses) AdminTeamsSettingsSetNameWithResponse(ctx context.Context, params *AdminTeamsSettingsSetNameParams, body AdminTeamsSettingsSetNameJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminTeamsSettingsSetNameResponse, error) {
	rsp, err := c.AdminTeamsSettingsSetName(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminTeamsSettingsSetNameResponse(rsp)
}

// AdminUsergroupsAddChannelsWithBodyWithResponse request with arbitrary body returning *AdminUsergroupsAddChannelsResponse
func (c *ClientWithResponses) AdminUsergroupsAddChannelsWithBodyWithResponse(ctx context.Context, params *AdminUsergroupsAddChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsergroupsAddChannelsResponse, error) {
	rsp, err := c.AdminUsergroupsAddChannelsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsergroupsAddChannelsResponse(rsp)
}

func (c *ClientWithResponses) AdminUsergroupsAddChannelsWithResponse(ctx context.Context, params *AdminUsergroupsAddChannelsParams, body AdminUsergroupsAddChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsergroupsAddChannelsResponse, error) {
	rsp, err := c.AdminUsergroupsAddChannels(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsergroupsAddChannelsResponse(rsp)
}

// AdminUsergroupsAddTeamsWithBodyWithResponse request with arbitrary body returning *AdminUsergroupsAddTeamsResponse
func (c *ClientWithResponses) AdminUsergroupsAddTeamsWithBodyWithResponse(ctx context.Context, params *AdminUsergroupsAddTeamsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsergroupsAddTeamsResponse, error) {
	rsp, err := c.AdminUsergroupsAddTeamsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsergroupsAddTeamsResponse(rsp)
}

func (c *ClientWithResponses) AdminUsergroupsAddTeamsWithResponse(ctx context.Context, params *AdminUsergroupsAddTeamsParams, body AdminUsergroupsAddTeamsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsergroupsAddTeamsResponse, error) {
	rsp, err := c.AdminUsergroupsAddTeams(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsergroupsAddTeamsResponse(rsp)
}

// AdminUsergroupsListChannelsWithResponse request returning *AdminUsergroupsListChannelsResponse
func (c *ClientWithResponses) AdminUsergroupsListChannelsWithResponse(ctx context.Context, params *AdminUsergroupsListChannelsParams, reqEditors ...RequestEditorFn) (*AdminUsergroupsListChannelsResponse, error) {
	rsp, err := c.AdminUsergroupsListChannels(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsergroupsListChannelsResponse(rsp)
}

// AdminUsergroupsRemoveChannelsWithBodyWithResponse request with arbitrary body returning *AdminUsergroupsRemoveChannelsResponse
func (c *ClientWithResponses) AdminUsergroupsRemoveChannelsWithBodyWithResponse(ctx context.Context, params *AdminUsergroupsRemoveChannelsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsergroupsRemoveChannelsResponse, error) {
	rsp, err := c.AdminUsergroupsRemoveChannelsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsergroupsRemoveChannelsResponse(rsp)
}

func (c *ClientWithResponses) AdminUsergroupsRemoveChannelsWithResponse(ctx context.Context, params *AdminUsergroupsRemoveChannelsParams, body AdminUsergroupsRemoveChannelsJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsergroupsRemoveChannelsResponse, error) {
	rsp, err := c.AdminUsergroupsRemoveChannels(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsergroupsRemoveChannelsResponse(rsp)
}

// AdminUsersAssignWithBodyWithResponse request with arbitrary body returning *AdminUsersAssignResponse
func (c *ClientWithResponses) AdminUsersAssignWithBodyWithResponse(ctx context.Context, params *AdminUsersAssignParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersAssignResponse, error) {
	rsp, err := c.AdminUsersAssignWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersAssignResponse(rsp)
}

func (c *ClientWithResponses) AdminUsersAssignWithResponse(ctx context.Context, params *AdminUsersAssignParams, body AdminUsersAssignJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersAssignResponse, error) {
	rsp, err := c.AdminUsersAssign(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersAssignResponse(rsp)
}

// AdminUsersInviteWithBodyWithResponse request with arbitrary body returning *AdminUsersInviteResponse
func (c *ClientWithResponses) AdminUsersInviteWithBodyWithResponse(ctx context.Context, params *AdminUsersInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersInviteResponse, error) {
	rsp, err := c.AdminUsersInviteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersInviteResponse(rsp)
}

func (c *ClientWithResponses) AdminUsersInviteWithResponse(ctx context.Context, params *AdminUsersInviteParams, body AdminUsersInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersInviteResponse, error) {
	rsp, err := c.AdminUsersInvite(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersInviteResponse(rsp)
}

// AdminUsersListWithResponse request returning *AdminUsersListResponse
func (c *ClientWithResponses) AdminUsersListWithResponse(ctx context.Context, params *AdminUsersListParams, reqEditors ...RequestEditorFn) (*AdminUsersListResponse, error) {
	rsp, err := c.AdminUsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersListResponse(rsp)
}

// AdminUsersRemoveWithBodyWithResponse request with arbitrary body returning *AdminUsersRemoveResponse
func (c *ClientWithResponses) AdminUsersRemoveWithBodyWithResponse(ctx context.Context, params *AdminUsersRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersRemoveResponse, error) {
	rsp, err := c.AdminUsersRemoveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersRemoveResponse(rsp)
}

func (c *ClientWithResponses) AdminUsersRemoveWithResponse(ctx context.Context, params *AdminUsersRemoveParams, body AdminUsersRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersRemoveResponse, error) {
	rsp, err := c.AdminUsersRemove(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersRemoveResponse(rsp)
}

// AdminUsersSessionInvalidateWithBodyWithResponse request with arbitrary body returning *AdminUsersSessionInvalidateResponse
func (c *ClientWithResponses) AdminUsersSessionInvalidateWithBodyWithResponse(ctx context.Context, params *AdminUsersSessionInvalidateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSessionInvalidateResponse, error) {
	rsp, err := c.AdminUsersSessionInvalidateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSessionInvalidateResponse(rsp)
}

func (c *ClientWithResponses) AdminUsersSessionInvalidateWithResponse(ctx context.Context, params *AdminUsersSessionInvalidateParams, body AdminUsersSessionInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSessionInvalidateResponse, error) {
	rsp, err := c.AdminUsersSessionInvalidate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSessionInvalidateResponse(rsp)
}

// AdminUsersSessionResetWithBodyWithResponse request with arbitrary body returning *AdminUsersSessionResetResponse
func (c *ClientWithResponses) AdminUsersSessionResetWithBodyWithResponse(ctx context.Context, params *AdminUsersSessionResetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSessionResetResponse, error) {
	rsp, err := c.AdminUsersSessionResetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSessionResetResponse(rsp)
}

func (c *ClientWithResponses) AdminUsersSessionResetWithResponse(ctx context.Context, params *AdminUsersSessionResetParams, body AdminUsersSessionResetJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSessionResetResponse, error) {
	rsp, err := c.AdminUsersSessionReset(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSessionResetResponse(rsp)
}

// AdminUsersSetAdminWithBodyWithResponse request with arbitrary body returning *AdminUsersSetAdminResponse
func (c *ClientWithResponses) AdminUsersSetAdminWithBodyWithResponse(ctx context.Context, params *AdminUsersSetAdminParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSetAdminResponse, error) {
	rsp, err := c.AdminUsersSetAdminWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSetAdminResponse(rsp)
}

func (c *ClientWithResponses) AdminUsersSetAdminWithResponse(ctx context.Context, params *AdminUsersSetAdminParams, body AdminUsersSetAdminJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSetAdminResponse, error) {
	rsp, err := c.AdminUsersSetAdmin(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSetAdminResponse(rsp)
}

// AdminUsersSetExpirationWithBodyWithResponse request with arbitrary body returning *AdminUsersSetExpirationResponse
func (c *ClientWithResponses) AdminUsersSetExpirationWithBodyWithResponse(ctx context.Context, params *AdminUsersSetExpirationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSetExpirationResponse, error) {
	rsp, err := c.AdminUsersSetExpirationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSetExpirationResponse(rsp)
}

func (c *ClientWithResponses) AdminUsersSetExpirationWithResponse(ctx context.Context, params *AdminUsersSetExpirationParams, body AdminUsersSetExpirationJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSetExpirationResponse, error) {
	rsp, err := c.AdminUsersSetExpiration(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSetExpirationResponse(rsp)
}

// AdminUsersSetOwnerWithBodyWithResponse request with arbitrary body returning *AdminUsersSetOwnerResponse
func (c *ClientWithResponses) AdminUsersSetOwnerWithBodyWithResponse(ctx context.Context, params *AdminUsersSetOwnerParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSetOwnerResponse, error) {
	rsp, err := c.AdminUsersSetOwnerWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSetOwnerResponse(rsp)
}

func (c *ClientWithResponses) AdminUsersSetOwnerWithResponse(ctx context.Context, params *AdminUsersSetOwnerParams, body AdminUsersSetOwnerJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSetOwnerResponse, error) {
	rsp, err := c.AdminUsersSetOwner(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSetOwnerResponse(rsp)
}

// AdminUsersSetRegularWithBodyWithResponse request with arbitrary body returning *AdminUsersSetRegularResponse
func (c *ClientWithResponses) AdminUsersSetRegularWithBodyWithResponse(ctx context.Context, params *AdminUsersSetRegularParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUsersSetRegularResponse, error) {
	rsp, err := c.AdminUsersSetRegularWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSetRegularResponse(rsp)
}

func (c *ClientWithResponses) AdminUsersSetRegularWithResponse(ctx context.Context, params *AdminUsersSetRegularParams, body AdminUsersSetRegularJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUsersSetRegularResponse, error) {
	rsp, err := c.AdminUsersSetRegular(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUsersSetRegularResponse(rsp)
}

// ApiTestWithResponse request returning *ApiTestResponse
func (c *ClientWithResponses) ApiTestWithResponse(ctx context.Context, params *ApiTestParams, reqEditors ...RequestEditorFn) (*ApiTestResponse, error) {
	rsp, err := c.ApiTest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApiTestResponse(rsp)
}

// AppsEventAuthorizationsListWithResponse request returning *AppsEventAuthorizationsListResponse
func (c *ClientWithResponses) AppsEventAuthorizationsListWithResponse(ctx context.Context, params *AppsEventAuthorizationsListParams, reqEditors ...RequestEditorFn) (*AppsEventAuthorizationsListResponse, error) {
	rsp, err := c.AppsEventAuthorizationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsEventAuthorizationsListResponse(rsp)
}

// AppsPermissionsInfoWithResponse request returning *AppsPermissionsInfoResponse
func (c *ClientWithResponses) AppsPermissionsInfoWithResponse(ctx context.Context, params *AppsPermissionsInfoParams, reqEditors ...RequestEditorFn) (*AppsPermissionsInfoResponse, error) {
	rsp, err := c.AppsPermissionsInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPermissionsInfoResponse(rsp)
}

// AppsPermissionsRequestWithResponse request returning *AppsPermissionsRequestResponse
func (c *ClientWithResponses) AppsPermissionsRequestWithResponse(ctx context.Context, params *AppsPermissionsRequestParams, reqEditors ...RequestEditorFn) (*AppsPermissionsRequestResponse, error) {
	rsp, err := c.AppsPermissionsRequest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPermissionsRequestResponse(rsp)
}

// AppsPermissionsResourcesListWithResponse request returning *AppsPermissionsResourcesListResponse
func (c *ClientWithResponses) AppsPermissionsResourcesListWithResponse(ctx context.Context, params *AppsPermissionsResourcesListParams, reqEditors ...RequestEditorFn) (*AppsPermissionsResourcesListResponse, error) {
	rsp, err := c.AppsPermissionsResourcesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPermissionsResourcesListResponse(rsp)
}

// AppsPermissionsScopesListWithResponse request returning *AppsPermissionsScopesListResponse
func (c *ClientWithResponses) AppsPermissionsScopesListWithResponse(ctx context.Context, params *AppsPermissionsScopesListParams, reqEditors ...RequestEditorFn) (*AppsPermissionsScopesListResponse, error) {
	rsp, err := c.AppsPermissionsScopesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPermissionsScopesListResponse(rsp)
}

// AppsPermissionsUsersListWithResponse request returning *AppsPermissionsUsersListResponse
func (c *ClientWithResponses) AppsPermissionsUsersListWithResponse(ctx context.Context, params *AppsPermissionsUsersListParams, reqEditors ...RequestEditorFn) (*AppsPermissionsUsersListResponse, error) {
	rsp, err := c.AppsPermissionsUsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPermissionsUsersListResponse(rsp)
}

// AppsPermissionsUsersRequestWithResponse request returning *AppsPermissionsUsersRequestResponse
func (c *ClientWithResponses) AppsPermissionsUsersRequestWithResponse(ctx context.Context, params *AppsPermissionsUsersRequestParams, reqEditors ...RequestEditorFn) (*AppsPermissionsUsersRequestResponse, error) {
	rsp, err := c.AppsPermissionsUsersRequest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsPermissionsUsersRequestResponse(rsp)
}

// AppsUninstallWithResponse request returning *AppsUninstallResponse
func (c *ClientWithResponses) AppsUninstallWithResponse(ctx context.Context, params *AppsUninstallParams, reqEditors ...RequestEditorFn) (*AppsUninstallResponse, error) {
	rsp, err := c.AppsUninstall(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppsUninstallResponse(rsp)
}

// AuthRevokeWithResponse request returning *AuthRevokeResponse
func (c *ClientWithResponses) AuthRevokeWithResponse(ctx context.Context, params *AuthRevokeParams, reqEditors ...RequestEditorFn) (*AuthRevokeResponse, error) {
	rsp, err := c.AuthRevoke(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthRevokeResponse(rsp)
}

// AuthTestWithResponse request returning *AuthTestResponse
func (c *ClientWithResponses) AuthTestWithResponse(ctx context.Context, params *AuthTestParams, reqEditors ...RequestEditorFn) (*AuthTestResponse, error) {
	rsp, err := c.AuthTest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthTestResponse(rsp)
}

// BotsInfoWithResponse request returning *BotsInfoResponse
func (c *ClientWithResponses) BotsInfoWithResponse(ctx context.Context, params *BotsInfoParams, reqEditors ...RequestEditorFn) (*BotsInfoResponse, error) {
	rsp, err := c.BotsInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBotsInfoResponse(rsp)
}

// CallsAddWithBodyWithResponse request with arbitrary body returning *CallsAddResponse
func (c *ClientWithResponses) CallsAddWithBodyWithResponse(ctx context.Context, params *CallsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallsAddResponse, error) {
	rsp, err := c.CallsAddWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsAddResponse(rsp)
}

func (c *ClientWithResponses) CallsAddWithResponse(ctx context.Context, params *CallsAddParams, body CallsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*CallsAddResponse, error) {
	rsp, err := c.CallsAdd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsAddResponse(rsp)
}

// CallsEndWithBodyWithResponse request with arbitrary body returning *CallsEndResponse
func (c *ClientWithResponses) CallsEndWithBodyWithResponse(ctx context.Context, params *CallsEndParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallsEndResponse, error) {
	rsp, err := c.CallsEndWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsEndResponse(rsp)
}

func (c *ClientWithResponses) CallsEndWithResponse(ctx context.Context, params *CallsEndParams, body CallsEndJSONRequestBody, reqEditors ...RequestEditorFn) (*CallsEndResponse, error) {
	rsp, err := c.CallsEnd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsEndResponse(rsp)
}

// CallsInfoWithResponse request returning *CallsInfoResponse
func (c *ClientWithResponses) CallsInfoWithResponse(ctx context.Context, params *CallsInfoParams, reqEditors ...RequestEditorFn) (*CallsInfoResponse, error) {
	rsp, err := c.CallsInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsInfoResponse(rsp)
}

// CallsParticipantsAddWithBodyWithResponse request with arbitrary body returning *CallsParticipantsAddResponse
func (c *ClientWithResponses) CallsParticipantsAddWithBodyWithResponse(ctx context.Context, params *CallsParticipantsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallsParticipantsAddResponse, error) {
	rsp, err := c.CallsParticipantsAddWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsParticipantsAddResponse(rsp)
}

func (c *ClientWithResponses) CallsParticipantsAddWithResponse(ctx context.Context, params *CallsParticipantsAddParams, body CallsParticipantsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*CallsParticipantsAddResponse, error) {
	rsp, err := c.CallsParticipantsAdd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsParticipantsAddResponse(rsp)
}

// CallsParticipantsRemoveWithBodyWithResponse request with arbitrary body returning *CallsParticipantsRemoveResponse
func (c *ClientWithResponses) CallsParticipantsRemoveWithBodyWithResponse(ctx context.Context, params *CallsParticipantsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallsParticipantsRemoveResponse, error) {
	rsp, err := c.CallsParticipantsRemoveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsParticipantsRemoveResponse(rsp)
}

func (c *ClientWithResponses) CallsParticipantsRemoveWithResponse(ctx context.Context, params *CallsParticipantsRemoveParams, body CallsParticipantsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*CallsParticipantsRemoveResponse, error) {
	rsp, err := c.CallsParticipantsRemove(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsParticipantsRemoveResponse(rsp)
}

// CallsUpdateWithBodyWithResponse request with arbitrary body returning *CallsUpdateResponse
func (c *ClientWithResponses) CallsUpdateWithBodyWithResponse(ctx context.Context, params *CallsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CallsUpdateResponse, error) {
	rsp, err := c.CallsUpdateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsUpdateResponse(rsp)
}

func (c *ClientWithResponses) CallsUpdateWithResponse(ctx context.Context, params *CallsUpdateParams, body CallsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CallsUpdateResponse, error) {
	rsp, err := c.CallsUpdate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCallsUpdateResponse(rsp)
}

// ChatDeleteWithBodyWithResponse request with arbitrary body returning *ChatDeleteResponse
func (c *ClientWithResponses) ChatDeleteWithBodyWithResponse(ctx context.Context, params *ChatDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatDeleteResponse, error) {
	rsp, err := c.ChatDeleteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatDeleteResponse(rsp)
}

func (c *ClientWithResponses) ChatDeleteWithResponse(ctx context.Context, params *ChatDeleteParams, body ChatDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatDeleteResponse, error) {
	rsp, err := c.ChatDelete(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatDeleteResponse(rsp)
}

// ChatDeleteScheduledMessageWithBodyWithResponse request with arbitrary body returning *ChatDeleteScheduledMessageResponse
func (c *ClientWithResponses) ChatDeleteScheduledMessageWithBodyWithResponse(ctx context.Context, params *ChatDeleteScheduledMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatDeleteScheduledMessageResponse, error) {
	rsp, err := c.ChatDeleteScheduledMessageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatDeleteScheduledMessageResponse(rsp)
}

func (c *ClientWithResponses) ChatDeleteScheduledMessageWithResponse(ctx context.Context, params *ChatDeleteScheduledMessageParams, body ChatDeleteScheduledMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatDeleteScheduledMessageResponse, error) {
	rsp, err := c.ChatDeleteScheduledMessage(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatDeleteScheduledMessageResponse(rsp)
}

// ChatGetPermalinkWithResponse request returning *ChatGetPermalinkResponse
func (c *ClientWithResponses) ChatGetPermalinkWithResponse(ctx context.Context, params *ChatGetPermalinkParams, reqEditors ...RequestEditorFn) (*ChatGetPermalinkResponse, error) {
	rsp, err := c.ChatGetPermalink(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatGetPermalinkResponse(rsp)
}

// ChatMeMessageWithBodyWithResponse request with arbitrary body returning *ChatMeMessageResponse
func (c *ClientWithResponses) ChatMeMessageWithBodyWithResponse(ctx context.Context, params *ChatMeMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatMeMessageResponse, error) {
	rsp, err := c.ChatMeMessageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatMeMessageResponse(rsp)
}

func (c *ClientWithResponses) ChatMeMessageWithResponse(ctx context.Context, params *ChatMeMessageParams, body ChatMeMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatMeMessageResponse, error) {
	rsp, err := c.ChatMeMessage(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatMeMessageResponse(rsp)
}

// ChatPostEphemeralWithBodyWithResponse request with arbitrary body returning *ChatPostEphemeralResponse
func (c *ClientWithResponses) ChatPostEphemeralWithBodyWithResponse(ctx context.Context, params *ChatPostEphemeralParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatPostEphemeralResponse, error) {
	rsp, err := c.ChatPostEphemeralWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatPostEphemeralResponse(rsp)
}

func (c *ClientWithResponses) ChatPostEphemeralWithResponse(ctx context.Context, params *ChatPostEphemeralParams, body ChatPostEphemeralJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatPostEphemeralResponse, error) {
	rsp, err := c.ChatPostEphemeral(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatPostEphemeralResponse(rsp)
}

// ChatPostMessageWithBodyWithResponse request with arbitrary body returning *ChatPostMessageResponse
func (c *ClientWithResponses) ChatPostMessageWithBodyWithResponse(ctx context.Context, params *ChatPostMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatPostMessageResponse, error) {
	rsp, err := c.ChatPostMessageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatPostMessageResponse(rsp)
}

func (c *ClientWithResponses) ChatPostMessageWithResponse(ctx context.Context, params *ChatPostMessageParams, body ChatPostMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatPostMessageResponse, error) {
	rsp, err := c.ChatPostMessage(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatPostMessageResponse(rsp)
}

// ChatScheduleMessageWithBodyWithResponse request with arbitrary body returning *ChatScheduleMessageResponse
func (c *ClientWithResponses) ChatScheduleMessageWithBodyWithResponse(ctx context.Context, params *ChatScheduleMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatScheduleMessageResponse, error) {
	rsp, err := c.ChatScheduleMessageWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatScheduleMessageResponse(rsp)
}

func (c *ClientWithResponses) ChatScheduleMessageWithResponse(ctx context.Context, params *ChatScheduleMessageParams, body ChatScheduleMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatScheduleMessageResponse, error) {
	rsp, err := c.ChatScheduleMessage(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatScheduleMessageResponse(rsp)
}

// ChatScheduledMessagesListWithResponse request returning *ChatScheduledMessagesListResponse
func (c *ClientWithResponses) ChatScheduledMessagesListWithResponse(ctx context.Context, params *ChatScheduledMessagesListParams, reqEditors ...RequestEditorFn) (*ChatScheduledMessagesListResponse, error) {
	rsp, err := c.ChatScheduledMessagesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatScheduledMessagesListResponse(rsp)
}

// ChatUnfurlWithBodyWithResponse request with arbitrary body returning *ChatUnfurlResponse
func (c *ClientWithResponses) ChatUnfurlWithBodyWithResponse(ctx context.Context, params *ChatUnfurlParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatUnfurlResponse, error) {
	rsp, err := c.ChatUnfurlWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatUnfurlResponse(rsp)
}

func (c *ClientWithResponses) ChatUnfurlWithResponse(ctx context.Context, params *ChatUnfurlParams, body ChatUnfurlJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatUnfurlResponse, error) {
	rsp, err := c.ChatUnfurl(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatUnfurlResponse(rsp)
}

// ChatUpdateWithBodyWithResponse request with arbitrary body returning *ChatUpdateResponse
func (c *ClientWithResponses) ChatUpdateWithBodyWithResponse(ctx context.Context, params *ChatUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChatUpdateResponse, error) {
	rsp, err := c.ChatUpdateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatUpdateResponse(rsp)
}

func (c *ClientWithResponses) ChatUpdateWithResponse(ctx context.Context, params *ChatUpdateParams, body ChatUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*ChatUpdateResponse, error) {
	rsp, err := c.ChatUpdate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChatUpdateResponse(rsp)
}

// ConversationsArchiveWithBodyWithResponse request with arbitrary body returning *ConversationsArchiveResponse
func (c *ClientWithResponses) ConversationsArchiveWithBodyWithResponse(ctx context.Context, params *ConversationsArchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsArchiveResponse, error) {
	rsp, err := c.ConversationsArchiveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsArchiveResponse(rsp)
}

func (c *ClientWithResponses) ConversationsArchiveWithResponse(ctx context.Context, params *ConversationsArchiveParams, body ConversationsArchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsArchiveResponse, error) {
	rsp, err := c.ConversationsArchive(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsArchiveResponse(rsp)
}

// ConversationsCloseWithBodyWithResponse request with arbitrary body returning *ConversationsCloseResponse
func (c *ClientWithResponses) ConversationsCloseWithBodyWithResponse(ctx context.Context, params *ConversationsCloseParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsCloseResponse, error) {
	rsp, err := c.ConversationsCloseWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsCloseResponse(rsp)
}

func (c *ClientWithResponses) ConversationsCloseWithResponse(ctx context.Context, params *ConversationsCloseParams, body ConversationsCloseJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsCloseResponse, error) {
	rsp, err := c.ConversationsClose(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsCloseResponse(rsp)
}

// ConversationsCreateWithBodyWithResponse request with arbitrary body returning *ConversationsCreateResponse
func (c *ClientWithResponses) ConversationsCreateWithBodyWithResponse(ctx context.Context, params *ConversationsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsCreateResponse, error) {
	rsp, err := c.ConversationsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsCreateResponse(rsp)
}

func (c *ClientWithResponses) ConversationsCreateWithResponse(ctx context.Context, params *ConversationsCreateParams, body ConversationsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsCreateResponse, error) {
	rsp, err := c.ConversationsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsCreateResponse(rsp)
}

// ConversationsHistoryWithResponse request returning *ConversationsHistoryResponse
func (c *ClientWithResponses) ConversationsHistoryWithResponse(ctx context.Context, params *ConversationsHistoryParams, reqEditors ...RequestEditorFn) (*ConversationsHistoryResponse, error) {
	rsp, err := c.ConversationsHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsHistoryResponse(rsp)
}

// ConversationsInfoWithResponse request returning *ConversationsInfoResponse
func (c *ClientWithResponses) ConversationsInfoWithResponse(ctx context.Context, params *ConversationsInfoParams, reqEditors ...RequestEditorFn) (*ConversationsInfoResponse, error) {
	rsp, err := c.ConversationsInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsInfoResponse(rsp)
}

// ConversationsInviteWithBodyWithResponse request with arbitrary body returning *ConversationsInviteResponse
func (c *ClientWithResponses) ConversationsInviteWithBodyWithResponse(ctx context.Context, params *ConversationsInviteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsInviteResponse, error) {
	rsp, err := c.ConversationsInviteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsInviteResponse(rsp)
}

func (c *ClientWithResponses) ConversationsInviteWithResponse(ctx context.Context, params *ConversationsInviteParams, body ConversationsInviteJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsInviteResponse, error) {
	rsp, err := c.ConversationsInvite(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsInviteResponse(rsp)
}

// ConversationsJoinWithBodyWithResponse request with arbitrary body returning *ConversationsJoinResponse
func (c *ClientWithResponses) ConversationsJoinWithBodyWithResponse(ctx context.Context, params *ConversationsJoinParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsJoinResponse, error) {
	rsp, err := c.ConversationsJoinWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsJoinResponse(rsp)
}

func (c *ClientWithResponses) ConversationsJoinWithResponse(ctx context.Context, params *ConversationsJoinParams, body ConversationsJoinJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsJoinResponse, error) {
	rsp, err := c.ConversationsJoin(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsJoinResponse(rsp)
}

// ConversationsKickWithBodyWithResponse request with arbitrary body returning *ConversationsKickResponse
func (c *ClientWithResponses) ConversationsKickWithBodyWithResponse(ctx context.Context, params *ConversationsKickParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsKickResponse, error) {
	rsp, err := c.ConversationsKickWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsKickResponse(rsp)
}

func (c *ClientWithResponses) ConversationsKickWithResponse(ctx context.Context, params *ConversationsKickParams, body ConversationsKickJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsKickResponse, error) {
	rsp, err := c.ConversationsKick(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsKickResponse(rsp)
}

// ConversationsLeaveWithBodyWithResponse request with arbitrary body returning *ConversationsLeaveResponse
func (c *ClientWithResponses) ConversationsLeaveWithBodyWithResponse(ctx context.Context, params *ConversationsLeaveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsLeaveResponse, error) {
	rsp, err := c.ConversationsLeaveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsLeaveResponse(rsp)
}

func (c *ClientWithResponses) ConversationsLeaveWithResponse(ctx context.Context, params *ConversationsLeaveParams, body ConversationsLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsLeaveResponse, error) {
	rsp, err := c.ConversationsLeave(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsLeaveResponse(rsp)
}

// ConversationsListWithResponse request returning *ConversationsListResponse
func (c *ClientWithResponses) ConversationsListWithResponse(ctx context.Context, params *ConversationsListParams, reqEditors ...RequestEditorFn) (*ConversationsListResponse, error) {
	rsp, err := c.ConversationsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsListResponse(rsp)
}

// ConversationsMarkWithBodyWithResponse request with arbitrary body returning *ConversationsMarkResponse
func (c *ClientWithResponses) ConversationsMarkWithBodyWithResponse(ctx context.Context, params *ConversationsMarkParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsMarkResponse, error) {
	rsp, err := c.ConversationsMarkWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsMarkResponse(rsp)
}

func (c *ClientWithResponses) ConversationsMarkWithResponse(ctx context.Context, params *ConversationsMarkParams, body ConversationsMarkJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsMarkResponse, error) {
	rsp, err := c.ConversationsMark(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsMarkResponse(rsp)
}

// ConversationsMembersWithResponse request returning *ConversationsMembersResponse
func (c *ClientWithResponses) ConversationsMembersWithResponse(ctx context.Context, params *ConversationsMembersParams, reqEditors ...RequestEditorFn) (*ConversationsMembersResponse, error) {
	rsp, err := c.ConversationsMembers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsMembersResponse(rsp)
}

// ConversationsOpenWithBodyWithResponse request with arbitrary body returning *ConversationsOpenResponse
func (c *ClientWithResponses) ConversationsOpenWithBodyWithResponse(ctx context.Context, params *ConversationsOpenParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsOpenResponse, error) {
	rsp, err := c.ConversationsOpenWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsOpenResponse(rsp)
}

func (c *ClientWithResponses) ConversationsOpenWithResponse(ctx context.Context, params *ConversationsOpenParams, body ConversationsOpenJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsOpenResponse, error) {
	rsp, err := c.ConversationsOpen(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsOpenResponse(rsp)
}

// ConversationsRenameWithBodyWithResponse request with arbitrary body returning *ConversationsRenameResponse
func (c *ClientWithResponses) ConversationsRenameWithBodyWithResponse(ctx context.Context, params *ConversationsRenameParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsRenameResponse, error) {
	rsp, err := c.ConversationsRenameWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsRenameResponse(rsp)
}

func (c *ClientWithResponses) ConversationsRenameWithResponse(ctx context.Context, params *ConversationsRenameParams, body ConversationsRenameJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsRenameResponse, error) {
	rsp, err := c.ConversationsRename(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsRenameResponse(rsp)
}

// ConversationsRepliesWithResponse request returning *ConversationsRepliesResponse
func (c *ClientWithResponses) ConversationsRepliesWithResponse(ctx context.Context, params *ConversationsRepliesParams, reqEditors ...RequestEditorFn) (*ConversationsRepliesResponse, error) {
	rsp, err := c.ConversationsReplies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsRepliesResponse(rsp)
}

// ConversationsSetPurposeWithBodyWithResponse request with arbitrary body returning *ConversationsSetPurposeResponse
func (c *ClientWithResponses) ConversationsSetPurposeWithBodyWithResponse(ctx context.Context, params *ConversationsSetPurposeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsSetPurposeResponse, error) {
	rsp, err := c.ConversationsSetPurposeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsSetPurposeResponse(rsp)
}

func (c *ClientWithResponses) ConversationsSetPurposeWithResponse(ctx context.Context, params *ConversationsSetPurposeParams, body ConversationsSetPurposeJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsSetPurposeResponse, error) {
	rsp, err := c.ConversationsSetPurpose(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsSetPurposeResponse(rsp)
}

// ConversationsSetTopicWithBodyWithResponse request with arbitrary body returning *ConversationsSetTopicResponse
func (c *ClientWithResponses) ConversationsSetTopicWithBodyWithResponse(ctx context.Context, params *ConversationsSetTopicParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsSetTopicResponse, error) {
	rsp, err := c.ConversationsSetTopicWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsSetTopicResponse(rsp)
}

func (c *ClientWithResponses) ConversationsSetTopicWithResponse(ctx context.Context, params *ConversationsSetTopicParams, body ConversationsSetTopicJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsSetTopicResponse, error) {
	rsp, err := c.ConversationsSetTopic(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsSetTopicResponse(rsp)
}

// ConversationsUnarchiveWithBodyWithResponse request with arbitrary body returning *ConversationsUnarchiveResponse
func (c *ClientWithResponses) ConversationsUnarchiveWithBodyWithResponse(ctx context.Context, params *ConversationsUnarchiveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConversationsUnarchiveResponse, error) {
	rsp, err := c.ConversationsUnarchiveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsUnarchiveResponse(rsp)
}

func (c *ClientWithResponses) ConversationsUnarchiveWithResponse(ctx context.Context, params *ConversationsUnarchiveParams, body ConversationsUnarchiveJSONRequestBody, reqEditors ...RequestEditorFn) (*ConversationsUnarchiveResponse, error) {
	rsp, err := c.ConversationsUnarchive(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConversationsUnarchiveResponse(rsp)
}

// DialogOpenWithResponse request returning *DialogOpenResponse
func (c *ClientWithResponses) DialogOpenWithResponse(ctx context.Context, params *DialogOpenParams, reqEditors ...RequestEditorFn) (*DialogOpenResponse, error) {
	rsp, err := c.DialogOpen(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDialogOpenResponse(rsp)
}

// DndEndDndWithResponse request returning *DndEndDndResponse
func (c *ClientWithResponses) DndEndDndWithResponse(ctx context.Context, params *DndEndDndParams, reqEditors ...RequestEditorFn) (*DndEndDndResponse, error) {
	rsp, err := c.DndEndDnd(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDndEndDndResponse(rsp)
}

// DndEndSnoozeWithResponse request returning *DndEndSnoozeResponse
func (c *ClientWithResponses) DndEndSnoozeWithResponse(ctx context.Context, params *DndEndSnoozeParams, reqEditors ...RequestEditorFn) (*DndEndSnoozeResponse, error) {
	rsp, err := c.DndEndSnooze(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDndEndSnoozeResponse(rsp)
}

// DndInfoWithResponse request returning *DndInfoResponse
func (c *ClientWithResponses) DndInfoWithResponse(ctx context.Context, params *DndInfoParams, reqEditors ...RequestEditorFn) (*DndInfoResponse, error) {
	rsp, err := c.DndInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDndInfoResponse(rsp)
}

// DndSetSnoozeWithBodyWithResponse request with arbitrary body returning *DndSetSnoozeResponse
func (c *ClientWithResponses) DndSetSnoozeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DndSetSnoozeResponse, error) {
	rsp, err := c.DndSetSnoozeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDndSetSnoozeResponse(rsp)
}

// DndTeamInfoWithResponse request returning *DndTeamInfoResponse
func (c *ClientWithResponses) DndTeamInfoWithResponse(ctx context.Context, params *DndTeamInfoParams, reqEditors ...RequestEditorFn) (*DndTeamInfoResponse, error) {
	rsp, err := c.DndTeamInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDndTeamInfoResponse(rsp)
}

// FilesCommentsDeleteWithBodyWithResponse request with arbitrary body returning *FilesCommentsDeleteResponse
func (c *ClientWithResponses) FilesCommentsDeleteWithBodyWithResponse(ctx context.Context, params *FilesCommentsDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesCommentsDeleteResponse, error) {
	rsp, err := c.FilesCommentsDeleteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesCommentsDeleteResponse(rsp)
}

func (c *ClientWithResponses) FilesCommentsDeleteWithResponse(ctx context.Context, params *FilesCommentsDeleteParams, body FilesCommentsDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*FilesCommentsDeleteResponse, error) {
	rsp, err := c.FilesCommentsDelete(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesCommentsDeleteResponse(rsp)
}

// FilesDeleteWithBodyWithResponse request with arbitrary body returning *FilesDeleteResponse
func (c *ClientWithResponses) FilesDeleteWithBodyWithResponse(ctx context.Context, params *FilesDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesDeleteResponse, error) {
	rsp, err := c.FilesDeleteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesDeleteResponse(rsp)
}

func (c *ClientWithResponses) FilesDeleteWithResponse(ctx context.Context, params *FilesDeleteParams, body FilesDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*FilesDeleteResponse, error) {
	rsp, err := c.FilesDelete(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesDeleteResponse(rsp)
}

// FilesInfoWithResponse request returning *FilesInfoResponse
func (c *ClientWithResponses) FilesInfoWithResponse(ctx context.Context, params *FilesInfoParams, reqEditors ...RequestEditorFn) (*FilesInfoResponse, error) {
	rsp, err := c.FilesInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesInfoResponse(rsp)
}

// FilesListWithResponse request returning *FilesListResponse
func (c *ClientWithResponses) FilesListWithResponse(ctx context.Context, params *FilesListParams, reqEditors ...RequestEditorFn) (*FilesListResponse, error) {
	rsp, err := c.FilesList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesListResponse(rsp)
}

// FilesRemoteAddWithBodyWithResponse request with arbitrary body returning *FilesRemoteAddResponse
func (c *ClientWithResponses) FilesRemoteAddWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesRemoteAddResponse, error) {
	rsp, err := c.FilesRemoteAddWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesRemoteAddResponse(rsp)
}

// FilesRemoteInfoWithResponse request returning *FilesRemoteInfoResponse
func (c *ClientWithResponses) FilesRemoteInfoWithResponse(ctx context.Context, params *FilesRemoteInfoParams, reqEditors ...RequestEditorFn) (*FilesRemoteInfoResponse, error) {
	rsp, err := c.FilesRemoteInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesRemoteInfoResponse(rsp)
}

// FilesRemoteListWithResponse request returning *FilesRemoteListResponse
func (c *ClientWithResponses) FilesRemoteListWithResponse(ctx context.Context, params *FilesRemoteListParams, reqEditors ...RequestEditorFn) (*FilesRemoteListResponse, error) {
	rsp, err := c.FilesRemoteList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesRemoteListResponse(rsp)
}

// FilesRemoteRemoveWithBodyWithResponse request with arbitrary body returning *FilesRemoteRemoveResponse
func (c *ClientWithResponses) FilesRemoteRemoveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesRemoteRemoveResponse, error) {
	rsp, err := c.FilesRemoteRemoveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesRemoteRemoveResponse(rsp)
}

// FilesRemoteShareWithResponse request returning *FilesRemoteShareResponse
func (c *ClientWithResponses) FilesRemoteShareWithResponse(ctx context.Context, params *FilesRemoteShareParams, reqEditors ...RequestEditorFn) (*FilesRemoteShareResponse, error) {
	rsp, err := c.FilesRemoteShare(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesRemoteShareResponse(rsp)
}

// FilesRemoteUpdateWithBodyWithResponse request with arbitrary body returning *FilesRemoteUpdateResponse
func (c *ClientWithResponses) FilesRemoteUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesRemoteUpdateResponse, error) {
	rsp, err := c.FilesRemoteUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesRemoteUpdateResponse(rsp)
}

// FilesRevokePublicURLWithBodyWithResponse request with arbitrary body returning *FilesRevokePublicURLResponse
func (c *ClientWithResponses) FilesRevokePublicURLWithBodyWithResponse(ctx context.Context, params *FilesRevokePublicURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesRevokePublicURLResponse, error) {
	rsp, err := c.FilesRevokePublicURLWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesRevokePublicURLResponse(rsp)
}

func (c *ClientWithResponses) FilesRevokePublicURLWithResponse(ctx context.Context, params *FilesRevokePublicURLParams, body FilesRevokePublicURLJSONRequestBody, reqEditors ...RequestEditorFn) (*FilesRevokePublicURLResponse, error) {
	rsp, err := c.FilesRevokePublicURL(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesRevokePublicURLResponse(rsp)
}

// FilesSharedPublicURLWithBodyWithResponse request with arbitrary body returning *FilesSharedPublicURLResponse
func (c *ClientWithResponses) FilesSharedPublicURLWithBodyWithResponse(ctx context.Context, params *FilesSharedPublicURLParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesSharedPublicURLResponse, error) {
	rsp, err := c.FilesSharedPublicURLWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesSharedPublicURLResponse(rsp)
}

func (c *ClientWithResponses) FilesSharedPublicURLWithResponse(ctx context.Context, params *FilesSharedPublicURLParams, body FilesSharedPublicURLJSONRequestBody, reqEditors ...RequestEditorFn) (*FilesSharedPublicURLResponse, error) {
	rsp, err := c.FilesSharedPublicURL(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesSharedPublicURLResponse(rsp)
}

// FilesUploadWithBodyWithResponse request with arbitrary body returning *FilesUploadResponse
func (c *ClientWithResponses) FilesUploadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FilesUploadResponse, error) {
	rsp, err := c.FilesUploadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFilesUploadResponse(rsp)
}

// MigrationExchangeWithResponse request returning *MigrationExchangeResponse
func (c *ClientWithResponses) MigrationExchangeWithResponse(ctx context.Context, params *MigrationExchangeParams, reqEditors ...RequestEditorFn) (*MigrationExchangeResponse, error) {
	rsp, err := c.MigrationExchange(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMigrationExchangeResponse(rsp)
}

// OauthAccessWithResponse request returning *OauthAccessResponse
func (c *ClientWithResponses) OauthAccessWithResponse(ctx context.Context, params *OauthAccessParams, reqEditors ...RequestEditorFn) (*OauthAccessResponse, error) {
	rsp, err := c.OauthAccess(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOauthAccessResponse(rsp)
}

// OauthTokenWithResponse request returning *OauthTokenResponse
func (c *ClientWithResponses) OauthTokenWithResponse(ctx context.Context, params *OauthTokenParams, reqEditors ...RequestEditorFn) (*OauthTokenResponse, error) {
	rsp, err := c.OauthToken(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOauthTokenResponse(rsp)
}

// OauthV2AccessWithResponse request returning *OauthV2AccessResponse
func (c *ClientWithResponses) OauthV2AccessWithResponse(ctx context.Context, params *OauthV2AccessParams, reqEditors ...RequestEditorFn) (*OauthV2AccessResponse, error) {
	rsp, err := c.OauthV2Access(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseOauthV2AccessResponse(rsp)
}

// PinsAddWithBodyWithResponse request with arbitrary body returning *PinsAddResponse
func (c *ClientWithResponses) PinsAddWithBodyWithResponse(ctx context.Context, params *PinsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PinsAddResponse, error) {
	rsp, err := c.PinsAddWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinsAddResponse(rsp)
}

func (c *ClientWithResponses) PinsAddWithResponse(ctx context.Context, params *PinsAddParams, body PinsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*PinsAddResponse, error) {
	rsp, err := c.PinsAdd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinsAddResponse(rsp)
}

// PinsListWithResponse request returning *PinsListResponse
func (c *ClientWithResponses) PinsListWithResponse(ctx context.Context, params *PinsListParams, reqEditors ...RequestEditorFn) (*PinsListResponse, error) {
	rsp, err := c.PinsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinsListResponse(rsp)
}

// PinsRemoveWithBodyWithResponse request with arbitrary body returning *PinsRemoveResponse
func (c *ClientWithResponses) PinsRemoveWithBodyWithResponse(ctx context.Context, params *PinsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PinsRemoveResponse, error) {
	rsp, err := c.PinsRemoveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinsRemoveResponse(rsp)
}

func (c *ClientWithResponses) PinsRemoveWithResponse(ctx context.Context, params *PinsRemoveParams, body PinsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*PinsRemoveResponse, error) {
	rsp, err := c.PinsRemove(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePinsRemoveResponse(rsp)
}

// ReactionsAddWithBodyWithResponse request with arbitrary body returning *ReactionsAddResponse
func (c *ClientWithResponses) ReactionsAddWithBodyWithResponse(ctx context.Context, params *ReactionsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReactionsAddResponse, error) {
	rsp, err := c.ReactionsAddWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReactionsAddResponse(rsp)
}

func (c *ClientWithResponses) ReactionsAddWithResponse(ctx context.Context, params *ReactionsAddParams, body ReactionsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*ReactionsAddResponse, error) {
	rsp, err := c.ReactionsAdd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReactionsAddResponse(rsp)
}

// ReactionsGetWithResponse request returning *ReactionsGetResponse
func (c *ClientWithResponses) ReactionsGetWithResponse(ctx context.Context, params *ReactionsGetParams, reqEditors ...RequestEditorFn) (*ReactionsGetResponse, error) {
	rsp, err := c.ReactionsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReactionsGetResponse(rsp)
}

// ReactionsListWithResponse request returning *ReactionsListResponse
func (c *ClientWithResponses) ReactionsListWithResponse(ctx context.Context, params *ReactionsListParams, reqEditors ...RequestEditorFn) (*ReactionsListResponse, error) {
	rsp, err := c.ReactionsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReactionsListResponse(rsp)
}

// ReactionsRemoveWithBodyWithResponse request with arbitrary body returning *ReactionsRemoveResponse
func (c *ClientWithResponses) ReactionsRemoveWithBodyWithResponse(ctx context.Context, params *ReactionsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReactionsRemoveResponse, error) {
	rsp, err := c.ReactionsRemoveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReactionsRemoveResponse(rsp)
}

func (c *ClientWithResponses) ReactionsRemoveWithResponse(ctx context.Context, params *ReactionsRemoveParams, body ReactionsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*ReactionsRemoveResponse, error) {
	rsp, err := c.ReactionsRemove(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReactionsRemoveResponse(rsp)
}

// RemindersAddWithBodyWithResponse request with arbitrary body returning *RemindersAddResponse
func (c *ClientWithResponses) RemindersAddWithBodyWithResponse(ctx context.Context, params *RemindersAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemindersAddResponse, error) {
	rsp, err := c.RemindersAddWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemindersAddResponse(rsp)
}

func (c *ClientWithResponses) RemindersAddWithResponse(ctx context.Context, params *RemindersAddParams, body RemindersAddJSONRequestBody, reqEditors ...RequestEditorFn) (*RemindersAddResponse, error) {
	rsp, err := c.RemindersAdd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemindersAddResponse(rsp)
}

// RemindersCompleteWithBodyWithResponse request with arbitrary body returning *RemindersCompleteResponse
func (c *ClientWithResponses) RemindersCompleteWithBodyWithResponse(ctx context.Context, params *RemindersCompleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemindersCompleteResponse, error) {
	rsp, err := c.RemindersCompleteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemindersCompleteResponse(rsp)
}

func (c *ClientWithResponses) RemindersCompleteWithResponse(ctx context.Context, params *RemindersCompleteParams, body RemindersCompleteJSONRequestBody, reqEditors ...RequestEditorFn) (*RemindersCompleteResponse, error) {
	rsp, err := c.RemindersComplete(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemindersCompleteResponse(rsp)
}

// RemindersDeleteWithBodyWithResponse request with arbitrary body returning *RemindersDeleteResponse
func (c *ClientWithResponses) RemindersDeleteWithBodyWithResponse(ctx context.Context, params *RemindersDeleteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemindersDeleteResponse, error) {
	rsp, err := c.RemindersDeleteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemindersDeleteResponse(rsp)
}

func (c *ClientWithResponses) RemindersDeleteWithResponse(ctx context.Context, params *RemindersDeleteParams, body RemindersDeleteJSONRequestBody, reqEditors ...RequestEditorFn) (*RemindersDeleteResponse, error) {
	rsp, err := c.RemindersDelete(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemindersDeleteResponse(rsp)
}

// RemindersInfoWithResponse request returning *RemindersInfoResponse
func (c *ClientWithResponses) RemindersInfoWithResponse(ctx context.Context, params *RemindersInfoParams, reqEditors ...RequestEditorFn) (*RemindersInfoResponse, error) {
	rsp, err := c.RemindersInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemindersInfoResponse(rsp)
}

// RemindersListWithResponse request returning *RemindersListResponse
func (c *ClientWithResponses) RemindersListWithResponse(ctx context.Context, params *RemindersListParams, reqEditors ...RequestEditorFn) (*RemindersListResponse, error) {
	rsp, err := c.RemindersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemindersListResponse(rsp)
}

// RtmConnectWithResponse request returning *RtmConnectResponse
func (c *ClientWithResponses) RtmConnectWithResponse(ctx context.Context, params *RtmConnectParams, reqEditors ...RequestEditorFn) (*RtmConnectResponse, error) {
	rsp, err := c.RtmConnect(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRtmConnectResponse(rsp)
}

// SearchMessagesWithResponse request returning *SearchMessagesResponse
func (c *ClientWithResponses) SearchMessagesWithResponse(ctx context.Context, params *SearchMessagesParams, reqEditors ...RequestEditorFn) (*SearchMessagesResponse, error) {
	rsp, err := c.SearchMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchMessagesResponse(rsp)
}

// StarsAddWithBodyWithResponse request with arbitrary body returning *StarsAddResponse
func (c *ClientWithResponses) StarsAddWithBodyWithResponse(ctx context.Context, params *StarsAddParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StarsAddResponse, error) {
	rsp, err := c.StarsAddWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStarsAddResponse(rsp)
}

func (c *ClientWithResponses) StarsAddWithResponse(ctx context.Context, params *StarsAddParams, body StarsAddJSONRequestBody, reqEditors ...RequestEditorFn) (*StarsAddResponse, error) {
	rsp, err := c.StarsAdd(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStarsAddResponse(rsp)
}

// StarsListWithResponse request returning *StarsListResponse
func (c *ClientWithResponses) StarsListWithResponse(ctx context.Context, params *StarsListParams, reqEditors ...RequestEditorFn) (*StarsListResponse, error) {
	rsp, err := c.StarsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStarsListResponse(rsp)
}

// StarsRemoveWithBodyWithResponse request with arbitrary body returning *StarsRemoveResponse
func (c *ClientWithResponses) StarsRemoveWithBodyWithResponse(ctx context.Context, params *StarsRemoveParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*StarsRemoveResponse, error) {
	rsp, err := c.StarsRemoveWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStarsRemoveResponse(rsp)
}

func (c *ClientWithResponses) StarsRemoveWithResponse(ctx context.Context, params *StarsRemoveParams, body StarsRemoveJSONRequestBody, reqEditors ...RequestEditorFn) (*StarsRemoveResponse, error) {
	rsp, err := c.StarsRemove(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStarsRemoveResponse(rsp)
}

// TeamAccessLogsWithResponse request returning *TeamAccessLogsResponse
func (c *ClientWithResponses) TeamAccessLogsWithResponse(ctx context.Context, params *TeamAccessLogsParams, reqEditors ...RequestEditorFn) (*TeamAccessLogsResponse, error) {
	rsp, err := c.TeamAccessLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamAccessLogsResponse(rsp)
}

// TeamBillableInfoWithResponse request returning *TeamBillableInfoResponse
func (c *ClientWithResponses) TeamBillableInfoWithResponse(ctx context.Context, params *TeamBillableInfoParams, reqEditors ...RequestEditorFn) (*TeamBillableInfoResponse, error) {
	rsp, err := c.TeamBillableInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamBillableInfoResponse(rsp)
}

// TeamInfoWithResponse request returning *TeamInfoResponse
func (c *ClientWithResponses) TeamInfoWithResponse(ctx context.Context, params *TeamInfoParams, reqEditors ...RequestEditorFn) (*TeamInfoResponse, error) {
	rsp, err := c.TeamInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamInfoResponse(rsp)
}

// TeamIntegrationLogsWithResponse request returning *TeamIntegrationLogsResponse
func (c *ClientWithResponses) TeamIntegrationLogsWithResponse(ctx context.Context, params *TeamIntegrationLogsParams, reqEditors ...RequestEditorFn) (*TeamIntegrationLogsResponse, error) {
	rsp, err := c.TeamIntegrationLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamIntegrationLogsResponse(rsp)
}

// TeamProfileGetWithResponse request returning *TeamProfileGetResponse
func (c *ClientWithResponses) TeamProfileGetWithResponse(ctx context.Context, params *TeamProfileGetParams, reqEditors ...RequestEditorFn) (*TeamProfileGetResponse, error) {
	rsp, err := c.TeamProfileGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTeamProfileGetResponse(rsp)
}

// UsergroupsCreateWithBodyWithResponse request with arbitrary body returning *UsergroupsCreateResponse
func (c *ClientWithResponses) UsergroupsCreateWithBodyWithResponse(ctx context.Context, params *UsergroupsCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsergroupsCreateResponse, error) {
	rsp, err := c.UsergroupsCreateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsCreateResponse(rsp)
}

func (c *ClientWithResponses) UsergroupsCreateWithResponse(ctx context.Context, params *UsergroupsCreateParams, body UsergroupsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsergroupsCreateResponse, error) {
	rsp, err := c.UsergroupsCreate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsCreateResponse(rsp)
}

// UsergroupsDisableWithBodyWithResponse request with arbitrary body returning *UsergroupsDisableResponse
func (c *ClientWithResponses) UsergroupsDisableWithBodyWithResponse(ctx context.Context, params *UsergroupsDisableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsergroupsDisableResponse, error) {
	rsp, err := c.UsergroupsDisableWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsDisableResponse(rsp)
}

func (c *ClientWithResponses) UsergroupsDisableWithResponse(ctx context.Context, params *UsergroupsDisableParams, body UsergroupsDisableJSONRequestBody, reqEditors ...RequestEditorFn) (*UsergroupsDisableResponse, error) {
	rsp, err := c.UsergroupsDisable(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsDisableResponse(rsp)
}

// UsergroupsEnableWithBodyWithResponse request with arbitrary body returning *UsergroupsEnableResponse
func (c *ClientWithResponses) UsergroupsEnableWithBodyWithResponse(ctx context.Context, params *UsergroupsEnableParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsergroupsEnableResponse, error) {
	rsp, err := c.UsergroupsEnableWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsEnableResponse(rsp)
}

func (c *ClientWithResponses) UsergroupsEnableWithResponse(ctx context.Context, params *UsergroupsEnableParams, body UsergroupsEnableJSONRequestBody, reqEditors ...RequestEditorFn) (*UsergroupsEnableResponse, error) {
	rsp, err := c.UsergroupsEnable(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsEnableResponse(rsp)
}

// UsergroupsListWithResponse request returning *UsergroupsListResponse
func (c *ClientWithResponses) UsergroupsListWithResponse(ctx context.Context, params *UsergroupsListParams, reqEditors ...RequestEditorFn) (*UsergroupsListResponse, error) {
	rsp, err := c.UsergroupsList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsListResponse(rsp)
}

// UsergroupsUpdateWithBodyWithResponse request with arbitrary body returning *UsergroupsUpdateResponse
func (c *ClientWithResponses) UsergroupsUpdateWithBodyWithResponse(ctx context.Context, params *UsergroupsUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsergroupsUpdateResponse, error) {
	rsp, err := c.UsergroupsUpdateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsergroupsUpdateWithResponse(ctx context.Context, params *UsergroupsUpdateParams, body UsergroupsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsergroupsUpdateResponse, error) {
	rsp, err := c.UsergroupsUpdate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsUpdateResponse(rsp)
}

// UsergroupsUsersListWithResponse request returning *UsergroupsUsersListResponse
func (c *ClientWithResponses) UsergroupsUsersListWithResponse(ctx context.Context, params *UsergroupsUsersListParams, reqEditors ...RequestEditorFn) (*UsergroupsUsersListResponse, error) {
	rsp, err := c.UsergroupsUsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsUsersListResponse(rsp)
}

// UsergroupsUsersUpdateWithBodyWithResponse request with arbitrary body returning *UsergroupsUsersUpdateResponse
func (c *ClientWithResponses) UsergroupsUsersUpdateWithBodyWithResponse(ctx context.Context, params *UsergroupsUsersUpdateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsergroupsUsersUpdateResponse, error) {
	rsp, err := c.UsergroupsUsersUpdateWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsUsersUpdateResponse(rsp)
}

func (c *ClientWithResponses) UsergroupsUsersUpdateWithResponse(ctx context.Context, params *UsergroupsUsersUpdateParams, body UsergroupsUsersUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UsergroupsUsersUpdateResponse, error) {
	rsp, err := c.UsergroupsUsersUpdate(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsergroupsUsersUpdateResponse(rsp)
}

// UsersConversationsWithResponse request returning *UsersConversationsResponse
func (c *ClientWithResponses) UsersConversationsWithResponse(ctx context.Context, params *UsersConversationsParams, reqEditors ...RequestEditorFn) (*UsersConversationsResponse, error) {
	rsp, err := c.UsersConversations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersConversationsResponse(rsp)
}

// UsersDeletePhotoWithBodyWithResponse request with arbitrary body returning *UsersDeletePhotoResponse
func (c *ClientWithResponses) UsersDeletePhotoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersDeletePhotoResponse, error) {
	rsp, err := c.UsersDeletePhotoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersDeletePhotoResponse(rsp)
}

// UsersGetPresenceWithResponse request returning *UsersGetPresenceResponse
func (c *ClientWithResponses) UsersGetPresenceWithResponse(ctx context.Context, params *UsersGetPresenceParams, reqEditors ...RequestEditorFn) (*UsersGetPresenceResponse, error) {
	rsp, err := c.UsersGetPresence(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersGetPresenceResponse(rsp)
}

// UsersIdentityWithResponse request returning *UsersIdentityResponse
func (c *ClientWithResponses) UsersIdentityWithResponse(ctx context.Context, params *UsersIdentityParams, reqEditors ...RequestEditorFn) (*UsersIdentityResponse, error) {
	rsp, err := c.UsersIdentity(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersIdentityResponse(rsp)
}

// UsersInfoWithResponse request returning *UsersInfoResponse
func (c *ClientWithResponses) UsersInfoWithResponse(ctx context.Context, params *UsersInfoParams, reqEditors ...RequestEditorFn) (*UsersInfoResponse, error) {
	rsp, err := c.UsersInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersInfoResponse(rsp)
}

// UsersListWithResponse request returning *UsersListResponse
func (c *ClientWithResponses) UsersListWithResponse(ctx context.Context, params *UsersListParams, reqEditors ...RequestEditorFn) (*UsersListResponse, error) {
	rsp, err := c.UsersList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersListResponse(rsp)
}

// UsersLookupByEmailWithResponse request returning *UsersLookupByEmailResponse
func (c *ClientWithResponses) UsersLookupByEmailWithResponse(ctx context.Context, params *UsersLookupByEmailParams, reqEditors ...RequestEditorFn) (*UsersLookupByEmailResponse, error) {
	rsp, err := c.UsersLookupByEmail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersLookupByEmailResponse(rsp)
}

// UsersProfileGetWithResponse request returning *UsersProfileGetResponse
func (c *ClientWithResponses) UsersProfileGetWithResponse(ctx context.Context, params *UsersProfileGetParams, reqEditors ...RequestEditorFn) (*UsersProfileGetResponse, error) {
	rsp, err := c.UsersProfileGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersProfileGetResponse(rsp)
}

// UsersProfileSetWithBodyWithResponse request with arbitrary body returning *UsersProfileSetResponse
func (c *ClientWithResponses) UsersProfileSetWithBodyWithResponse(ctx context.Context, params *UsersProfileSetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersProfileSetResponse, error) {
	rsp, err := c.UsersProfileSetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersProfileSetResponse(rsp)
}

func (c *ClientWithResponses) UsersProfileSetWithResponse(ctx context.Context, params *UsersProfileSetParams, body UsersProfileSetJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersProfileSetResponse, error) {
	rsp, err := c.UsersProfileSet(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersProfileSetResponse(rsp)
}

// UsersSetActiveWithResponse request returning *UsersSetActiveResponse
func (c *ClientWithResponses) UsersSetActiveWithResponse(ctx context.Context, params *UsersSetActiveParams, reqEditors ...RequestEditorFn) (*UsersSetActiveResponse, error) {
	rsp, err := c.UsersSetActive(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersSetActiveResponse(rsp)
}

// UsersSetPhotoWithBodyWithResponse request with arbitrary body returning *UsersSetPhotoResponse
func (c *ClientWithResponses) UsersSetPhotoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersSetPhotoResponse, error) {
	rsp, err := c.UsersSetPhotoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersSetPhotoResponse(rsp)
}

// UsersSetPresenceWithBodyWithResponse request with arbitrary body returning *UsersSetPresenceResponse
func (c *ClientWithResponses) UsersSetPresenceWithBodyWithResponse(ctx context.Context, params *UsersSetPresenceParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UsersSetPresenceResponse, error) {
	rsp, err := c.UsersSetPresenceWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersSetPresenceResponse(rsp)
}

func (c *ClientWithResponses) UsersSetPresenceWithResponse(ctx context.Context, params *UsersSetPresenceParams, body UsersSetPresenceJSONRequestBody, reqEditors ...RequestEditorFn) (*UsersSetPresenceResponse, error) {
	rsp, err := c.UsersSetPresence(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUsersSetPresenceResponse(rsp)
}

// ViewsOpenWithResponse request returning *ViewsOpenResponse
func (c *ClientWithResponses) ViewsOpenWithResponse(ctx context.Context, params *ViewsOpenParams, reqEditors ...RequestEditorFn) (*ViewsOpenResponse, error) {
	rsp, err := c.ViewsOpen(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsOpenResponse(rsp)
}

// ViewsPublishWithResponse request returning *ViewsPublishResponse
func (c *ClientWithResponses) ViewsPublishWithResponse(ctx context.Context, params *ViewsPublishParams, reqEditors ...RequestEditorFn) (*ViewsPublishResponse, error) {
	rsp, err := c.ViewsPublish(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsPublishResponse(rsp)
}

// ViewsPushWithResponse request returning *ViewsPushResponse
func (c *ClientWithResponses) ViewsPushWithResponse(ctx context.Context, params *ViewsPushParams, reqEditors ...RequestEditorFn) (*ViewsPushResponse, error) {
	rsp, err := c.ViewsPush(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsPushResponse(rsp)
}

// ViewsUpdateWithResponse request returning *ViewsUpdateResponse
func (c *ClientWithResponses) ViewsUpdateWithResponse(ctx context.Context, params *ViewsUpdateParams, reqEditors ...RequestEditorFn) (*ViewsUpdateResponse, error) {
	rsp, err := c.ViewsUpdate(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseViewsUpdateResponse(rsp)
}

// WorkflowsStepCompletedWithResponse request returning *WorkflowsStepCompletedResponse
func (c *ClientWithResponses) WorkflowsStepCompletedWithResponse(ctx context.Context, params *WorkflowsStepCompletedParams, reqEditors ...RequestEditorFn) (*WorkflowsStepCompletedResponse, error) {
	rsp, err := c.WorkflowsStepCompleted(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsStepCompletedResponse(rsp)
}

// WorkflowsStepFailedWithResponse request returning *WorkflowsStepFailedResponse
func (c *ClientWithResponses) WorkflowsStepFailedWithResponse(ctx context.Context, params *WorkflowsStepFailedParams, reqEditors ...RequestEditorFn) (*WorkflowsStepFailedResponse, error) {
	rsp, err := c.WorkflowsStepFailed(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsStepFailedResponse(rsp)
}

// WorkflowsUpdateStepWithResponse request returning *WorkflowsUpdateStepResponse
func (c *ClientWithResponses) WorkflowsUpdateStepWithResponse(ctx context.Context, params *WorkflowsUpdateStepParams, reqEditors ...RequestEditorFn) (*WorkflowsUpdateStepResponse, error) {
	rsp, err := c.WorkflowsUpdateStep(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWorkflowsUpdateStepResponse(rsp)
}

// ParseAdminAppsApproveResponse parses an HTTP response from a AdminAppsApproveWithResponse call
func ParseAdminAppsApproveResponse(rsp *http.Response) (*AdminAppsApproveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAppsApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminAppsApprovedListResponse parses an HTTP response from a AdminAppsApprovedListWithResponse call
func ParseAdminAppsApprovedListResponse(rsp *http.Response) (*AdminAppsApprovedListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAppsApprovedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminAppsRequestsListResponse parses an HTTP response from a AdminAppsRequestsListWithResponse call
func ParseAdminAppsRequestsListResponse(rsp *http.Response) (*AdminAppsRequestsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAppsRequestsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminAppsRestrictResponse parses an HTTP response from a AdminAppsRestrictWithResponse call
func ParseAdminAppsRestrictResponse(rsp *http.Response) (*AdminAppsRestrictResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAppsRestrictResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminAppsRestrictedListResponse parses an HTTP response from a AdminAppsRestrictedListWithResponse call
func ParseAdminAppsRestrictedListResponse(rsp *http.Response) (*AdminAppsRestrictedListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminAppsRestrictedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsArchiveResponse parses an HTTP response from a AdminConversationsArchiveWithResponse call
func ParseAdminConversationsArchiveResponse(rsp *http.Response) (*AdminConversationsArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsConvertToPrivateResponse parses an HTTP response from a AdminConversationsConvertToPrivateWithResponse call
func ParseAdminConversationsConvertToPrivateResponse(rsp *http.Response) (*AdminConversationsConvertToPrivateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsConvertToPrivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsCreateResponse parses an HTTP response from a AdminConversationsCreateWithResponse call
func ParseAdminConversationsCreateResponse(rsp *http.Response) (*AdminConversationsCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsDeleteResponse parses an HTTP response from a AdminConversationsDeleteWithResponse call
func ParseAdminConversationsDeleteResponse(rsp *http.Response) (*AdminConversationsDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsDisconnectSharedResponse parses an HTTP response from a AdminConversationsDisconnectSharedWithResponse call
func ParseAdminConversationsDisconnectSharedResponse(rsp *http.Response) (*AdminConversationsDisconnectSharedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsDisconnectSharedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsEkmListOriginalConnectedChannelInfoResponse parses an HTTP response from a AdminConversationsEkmListOriginalConnectedChannelInfoWithResponse call
func ParseAdminConversationsEkmListOriginalConnectedChannelInfoResponse(rsp *http.Response) (*AdminConversationsEkmListOriginalConnectedChannelInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsEkmListOriginalConnectedChannelInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsGetConversationPrefsResponse parses an HTTP response from a AdminConversationsGetConversationPrefsWithResponse call
func ParseAdminConversationsGetConversationPrefsResponse(rsp *http.Response) (*AdminConversationsGetConversationPrefsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsGetConversationPrefsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsGetTeamsResponse parses an HTTP response from a AdminConversationsGetTeamsWithResponse call
func ParseAdminConversationsGetTeamsResponse(rsp *http.Response) (*AdminConversationsGetTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsGetTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsInviteResponse parses an HTTP response from a AdminConversationsInviteWithResponse call
func ParseAdminConversationsInviteResponse(rsp *http.Response) (*AdminConversationsInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsRenameResponse parses an HTTP response from a AdminConversationsRenameWithResponse call
func ParseAdminConversationsRenameResponse(rsp *http.Response) (*AdminConversationsRenameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsRenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsRestrictAccessAddGroupResponse parses an HTTP response from a AdminConversationsRestrictAccessAddGroupWithResponse call
func ParseAdminConversationsRestrictAccessAddGroupResponse(rsp *http.Response) (*AdminConversationsRestrictAccessAddGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsRestrictAccessAddGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsRestrictAccessListGroupsResponse parses an HTTP response from a AdminConversationsRestrictAccessListGroupsWithResponse call
func ParseAdminConversationsRestrictAccessListGroupsResponse(rsp *http.Response) (*AdminConversationsRestrictAccessListGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsRestrictAccessListGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsRestrictAccessRemoveGroupResponse parses an HTTP response from a AdminConversationsRestrictAccessRemoveGroupWithResponse call
func ParseAdminConversationsRestrictAccessRemoveGroupResponse(rsp *http.Response) (*AdminConversationsRestrictAccessRemoveGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsRestrictAccessRemoveGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsSearchResponse parses an HTTP response from a AdminConversationsSearchWithResponse call
func ParseAdminConversationsSearchResponse(rsp *http.Response) (*AdminConversationsSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsSetConversationPrefsResponse parses an HTTP response from a AdminConversationsSetConversationPrefsWithResponse call
func ParseAdminConversationsSetConversationPrefsResponse(rsp *http.Response) (*AdminConversationsSetConversationPrefsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsSetConversationPrefsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsSetTeamsResponse parses an HTTP response from a AdminConversationsSetTeamsWithResponse call
func ParseAdminConversationsSetTeamsResponse(rsp *http.Response) (*AdminConversationsSetTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsSetTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminConversationsUnarchiveResponse parses an HTTP response from a AdminConversationsUnarchiveWithResponse call
func ParseAdminConversationsUnarchiveResponse(rsp *http.Response) (*AdminConversationsUnarchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminConversationsUnarchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminInviteRequestsApproveResponse parses an HTTP response from a AdminInviteRequestsApproveWithResponse call
func ParseAdminInviteRequestsApproveResponse(rsp *http.Response) (*AdminInviteRequestsApproveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminInviteRequestsApproveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminInviteRequestsApprovedListResponse parses an HTTP response from a AdminInviteRequestsApprovedListWithResponse call
func ParseAdminInviteRequestsApprovedListResponse(rsp *http.Response) (*AdminInviteRequestsApprovedListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminInviteRequestsApprovedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminInviteRequestsDeniedListResponse parses an HTTP response from a AdminInviteRequestsDeniedListWithResponse call
func ParseAdminInviteRequestsDeniedListResponse(rsp *http.Response) (*AdminInviteRequestsDeniedListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminInviteRequestsDeniedListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminInviteRequestsDenyResponse parses an HTTP response from a AdminInviteRequestsDenyWithResponse call
func ParseAdminInviteRequestsDenyResponse(rsp *http.Response) (*AdminInviteRequestsDenyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminInviteRequestsDenyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminInviteRequestsListResponse parses an HTTP response from a AdminInviteRequestsListWithResponse call
func ParseAdminInviteRequestsListResponse(rsp *http.Response) (*AdminInviteRequestsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminInviteRequestsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTeamsAdminsListResponse parses an HTTP response from a AdminTeamsAdminsListWithResponse call
func ParseAdminTeamsAdminsListResponse(rsp *http.Response) (*AdminTeamsAdminsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTeamsAdminsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTeamsCreateResponse parses an HTTP response from a AdminTeamsCreateWithResponse call
func ParseAdminTeamsCreateResponse(rsp *http.Response) (*AdminTeamsCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTeamsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTeamsListResponse parses an HTTP response from a AdminTeamsListWithResponse call
func ParseAdminTeamsListResponse(rsp *http.Response) (*AdminTeamsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTeamsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTeamsOwnersListResponse parses an HTTP response from a AdminTeamsOwnersListWithResponse call
func ParseAdminTeamsOwnersListResponse(rsp *http.Response) (*AdminTeamsOwnersListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTeamsOwnersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTeamsSettingsInfoResponse parses an HTTP response from a AdminTeamsSettingsInfoWithResponse call
func ParseAdminTeamsSettingsInfoResponse(rsp *http.Response) (*AdminTeamsSettingsInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTeamsSettingsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTeamsSettingsSetDefaultChannelsResponse parses an HTTP response from a AdminTeamsSettingsSetDefaultChannelsWithResponse call
func ParseAdminTeamsSettingsSetDefaultChannelsResponse(rsp *http.Response) (*AdminTeamsSettingsSetDefaultChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTeamsSettingsSetDefaultChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTeamsSettingsSetDescriptionResponse parses an HTTP response from a AdminTeamsSettingsSetDescriptionWithResponse call
func ParseAdminTeamsSettingsSetDescriptionResponse(rsp *http.Response) (*AdminTeamsSettingsSetDescriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTeamsSettingsSetDescriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTeamsSettingsSetDiscoverabilityResponse parses an HTTP response from a AdminTeamsSettingsSetDiscoverabilityWithResponse call
func ParseAdminTeamsSettingsSetDiscoverabilityResponse(rsp *http.Response) (*AdminTeamsSettingsSetDiscoverabilityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTeamsSettingsSetDiscoverabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTeamsSettingsSetIconResponse parses an HTTP response from a AdminTeamsSettingsSetIconWithResponse call
func ParseAdminTeamsSettingsSetIconResponse(rsp *http.Response) (*AdminTeamsSettingsSetIconResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTeamsSettingsSetIconResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminTeamsSettingsSetNameResponse parses an HTTP response from a AdminTeamsSettingsSetNameWithResponse call
func ParseAdminTeamsSettingsSetNameResponse(rsp *http.Response) (*AdminTeamsSettingsSetNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminTeamsSettingsSetNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsergroupsAddChannelsResponse parses an HTTP response from a AdminUsergroupsAddChannelsWithResponse call
func ParseAdminUsergroupsAddChannelsResponse(rsp *http.Response) (*AdminUsergroupsAddChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsergroupsAddChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsergroupsAddTeamsResponse parses an HTTP response from a AdminUsergroupsAddTeamsWithResponse call
func ParseAdminUsergroupsAddTeamsResponse(rsp *http.Response) (*AdminUsergroupsAddTeamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsergroupsAddTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsergroupsListChannelsResponse parses an HTTP response from a AdminUsergroupsListChannelsWithResponse call
func ParseAdminUsergroupsListChannelsResponse(rsp *http.Response) (*AdminUsergroupsListChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsergroupsListChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsergroupsRemoveChannelsResponse parses an HTTP response from a AdminUsergroupsRemoveChannelsWithResponse call
func ParseAdminUsergroupsRemoveChannelsResponse(rsp *http.Response) (*AdminUsergroupsRemoveChannelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsergroupsRemoveChannelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsersAssignResponse parses an HTTP response from a AdminUsersAssignWithResponse call
func ParseAdminUsersAssignResponse(rsp *http.Response) (*AdminUsersAssignResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsersAssignResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsersInviteResponse parses an HTTP response from a AdminUsersInviteWithResponse call
func ParseAdminUsersInviteResponse(rsp *http.Response) (*AdminUsersInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsersInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsersListResponse parses an HTTP response from a AdminUsersListWithResponse call
func ParseAdminUsersListResponse(rsp *http.Response) (*AdminUsersListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsersRemoveResponse parses an HTTP response from a AdminUsersRemoveWithResponse call
func ParseAdminUsersRemoveResponse(rsp *http.Response) (*AdminUsersRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsersRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsersSessionInvalidateResponse parses an HTTP response from a AdminUsersSessionInvalidateWithResponse call
func ParseAdminUsersSessionInvalidateResponse(rsp *http.Response) (*AdminUsersSessionInvalidateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsersSessionInvalidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsersSessionResetResponse parses an HTTP response from a AdminUsersSessionResetWithResponse call
func ParseAdminUsersSessionResetResponse(rsp *http.Response) (*AdminUsersSessionResetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsersSessionResetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsersSetAdminResponse parses an HTTP response from a AdminUsersSetAdminWithResponse call
func ParseAdminUsersSetAdminResponse(rsp *http.Response) (*AdminUsersSetAdminResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsersSetAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsersSetExpirationResponse parses an HTTP response from a AdminUsersSetExpirationWithResponse call
func ParseAdminUsersSetExpirationResponse(rsp *http.Response) (*AdminUsersSetExpirationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsersSetExpirationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsersSetOwnerResponse parses an HTTP response from a AdminUsersSetOwnerWithResponse call
func ParseAdminUsersSetOwnerResponse(rsp *http.Response) (*AdminUsersSetOwnerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsersSetOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAdminUsersSetRegularResponse parses an HTTP response from a AdminUsersSetRegularWithResponse call
func ParseAdminUsersSetRegularResponse(rsp *http.Response) (*AdminUsersSetRegularResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUsersSetRegularResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseApiTestResponse parses an HTTP response from a ApiTestWithResponse call
func ParseApiTestResponse(rsp *http.Response) (*ApiTestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApiTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAppsEventAuthorizationsListResponse parses an HTTP response from a AppsEventAuthorizationsListWithResponse call
func ParseAppsEventAuthorizationsListResponse(rsp *http.Response) (*AppsEventAuthorizationsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsEventAuthorizationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAppsPermissionsInfoResponse parses an HTTP response from a AppsPermissionsInfoWithResponse call
func ParseAppsPermissionsInfoResponse(rsp *http.Response) (*AppsPermissionsInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPermissionsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAppsPermissionsRequestResponse parses an HTTP response from a AppsPermissionsRequestWithResponse call
func ParseAppsPermissionsRequestResponse(rsp *http.Response) (*AppsPermissionsRequestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPermissionsRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAppsPermissionsResourcesListResponse parses an HTTP response from a AppsPermissionsResourcesListWithResponse call
func ParseAppsPermissionsResourcesListResponse(rsp *http.Response) (*AppsPermissionsResourcesListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPermissionsResourcesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAppsPermissionsScopesListResponse parses an HTTP response from a AppsPermissionsScopesListWithResponse call
func ParseAppsPermissionsScopesListResponse(rsp *http.Response) (*AppsPermissionsScopesListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPermissionsScopesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAppsPermissionsUsersListResponse parses an HTTP response from a AppsPermissionsUsersListWithResponse call
func ParseAppsPermissionsUsersListResponse(rsp *http.Response) (*AppsPermissionsUsersListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPermissionsUsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAppsPermissionsUsersRequestResponse parses an HTTP response from a AppsPermissionsUsersRequestWithResponse call
func ParseAppsPermissionsUsersRequestResponse(rsp *http.Response) (*AppsPermissionsUsersRequestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsPermissionsUsersRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAppsUninstallResponse parses an HTTP response from a AppsUninstallWithResponse call
func ParseAppsUninstallResponse(rsp *http.Response) (*AppsUninstallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppsUninstallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthRevokeResponse parses an HTTP response from a AuthRevokeWithResponse call
func ParseAuthRevokeResponse(rsp *http.Response) (*AuthRevokeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthRevokeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseAuthTestResponse parses an HTTP response from a AuthTestWithResponse call
func ParseAuthTestResponse(rsp *http.Response) (*AuthTestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseBotsInfoResponse parses an HTTP response from a BotsInfoWithResponse call
func ParseBotsInfoResponse(rsp *http.Response) (*BotsInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BotsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCallsAddResponse parses an HTTP response from a CallsAddWithResponse call
func ParseCallsAddResponse(rsp *http.Response) (*CallsAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCallsEndResponse parses an HTTP response from a CallsEndWithResponse call
func ParseCallsEndResponse(rsp *http.Response) (*CallsEndResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallsEndResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCallsInfoResponse parses an HTTP response from a CallsInfoWithResponse call
func ParseCallsInfoResponse(rsp *http.Response) (*CallsInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCallsParticipantsAddResponse parses an HTTP response from a CallsParticipantsAddWithResponse call
func ParseCallsParticipantsAddResponse(rsp *http.Response) (*CallsParticipantsAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallsParticipantsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCallsParticipantsRemoveResponse parses an HTTP response from a CallsParticipantsRemoveWithResponse call
func ParseCallsParticipantsRemoveResponse(rsp *http.Response) (*CallsParticipantsRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallsParticipantsRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCallsUpdateResponse parses an HTTP response from a CallsUpdateWithResponse call
func ParseCallsUpdateResponse(rsp *http.Response) (*CallsUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CallsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChatDeleteResponse parses an HTTP response from a ChatDeleteWithResponse call
func ParseChatDeleteResponse(rsp *http.Response) (*ChatDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChatDeleteScheduledMessageResponse parses an HTTP response from a ChatDeleteScheduledMessageWithResponse call
func ParseChatDeleteScheduledMessageResponse(rsp *http.Response) (*ChatDeleteScheduledMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatDeleteScheduledMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChatGetPermalinkResponse parses an HTTP response from a ChatGetPermalinkWithResponse call
func ParseChatGetPermalinkResponse(rsp *http.Response) (*ChatGetPermalinkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatGetPermalinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChatMeMessageResponse parses an HTTP response from a ChatMeMessageWithResponse call
func ParseChatMeMessageResponse(rsp *http.Response) (*ChatMeMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatMeMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChatPostEphemeralResponse parses an HTTP response from a ChatPostEphemeralWithResponse call
func ParseChatPostEphemeralResponse(rsp *http.Response) (*ChatPostEphemeralResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatPostEphemeralResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChatPostMessageResponse parses an HTTP response from a ChatPostMessageWithResponse call
func ParseChatPostMessageResponse(rsp *http.Response) (*ChatPostMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatPostMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChatScheduleMessageResponse parses an HTTP response from a ChatScheduleMessageWithResponse call
func ParseChatScheduleMessageResponse(rsp *http.Response) (*ChatScheduleMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatScheduleMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChatScheduledMessagesListResponse parses an HTTP response from a ChatScheduledMessagesListWithResponse call
func ParseChatScheduledMessagesListResponse(rsp *http.Response) (*ChatScheduledMessagesListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatScheduledMessagesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChatUnfurlResponse parses an HTTP response from a ChatUnfurlWithResponse call
func ParseChatUnfurlResponse(rsp *http.Response) (*ChatUnfurlResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatUnfurlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseChatUpdateResponse parses an HTTP response from a ChatUpdateWithResponse call
func ParseChatUpdateResponse(rsp *http.Response) (*ChatUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChatUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsArchiveResponse parses an HTTP response from a ConversationsArchiveWithResponse call
func ParseConversationsArchiveResponse(rsp *http.Response) (*ConversationsArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsCloseResponse parses an HTTP response from a ConversationsCloseWithResponse call
func ParseConversationsCloseResponse(rsp *http.Response) (*ConversationsCloseResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsCloseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsCreateResponse parses an HTTP response from a ConversationsCreateWithResponse call
func ParseConversationsCreateResponse(rsp *http.Response) (*ConversationsCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsHistoryResponse parses an HTTP response from a ConversationsHistoryWithResponse call
func ParseConversationsHistoryResponse(rsp *http.Response) (*ConversationsHistoryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsInfoResponse parses an HTTP response from a ConversationsInfoWithResponse call
func ParseConversationsInfoResponse(rsp *http.Response) (*ConversationsInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsInviteResponse parses an HTTP response from a ConversationsInviteWithResponse call
func ParseConversationsInviteResponse(rsp *http.Response) (*ConversationsInviteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsInviteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsJoinResponse parses an HTTP response from a ConversationsJoinWithResponse call
func ParseConversationsJoinResponse(rsp *http.Response) (*ConversationsJoinResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsJoinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsKickResponse parses an HTTP response from a ConversationsKickWithResponse call
func ParseConversationsKickResponse(rsp *http.Response) (*ConversationsKickResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsKickResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsLeaveResponse parses an HTTP response from a ConversationsLeaveWithResponse call
func ParseConversationsLeaveResponse(rsp *http.Response) (*ConversationsLeaveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsLeaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsListResponse parses an HTTP response from a ConversationsListWithResponse call
func ParseConversationsListResponse(rsp *http.Response) (*ConversationsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConversationsListResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ConversationsListErrorResponseBody
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsMarkResponse parses an HTTP response from a ConversationsMarkWithResponse call
func ParseConversationsMarkResponse(rsp *http.Response) (*ConversationsMarkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsMarkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsMembersResponse parses an HTTP response from a ConversationsMembersWithResponse call
func ParseConversationsMembersResponse(rsp *http.Response) (*ConversationsMembersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsOpenResponse parses an HTTP response from a ConversationsOpenWithResponse call
func ParseConversationsOpenResponse(rsp *http.Response) (*ConversationsOpenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsOpenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsRenameResponse parses an HTTP response from a ConversationsRenameWithResponse call
func ParseConversationsRenameResponse(rsp *http.Response) (*ConversationsRenameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsRenameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsRepliesResponse parses an HTTP response from a ConversationsRepliesWithResponse call
func ParseConversationsRepliesResponse(rsp *http.Response) (*ConversationsRepliesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsRepliesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsSetPurposeResponse parses an HTTP response from a ConversationsSetPurposeWithResponse call
func ParseConversationsSetPurposeResponse(rsp *http.Response) (*ConversationsSetPurposeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsSetPurposeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsSetTopicResponse parses an HTTP response from a ConversationsSetTopicWithResponse call
func ParseConversationsSetTopicResponse(rsp *http.Response) (*ConversationsSetTopicResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsSetTopicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConversationsUnarchiveResponse parses an HTTP response from a ConversationsUnarchiveWithResponse call
func ParseConversationsUnarchiveResponse(rsp *http.Response) (*ConversationsUnarchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConversationsUnarchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDialogOpenResponse parses an HTTP response from a DialogOpenWithResponse call
func ParseDialogOpenResponse(rsp *http.Response) (*DialogOpenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DialogOpenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDndEndDndResponse parses an HTTP response from a DndEndDndWithResponse call
func ParseDndEndDndResponse(rsp *http.Response) (*DndEndDndResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DndEndDndResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDndEndSnoozeResponse parses an HTTP response from a DndEndSnoozeWithResponse call
func ParseDndEndSnoozeResponse(rsp *http.Response) (*DndEndSnoozeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DndEndSnoozeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDndInfoResponse parses an HTTP response from a DndInfoWithResponse call
func ParseDndInfoResponse(rsp *http.Response) (*DndInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DndInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDndSetSnoozeResponse parses an HTTP response from a DndSetSnoozeWithResponse call
func ParseDndSetSnoozeResponse(rsp *http.Response) (*DndSetSnoozeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DndSetSnoozeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDndTeamInfoResponse parses an HTTP response from a DndTeamInfoWithResponse call
func ParseDndTeamInfoResponse(rsp *http.Response) (*DndTeamInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DndTeamInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesCommentsDeleteResponse parses an HTTP response from a FilesCommentsDeleteWithResponse call
func ParseFilesCommentsDeleteResponse(rsp *http.Response) (*FilesCommentsDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesCommentsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesDeleteResponse parses an HTTP response from a FilesDeleteWithResponse call
func ParseFilesDeleteResponse(rsp *http.Response) (*FilesDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesInfoResponse parses an HTTP response from a FilesInfoWithResponse call
func ParseFilesInfoResponse(rsp *http.Response) (*FilesInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesListResponse parses an HTTP response from a FilesListWithResponse call
func ParseFilesListResponse(rsp *http.Response) (*FilesListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesRemoteAddResponse parses an HTTP response from a FilesRemoteAddWithResponse call
func ParseFilesRemoteAddResponse(rsp *http.Response) (*FilesRemoteAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesRemoteAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesRemoteInfoResponse parses an HTTP response from a FilesRemoteInfoWithResponse call
func ParseFilesRemoteInfoResponse(rsp *http.Response) (*FilesRemoteInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesRemoteInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesRemoteListResponse parses an HTTP response from a FilesRemoteListWithResponse call
func ParseFilesRemoteListResponse(rsp *http.Response) (*FilesRemoteListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesRemoteListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesRemoteRemoveResponse parses an HTTP response from a FilesRemoteRemoveWithResponse call
func ParseFilesRemoteRemoveResponse(rsp *http.Response) (*FilesRemoteRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesRemoteRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesRemoteShareResponse parses an HTTP response from a FilesRemoteShareWithResponse call
func ParseFilesRemoteShareResponse(rsp *http.Response) (*FilesRemoteShareResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesRemoteShareResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesRemoteUpdateResponse parses an HTTP response from a FilesRemoteUpdateWithResponse call
func ParseFilesRemoteUpdateResponse(rsp *http.Response) (*FilesRemoteUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesRemoteUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesRevokePublicURLResponse parses an HTTP response from a FilesRevokePublicURLWithResponse call
func ParseFilesRevokePublicURLResponse(rsp *http.Response) (*FilesRevokePublicURLResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesRevokePublicURLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesSharedPublicURLResponse parses an HTTP response from a FilesSharedPublicURLWithResponse call
func ParseFilesSharedPublicURLResponse(rsp *http.Response) (*FilesSharedPublicURLResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesSharedPublicURLResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseFilesUploadResponse parses an HTTP response from a FilesUploadWithResponse call
func ParseFilesUploadResponse(rsp *http.Response) (*FilesUploadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FilesUploadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseMigrationExchangeResponse parses an HTTP response from a MigrationExchangeWithResponse call
func ParseMigrationExchangeResponse(rsp *http.Response) (*MigrationExchangeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MigrationExchangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOauthAccessResponse parses an HTTP response from a OauthAccessWithResponse call
func ParseOauthAccessResponse(rsp *http.Response) (*OauthAccessResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OauthAccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOauthTokenResponse parses an HTTP response from a OauthTokenWithResponse call
func ParseOauthTokenResponse(rsp *http.Response) (*OauthTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OauthTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseOauthV2AccessResponse parses an HTTP response from a OauthV2AccessWithResponse call
func ParseOauthV2AccessResponse(rsp *http.Response) (*OauthV2AccessResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &OauthV2AccessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePinsAddResponse parses an HTTP response from a PinsAddWithResponse call
func ParsePinsAddResponse(rsp *http.Response) (*PinsAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PinsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePinsListResponse parses an HTTP response from a PinsListWithResponse call
func ParsePinsListResponse(rsp *http.Response) (*PinsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PinsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePinsRemoveResponse parses an HTTP response from a PinsRemoveWithResponse call
func ParsePinsRemoveResponse(rsp *http.Response) (*PinsRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PinsRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReactionsAddResponse parses an HTTP response from a ReactionsAddWithResponse call
func ParseReactionsAddResponse(rsp *http.Response) (*ReactionsAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReactionsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReactionsGetResponse parses an HTTP response from a ReactionsGetWithResponse call
func ParseReactionsGetResponse(rsp *http.Response) (*ReactionsGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReactionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReactionsListResponse parses an HTTP response from a ReactionsListWithResponse call
func ParseReactionsListResponse(rsp *http.Response) (*ReactionsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReactionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReactionsRemoveResponse parses an HTTP response from a ReactionsRemoveWithResponse call
func ParseReactionsRemoveResponse(rsp *http.Response) (*ReactionsRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReactionsRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRemindersAddResponse parses an HTTP response from a RemindersAddWithResponse call
func ParseRemindersAddResponse(rsp *http.Response) (*RemindersAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemindersAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRemindersCompleteResponse parses an HTTP response from a RemindersCompleteWithResponse call
func ParseRemindersCompleteResponse(rsp *http.Response) (*RemindersCompleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemindersCompleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRemindersDeleteResponse parses an HTTP response from a RemindersDeleteWithResponse call
func ParseRemindersDeleteResponse(rsp *http.Response) (*RemindersDeleteResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemindersDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRemindersInfoResponse parses an HTTP response from a RemindersInfoWithResponse call
func ParseRemindersInfoResponse(rsp *http.Response) (*RemindersInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemindersInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRemindersListResponse parses an HTTP response from a RemindersListWithResponse call
func ParseRemindersListResponse(rsp *http.Response) (*RemindersListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemindersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseRtmConnectResponse parses an HTTP response from a RtmConnectWithResponse call
func ParseRtmConnectResponse(rsp *http.Response) (*RtmConnectResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RtmConnectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseSearchMessagesResponse parses an HTTP response from a SearchMessagesWithResponse call
func ParseSearchMessagesResponse(rsp *http.Response) (*SearchMessagesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStarsAddResponse parses an HTTP response from a StarsAddWithResponse call
func ParseStarsAddResponse(rsp *http.Response) (*StarsAddResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StarsAddResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStarsListResponse parses an HTTP response from a StarsListWithResponse call
func ParseStarsListResponse(rsp *http.Response) (*StarsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StarsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseStarsRemoveResponse parses an HTTP response from a StarsRemoveWithResponse call
func ParseStarsRemoveResponse(rsp *http.Response) (*StarsRemoveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StarsRemoveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamAccessLogsResponse parses an HTTP response from a TeamAccessLogsWithResponse call
func ParseTeamAccessLogsResponse(rsp *http.Response) (*TeamAccessLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamAccessLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamBillableInfoResponse parses an HTTP response from a TeamBillableInfoWithResponse call
func ParseTeamBillableInfoResponse(rsp *http.Response) (*TeamBillableInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamBillableInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamInfoResponse parses an HTTP response from a TeamInfoWithResponse call
func ParseTeamInfoResponse(rsp *http.Response) (*TeamInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamIntegrationLogsResponse parses an HTTP response from a TeamIntegrationLogsWithResponse call
func ParseTeamIntegrationLogsResponse(rsp *http.Response) (*TeamIntegrationLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamIntegrationLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseTeamProfileGetResponse parses an HTTP response from a TeamProfileGetWithResponse call
func ParseTeamProfileGetResponse(rsp *http.Response) (*TeamProfileGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TeamProfileGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsergroupsCreateResponse parses an HTTP response from a UsergroupsCreateWithResponse call
func ParseUsergroupsCreateResponse(rsp *http.Response) (*UsergroupsCreateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsergroupsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsergroupsDisableResponse parses an HTTP response from a UsergroupsDisableWithResponse call
func ParseUsergroupsDisableResponse(rsp *http.Response) (*UsergroupsDisableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsergroupsDisableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsergroupsEnableResponse parses an HTTP response from a UsergroupsEnableWithResponse call
func ParseUsergroupsEnableResponse(rsp *http.Response) (*UsergroupsEnableResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsergroupsEnableResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsergroupsListResponse parses an HTTP response from a UsergroupsListWithResponse call
func ParseUsergroupsListResponse(rsp *http.Response) (*UsergroupsListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsergroupsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsergroupsUpdateResponse parses an HTTP response from a UsergroupsUpdateWithResponse call
func ParseUsergroupsUpdateResponse(rsp *http.Response) (*UsergroupsUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsergroupsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsergroupsUsersListResponse parses an HTTP response from a UsergroupsUsersListWithResponse call
func ParseUsergroupsUsersListResponse(rsp *http.Response) (*UsergroupsUsersListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsergroupsUsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsergroupsUsersUpdateResponse parses an HTTP response from a UsergroupsUsersUpdateWithResponse call
func ParseUsergroupsUsersUpdateResponse(rsp *http.Response) (*UsergroupsUsersUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsergroupsUsersUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersConversationsResponse parses an HTTP response from a UsersConversationsWithResponse call
func ParseUsersConversationsResponse(rsp *http.Response) (*UsersConversationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersConversationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersDeletePhotoResponse parses an HTTP response from a UsersDeletePhotoWithResponse call
func ParseUsersDeletePhotoResponse(rsp *http.Response) (*UsersDeletePhotoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersDeletePhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersGetPresenceResponse parses an HTTP response from a UsersGetPresenceWithResponse call
func ParseUsersGetPresenceResponse(rsp *http.Response) (*UsersGetPresenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersGetPresenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersIdentityResponse parses an HTTP response from a UsersIdentityWithResponse call
func ParseUsersIdentityResponse(rsp *http.Response) (*UsersIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Schema for 'identity.basic' scope
			TempOneof00 *struct {
				Ok   DefsOkTrue `json:"ok"`
				Team struct {
					Id DefsTeam `json:"id"`
				} `json:"team"`
				User struct {
					Id   DefsUserId `json:"id"`
					Name string     `json:"name"`
				} `json:"user"`
			} `json:"temp_oneof_00,omitempty"`

			// Schema for 'identity.basic,identity.email' scopes
			TempOneof01 *struct {
				Ok   DefsOkTrue `json:"ok"`
				Team struct {
					Id DefsTeam `json:"id"`
				} `json:"team"`
				User struct {
					Email openapi_types.Email `json:"email"`
					Id    DefsUserId          `json:"id"`
					Name  string              `json:"name"`
				} `json:"user"`
			} `json:"temp_oneof_01,omitempty"`

			// Schema for 'identity.basic,identity.avatar' scopes
			TempOneof02 *struct {
				Ok   DefsOkTrue `json:"ok"`
				Team struct {
					Id DefsTeam `json:"id"`
				} `json:"team"`
				User struct {
					Id       DefsUserId `json:"id"`
					Image192 string     `json:"image_192"`
					Image24  string     `json:"image_24"`
					Image32  string     `json:"image_32"`
					Image48  string     `json:"image_48"`
					Image512 string     `json:"image_512"`
					Image72  string     `json:"image_72"`
					Name     string     `json:"name"`
				} `json:"user"`
			} `json:"temp_oneof_02,omitempty"`

			// Schema for 'identity.basic,identity.team' scopes
			TempOneof03 *struct {
				Ok   DefsOkTrue `json:"ok"`
				Team struct {
					Domain       string   `json:"domain"`
					Id           DefsTeam `json:"id"`
					Image102     string   `json:"image_102"`
					Image132     string   `json:"image_132"`
					Image230     string   `json:"image_230"`
					Image34      string   `json:"image_34"`
					Image44      string   `json:"image_44"`
					Image68      string   `json:"image_68"`
					Image88      string   `json:"image_88"`
					ImageDefault bool     `json:"image_default"`
					Name         string   `json:"name"`
				} `json:"team"`
				User struct {
					Id   DefsUserId `json:"id"`
					Name string     `json:"name"`
				} `json:"user"`
			} `json:"temp_oneof_03,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersInfoResponse parses an HTTP response from a UsersInfoWithResponse call
func ParseUsersInfoResponse(rsp *http.Response) (*UsersInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersListResponse parses an HTTP response from a UsersListWithResponse call
func ParseUsersListResponse(rsp *http.Response) (*UsersListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersLookupByEmailResponse parses an HTTP response from a UsersLookupByEmailWithResponse call
func ParseUsersLookupByEmailResponse(rsp *http.Response) (*UsersLookupByEmailResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersLookupByEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersProfileGetResponse parses an HTTP response from a UsersProfileGetWithResponse call
func ParseUsersProfileGetResponse(rsp *http.Response) (*UsersProfileGetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersProfileGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersProfileSetResponse parses an HTTP response from a UsersProfileSetWithResponse call
func ParseUsersProfileSetResponse(rsp *http.Response) (*UsersProfileSetResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersProfileSetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersSetActiveResponse parses an HTTP response from a UsersSetActiveWithResponse call
func ParseUsersSetActiveResponse(rsp *http.Response) (*UsersSetActiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersSetActiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersSetPhotoResponse parses an HTTP response from a UsersSetPhotoWithResponse call
func ParseUsersSetPhotoResponse(rsp *http.Response) (*UsersSetPhotoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersSetPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseUsersSetPresenceResponse parses an HTTP response from a UsersSetPresenceWithResponse call
func ParseUsersSetPresenceResponse(rsp *http.Response) (*UsersSetPresenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UsersSetPresenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsOpenResponse parses an HTTP response from a ViewsOpenWithResponse call
func ParseViewsOpenResponse(rsp *http.Response) (*ViewsOpenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsOpenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsPublishResponse parses an HTTP response from a ViewsPublishWithResponse call
func ParseViewsPublishResponse(rsp *http.Response) (*ViewsPublishResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsPublishResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsPushResponse parses an HTTP response from a ViewsPushWithResponse call
func ParseViewsPushResponse(rsp *http.Response) (*ViewsPushResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsPushResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseViewsUpdateResponse parses an HTTP response from a ViewsUpdateWithResponse call
func ParseViewsUpdateResponse(rsp *http.Response) (*ViewsUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ViewsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkflowsStepCompletedResponse parses an HTTP response from a WorkflowsStepCompletedWithResponse call
func ParseWorkflowsStepCompletedResponse(rsp *http.Response) (*WorkflowsStepCompletedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsStepCompletedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkflowsStepFailedResponse parses an HTTP response from a WorkflowsStepFailedWithResponse call
func ParseWorkflowsStepFailedResponse(rsp *http.Response) (*WorkflowsStepFailedResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsStepFailedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseWorkflowsUpdateStepResponse parses an HTTP response from a WorkflowsUpdateStepWithResponse call
func ParseWorkflowsUpdateStepResponse(rsp *http.Response) (*WorkflowsUpdateStepResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WorkflowsUpdateStepResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest struct {
			AdditionalProperties map[string]map[string]interface{} `json:"-"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
