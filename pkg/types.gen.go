// Package pkg provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package pkg

import (
	"encoding/json"
	"fmt"
	"github.com/pkg/errors"
)

// Blocks defines model for blocks.
type Blocks []struct {
	Type                 string                 `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DefsAppId defines model for defs_app_id.
type DefsAppId string

// DefsBotId defines model for defs_bot_id.
type DefsBotId string

// DefsChannel defines model for defs_channel.
type DefsChannel string

// DefsChannelId defines model for defs_channel_id.
type DefsChannelId string

// DefsChannelName defines model for defs_channel_name.
type DefsChannelName string

// DefsCommentId defines model for defs_comment_id.
type DefsCommentId string

// DefsDmId defines model for defs_dm_id.
type DefsDmId string

// DefsEnterpriseId defines model for defs_enterprise_id.
type DefsEnterpriseId string

// DefsEnterpriseName defines model for defs_enterprise_name.
type DefsEnterpriseName string

// DefsFileId defines model for defs_file_id.
type DefsFileId string

// DefsGroupId defines model for defs_group_id.
type DefsGroupId string

// DefsOkFalse defines model for defs_ok_false.
type DefsOkFalse bool

// DefsOkTrue defines model for defs_ok_true.
type DefsOkTrue bool

// DefsPinnedInfo defines model for defs_pinned_info.
type DefsPinnedInfo map[string]interface{}

// DefsTeam defines model for defs_team.
type DefsTeam string

// DefsTopicPurposeCreator defines model for defs_topic_purpose_creator.
type DefsTopicPurposeCreator string

// DefsTs defines model for defs_ts.
type DefsTs string

// DefsUserId defines model for defs_user_id.
type DefsUserId string

// DefsWorkspaceId defines model for defs_workspace_id.
type DefsWorkspaceId string

// ObjsBotProfile defines model for objs_bot_profile.
type ObjsBotProfile struct {
	AppId   DefsAppId `json:"app_id"`
	Deleted bool      `json:"deleted"`
	Icons   struct {
		Image36 string `json:"image_36"`
		Image48 string `json:"image_48"`
		Image72 string `json:"image_72"`
	} `json:"icons"`
	Id      DefsBotId `json:"id"`
	Name    string    `json:"name"`
	TeamId  DefsTeam  `json:"team_id"`
	Updated int       `json:"updated"`
}

// ObjsComment defines model for objs_comment.
type ObjsComment struct {
	Comment    string          `json:"comment"`
	Created    int             `json:"created"`
	Id         DefsCommentId   `json:"id"`
	IsIntro    bool            `json:"is_intro"`
	IsStarred  *bool           `json:"is_starred,omitempty"`
	NumStars   *int            `json:"num_stars,omitempty"`
	PinnedInfo *DefsPinnedInfo `json:"pinned_info,omitempty"`
	PinnedTo   *[]DefsChannel  `json:"pinned_to,omitempty"`
	Reactions  *[]ObjsReaction `json:"reactions,omitempty"`
	Timestamp  int             `json:"timestamp"`
	User       DefsUserId      `json:"user"`
}

// ObjsConversation defines model for objs_conversation.
type ObjsConversation interface{}

// ObjsFile defines model for objs_file.
type ObjsFile struct {
	Channels          *[]DefsChannelId `json:"channels,omitempty"`
	CommentsCount     *int             `json:"comments_count,omitempty"`
	Created           *int             `json:"created,omitempty"`
	DateDelete        *int             `json:"date_delete,omitempty"`
	DisplayAsBot      *bool            `json:"display_as_bot,omitempty"`
	Editable          *bool            `json:"editable,omitempty"`
	Editor            *DefsUserId      `json:"editor,omitempty"`
	ExternalId        *string          `json:"external_id,omitempty"`
	ExternalType      *string          `json:"external_type,omitempty"`
	ExternalUrl       *string          `json:"external_url,omitempty"`
	Filetype          *string          `json:"filetype,omitempty"`
	Groups            *[]DefsGroupId   `json:"groups,omitempty"`
	HasRichPreview    *bool            `json:"has_rich_preview,omitempty"`
	Id                *DefsFileId      `json:"id,omitempty"`
	ImageExifRotation *int             `json:"image_exif_rotation,omitempty"`
	Ims               *[]DefsDmId      `json:"ims,omitempty"`
	IsExternal        *bool            `json:"is_external,omitempty"`
	IsPublic          *bool            `json:"is_public,omitempty"`
	IsStarred         *bool            `json:"is_starred,omitempty"`
	IsTombstoned      *bool            `json:"is_tombstoned,omitempty"`
	LastEditor        *DefsUserId      `json:"last_editor,omitempty"`
	Mimetype          *string          `json:"mimetype,omitempty"`
	Mode              *string          `json:"mode,omitempty"`
	Name              *string          `json:"name,omitempty"`
	NonOwnerEditable  *bool            `json:"non_owner_editable,omitempty"`
	NumStars          *int             `json:"num_stars,omitempty"`
	OriginalH         *int             `json:"original_h,omitempty"`
	OriginalW         *int             `json:"original_w,omitempty"`
	Permalink         *string          `json:"permalink,omitempty"`
	PermalinkPublic   *string          `json:"permalink_public,omitempty"`
	PinnedInfo        *DefsPinnedInfo  `json:"pinned_info,omitempty"`
	PinnedTo          *[]DefsChannel   `json:"pinned_to,omitempty"`
	PrettyType        *string          `json:"pretty_type,omitempty"`
	Preview           *string          `json:"preview,omitempty"`
	PublicUrlShared   *bool            `json:"public_url_shared,omitempty"`
	Reactions         *[]ObjsReaction  `json:"reactions,omitempty"`
	Shares            *struct {
		Private *interface{} `json:"private,omitempty"`
		Public  *interface{} `json:"public,omitempty"`
	} `json:"shares,omitempty"`
	Size               *int      `json:"size,omitempty"`
	SourceTeam         *DefsTeam `json:"source_team,omitempty"`
	State              *string   `json:"state,omitempty"`
	Thumb1024          *string   `json:"thumb_1024,omitempty"`
	Thumb1024H         *int      `json:"thumb_1024_h,omitempty"`
	Thumb1024W         *int      `json:"thumb_1024_w,omitempty"`
	Thumb160           *string   `json:"thumb_160,omitempty"`
	Thumb360           *string   `json:"thumb_360,omitempty"`
	Thumb360H          *int      `json:"thumb_360_h,omitempty"`
	Thumb360W          *int      `json:"thumb_360_w,omitempty"`
	Thumb480           *string   `json:"thumb_480,omitempty"`
	Thumb480H          *int      `json:"thumb_480_h,omitempty"`
	Thumb480W          *int      `json:"thumb_480_w,omitempty"`
	Thumb64            *string   `json:"thumb_64,omitempty"`
	Thumb720           *string   `json:"thumb_720,omitempty"`
	Thumb720H          *int      `json:"thumb_720_h,omitempty"`
	Thumb720W          *int      `json:"thumb_720_w,omitempty"`
	Thumb80            *string   `json:"thumb_80,omitempty"`
	Thumb800           *string   `json:"thumb_800,omitempty"`
	Thumb800H          *int      `json:"thumb_800_h,omitempty"`
	Thumb800W          *int      `json:"thumb_800_w,omitempty"`
	Thumb960           *string   `json:"thumb_960,omitempty"`
	Thumb960H          *int      `json:"thumb_960_h,omitempty"`
	Thumb960W          *int      `json:"thumb_960_w,omitempty"`
	ThumbTiny          *string   `json:"thumb_tiny,omitempty"`
	Timestamp          *int      `json:"timestamp,omitempty"`
	Title              *string   `json:"title,omitempty"`
	Updated            *int      `json:"updated,omitempty"`
	UrlPrivate         *string   `json:"url_private,omitempty"`
	UrlPrivateDownload *string   `json:"url_private_download,omitempty"`
	User               *string   `json:"user,omitempty"`
	UserTeam           *DefsTeam `json:"user_team,omitempty"`
	Username           *string   `json:"username,omitempty"`
}

// ObjsIcon defines model for objs_icon.
type ObjsIcon struct {
	Image102     *string `json:"image_102,omitempty"`
	Image132     *string `json:"image_132,omitempty"`
	Image230     *string `json:"image_230,omitempty"`
	Image34      *string `json:"image_34,omitempty"`
	Image44      *string `json:"image_44,omitempty"`
	Image68      *string `json:"image_68,omitempty"`
	Image88      *string `json:"image_88,omitempty"`
	ImageDefault *bool   `json:"image_default,omitempty"`
}

// ObjsMessage defines model for objs_message.
type ObjsMessage struct {
	Attachments *[]struct {
		Fallback    *string `json:"fallback,omitempty"`
		Id          int     `json:"id"`
		ImageBytes  *int    `json:"image_bytes,omitempty"`
		ImageHeight *int    `json:"image_height,omitempty"`
		ImageUrl    *string `json:"image_url,omitempty"`
		ImageWidth  *int    `json:"image_width,omitempty"`
	} `json:"attachments,omitempty"`

	// This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.
	Blocks       *Blocks         `json:"blocks,omitempty"`
	BotId        *interface{}    `json:"bot_id,omitempty"`
	BotProfile   *ObjsBotProfile `json:"bot_profile,omitempty"`
	ClientMsgId  *string         `json:"client_msg_id,omitempty"`
	Comment      *ObjsComment    `json:"comment,omitempty"`
	DisplayAsBot *bool           `json:"display_as_bot,omitempty"`
	File         *ObjsFile       `json:"file,omitempty"`
	Files        *[]ObjsFile     `json:"files,omitempty"`
	Icons        *struct {
		Emoji *string `json:"emoji,omitempty"`
	} `json:"icons,omitempty"`
	Inviter          *DefsUserId           `json:"inviter,omitempty"`
	IsDelayedMessage *bool                 `json:"is_delayed_message,omitempty"`
	IsIntro          *bool                 `json:"is_intro,omitempty"`
	IsStarred        *bool                 `json:"is_starred,omitempty"`
	LastRead         *DefsTs               `json:"last_read,omitempty"`
	LatestReply      *DefsTs               `json:"latest_reply,omitempty"`
	Name             *string               `json:"name,omitempty"`
	OldName          *string               `json:"old_name,omitempty"`
	ParentUserId     *DefsUserId           `json:"parent_user_id,omitempty"`
	Permalink        *string               `json:"permalink,omitempty"`
	PinnedTo         *[]DefsChannel        `json:"pinned_to,omitempty"`
	Purpose          *string               `json:"purpose,omitempty"`
	Reactions        *[]ObjsReaction       `json:"reactions,omitempty"`
	ReplyCount       *int                  `json:"reply_count,omitempty"`
	ReplyUsers       *[]DefsUserId         `json:"reply_users,omitempty"`
	ReplyUsersCount  *int                  `json:"reply_users_count,omitempty"`
	SourceTeam       *DefsWorkspaceId      `json:"source_team,omitempty"`
	Subscribed       *bool                 `json:"subscribed,omitempty"`
	Subtype          *string               `json:"subtype,omitempty"`
	Team             *DefsWorkspaceId      `json:"team,omitempty"`
	Text             string                `json:"text"`
	ThreadTs         *DefsTs               `json:"thread_ts,omitempty"`
	Topic            *string               `json:"topic,omitempty"`
	Ts               DefsTs                `json:"ts"`
	Type             string                `json:"type"`
	UnreadCount      *int                  `json:"unread_count,omitempty"`
	Upload           *bool                 `json:"upload,omitempty"`
	User             *DefsUserId           `json:"user,omitempty"`
	UserProfile      *ObjsUserProfileShort `json:"user_profile,omitempty"`
	UserTeam         *DefsWorkspaceId      `json:"user_team,omitempty"`
	Username         *string               `json:"username,omitempty"`
}

// ObjsReaction defines model for objs_reaction.
type ObjsReaction struct {
	Count                int                    `json:"count"`
	Name                 string                 `json:"name"`
	Users                []DefsUserId           `json:"users"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ObjsTeam defines model for objs_team.
type ObjsTeam struct {
	Archived              *bool               `json:"archived,omitempty"`
	AvatarBaseUrl         *string             `json:"avatar_base_url,omitempty"`
	Created               *int                `json:"created,omitempty"`
	DateCreate            *int                `json:"date_create,omitempty"`
	Deleted               *bool               `json:"deleted,omitempty"`
	Description           *string             `json:"description,omitempty"`
	Discoverable          *string             `json:"discoverable,omitempty"`
	Domain                string              `json:"domain"`
	EmailDomain           string              `json:"email_domain"`
	EnterpriseId          *DefsEnterpriseId   `json:"enterprise_id,omitempty"`
	EnterpriseName        *DefsEnterpriseName `json:"enterprise_name,omitempty"`
	HasComplianceExport   *bool               `json:"has_compliance_export,omitempty"`
	Icon                  ObjsIcon            `json:"icon"`
	Id                    DefsTeam            `json:"id"`
	IsAssigned            *bool               `json:"is_assigned,omitempty"`
	IsEnterprise          *int                `json:"is_enterprise,omitempty"`
	LimitTs               *int                `json:"limit_ts,omitempty"`
	MessagesCount         *int                `json:"messages_count,omitempty"`
	MsgEditWindowMins     *int                `json:"msg_edit_window_mins,omitempty"`
	Name                  string              `json:"name"`
	OverIntegrationsLimit *bool               `json:"over_integrations_limit,omitempty"`
	OverStorageLimit      *bool               `json:"over_storage_limit,omitempty"`
	Plan                  *string             `json:"plan,omitempty"`
}

// ObjsUserProfileShort defines model for objs_user_profile_short.
type ObjsUserProfileShort struct {
	AvatarHash            string          `json:"avatar_hash"`
	DisplayName           string          `json:"display_name"`
	DisplayNameNormalized *string         `json:"display_name_normalized,omitempty"`
	FirstName             string          `json:"first_name"`
	Image72               string          `json:"image_72"`
	IsRestricted          bool            `json:"is_restricted"`
	IsUltraRestricted     bool            `json:"is_ultra_restricted"`
	Name                  string          `json:"name"`
	RealName              string          `json:"real_name"`
	RealNameNormalized    *string         `json:"real_name_normalized,omitempty"`
	Team                  DefsWorkspaceId `json:"team"`
}

// ConversationsListParams defines parameters for ConversationsList.
type ConversationsListParams struct {

	// Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
	Cursor *string `json:"cursor,omitempty"`

	// Authentication token. Requires scope: `conversations:read`
	Token *string `json:"token,omitempty"`

	// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.
	Limit *int `json:"limit,omitempty"`

	// Set to `true` to exclude archived channels from the list
	ExcludeArchived *bool `json:"exclude_archived,omitempty"`

	// Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`
	Types *string `json:"types,omitempty"`
}

// Getter for additional properties for ObjsReaction. Returns the specified
// element and whether it was found
func (a ObjsReaction) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for ObjsReaction
func (a *ObjsReaction) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for ObjsReaction to handle AdditionalProperties
func (a *ObjsReaction) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["count"]; found {
		err = json.Unmarshal(raw, &a.Count)
		if err != nil {
			return errors.Wrap(err, "error reading 'count'")
		}
		delete(object, "count")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return errors.Wrap(err, "error reading 'name'")
		}
		delete(object, "name")
	}

	if raw, found := object["users"]; found {
		err = json.Unmarshal(raw, &a.Users)
		if err != nil {
			return errors.Wrap(err, "error reading 'users'")
		}
		delete(object, "users")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for ObjsReaction to handle AdditionalProperties
func (a ObjsReaction) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["count"], err = json.Marshal(a.Count)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'count'"))
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'name'"))
	}

	object["users"], err = json.Marshal(a.Users)
	if err != nil {
		return nil, errors.Wrap(err, fmt.Sprintf("error marshaling 'users'"))
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}
